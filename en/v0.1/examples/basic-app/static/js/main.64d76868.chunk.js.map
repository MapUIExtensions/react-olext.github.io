{"version":3,"sources":["assets/images/react-olext_logo.svg","components/header/Header/Logo/Logo.js","components/header/Header/Title/SubTitle/SubTitle.js","components/header/Header/Title/Title.js","components/header/Header/Title/MainTitle/MainTitle.js","components/header/Header/Content/Content.js","components/header/Header/Header.js","components/text/coordinate/CurrentCoordinateText/CurrentCoordinateText.js","components/text/scale/CurrentScaleText/CurrentScaleText.js","components/header/SimpleHeader/SimpleHeader.js","components/widget/map/MapWidget/MapWidget.js","components/control/map/Controls/Controls.js","components/widget/map/MapOverviewWidget/MapOverviewWidget.js","components/layout/BorderLayout.js","util/map.js","components/contextMenu/TreeContextMenu/TreeContextMenu.js","components/panel/Panel/Header/Header.js","components/panel/Panel/Expander/Expander.js","components/panel/Panel/Panel.js","components/window/base/Window/Window.js","components/form/layer/tabs/general/GeneralTab/GeneralTab.js","components/form/layer/new/NewLayerForm/NewLayerForm.js","components/form/layer/tabs/source/ImageWMSSourceTab/ImageWMSSourceTab.js","components/form/layer/new/NewImageWMSLayerForm/NewImageWMSLayerForm.js","components/button/layer/new/NewImageWMSLayerButton/NewImageWMSLayerButton.js","components/form/layer/tabs/source/TileWMSSourceTab/TileWMSSourceTab.js","util/common.js","components/form/layer/new/NewTileWMSLayerForm/NewTileWMSLayerForm.js","components/button/layer/new/NewTileWMSLayerButton/NewTileWMSLayerButton.js","components/form/layer/new/NewGroupLayerForm/NewGroupLayerForm.js","components/button/layer/new/NewGroupLayerButton/NewGroupLayerButton.js","components/form/layer/tabs/source/OSMSourceTab/OSMSourceTab.js","components/form/layer/new/NewOSMLayerForm/NewOSMLayerForm.js","components/button/layer/new/NewOSMLayerButton/NewOSMLayerButton.js","components/form/layer/edit/EditLayerForm/EditLayerForm.js","components/form/layer/edit/EditDefaultLayerForm/EditDefaultLayerForm.js","components/form/layer/edit/EditImageWMSLayerForm/EditImageWMSLayerForm.js","components/form/layer/edit/EditTileWMSLayerForm/EditTileWMSLayerForm.js","components/form/layer/edit/EditOSMLayerForm/EditOSMLayerForm.js","components/window/layer/LayerWnd/LayerWnd.js","components/button/layer/edit/EditLayerButton/EditLayerButton.js","components/button/layer/remove/RemoveLayerButton/RemoveLayerButton.js","components/button/feature/ClearAllFeaturesButton/ClearAllFeaturesButton.js","hooks/interactions/useGetPointGeomInteraction.js","util/featureinfo.js","hooks/wms/useWmsGetFeatureInfo.js","components/window/feature/FeaturePropertiesWnd/FeaturePropertiesWnd.js","components/button/wms/WmsGetFeatureInfoButton/WmsGetFeatureInfoButton.js","components/contextMenu/TreeLayerContextMenu/TreeLayerContextMenu.js","hooks/ui/useTreeContextMenu.js","components/tree/layer/LayerTree/LayerTree.js","components/window/coordinate/CoordinateWnd/CoordinateWnd.js","components/button/coordinate/GetCoordinateButton/GetCoordinateButton.js","components/button/zoom/ZoomToAllFeaturesButton/ZoomToAllFeaturesButton.js","components/button/zoom/ZoomToSelectedFeaturesButton/ZoomToSelectedFeaturesButton.js","components/button/feature/ClearSelectedFeaturesButton/ClearSelectedFeaturesButton.js","components/menuBar/feature/FeatureGridMenuBar/FeatureGridMenuBar.js","components/grid/feature/FeatureGrid/FeatureGrid.js","hooks/wfs/useWFSGetFeature.js","hooks/common/usePrevious.js","components/menuBar/wfs/search/WfsSearchByPropertyMenuBar/WfsSearchByPropertyMenuBar.js","components/button/wfs/WfsSearchByPointButton/WfsSearchByPointButton.js","components/menuBar/wfs/search/WfsSearchByPointMenuBar/WfsSearchByPointMenuBar.js","hooks/interactions/useGetBBoxGeomInteraction.js","components/button/wfs/WfsSearchByBBoxButton/WfsSearchByBBoxButton.js","components/menuBar/wfs/search/WfsSearchByBBoxMenuBar/WfsSearchByBBoxMenuBar.js","hooks/interactions/useGetPolygonGeomInteraction.js","components/button/wfs/WfsSearchByPolygonButton/WfsSearchByPolygonButton.js","components/menuBar/wfs/search/WfsSearchByPolygonMenuBar/WfsSearchByPolygonMenuBar.js","components/menuBar/wfs/search/WfsSearchByCQLFilterMenuBar/WfsSearchByCQLFilterMenuBar.js","components/menuBar/wfs/search/WfsSearchMenuBar/WfsSearchMenuBar.js","hooks/wfs/useWFSDescribeFeatureType.js","components/grid/feature/WfsFeatureGrid/WfsFeatureGrid.js","components/window/zoom/ZoomCenterWnd/ZoomCenterWnd.js","components/button/zoom/ZoomCenterButton/ZoomCenterButton.js","components/window/common/AboutWnd/AboutWnd.js","components/button/common/AboutButton/AboutButton.js","App.js","reportWebVitals.js","index.js"],"names":["Logo","logo","app_logo","style","paddingLeft","paddingBottom","paddingTop","alt","width","undefined","height","className","src","SubTitle","children","Title","MainTitle","Content","Header","otherProps","CurrentCoordinateText","map","coordinateFormatFunc","fractionDigits","axisOrientation","getView","getProjection","getAxisOrientation","coord","template","olFormat","mapCoordinateFormat","ref","useRef","useEffect","mousePositionControl","olMousePosition","target","current","coordinateFormat","undefinedHTML","addControl","removeControl","CurrentScaleText","useState","scale","setScale","scaleHandler","useCallback","evt","resolution","get","units","getUnits","newScale","METERS_PER_UNIT","Math","round","on","un","SimpleHeader","mainTitle","subTitle","color","MapWidget","mapRef","setTarget","Controls","getVisibleExtentGeometries","mapSize","getSize","w","h","isNaN","extentCoords","forEach","pixel","getCoordinateFromPixel","push","length","extent","olGeomPolygon","topLeft","olGeomPoint","MapOverviewWidget","parentMap","anchorStyle","boxStyle","magnification","childMapRef","childMap","boxFeature","olFeature","anchorFeature","extentLayer","olVectorLayer","source","olVectorSource","dragInteraction","setDragInteraction","setOverviewMapProperty","key","parentView","parentProjection","overviewView","overviewProjection","overviewCenter","getCenter","olProjEquivalent","olProjTransform","set","getResolution","parentExtent","calculateExtent","parentExtentProjected","olProjTransformExtent","fit","constrainResolution","onParentViewPropChange","updateBox","extentGeometries","geom","anchor","parentMapProjection","transform","setGeometry","enableBoxUpdate","disableBoxUpdate","repositionAnchorFeature","topLeftCoord","getGeometry","getCoordinates","newAnchorGeom","recenterParentFromBox","boxExtent","getExtent","boxCenter","olExtentGetCenter","animate","center","setupDragBehaviour","newDragInteraction","olInteractionTranslate","features","olCollection","addInteraction","setActive","destroyDragBehaviour","removeInteraction","overviewMapClicked","newCenter","coordinate","resizeWindowHandler","e","updateSize","addLayer","window","addEventListener","removeLayer","removeEventListener","getSource","addFeatures","setStyle","BorderLayout","props","proj4","defs","register","getAllLayers","collection","filter","layers","getLayers","getArray","allLayers","layer","OlLayerGroup","layeri","getLayerPositionInfo","groupLayerOrMap","groupLayer","getLayerGroup","info","position","indexOf","childLayer","getResolutionFromScale","OlProjMETERS_PER_UNIT","zoomToExtent","Infinity","getScaleFromResolution","setResolution","alert","zoomToLayer","getFeatures","getLeafVisibleLayers","lyrs","leafLyrs","lyr","concat","coordinateToString","srcCoordinate","srcProjCode","destProjCode","stringifyFunc","createStringXY","destCoordinate","reverse","stringToCoordinate","strCoordinate","projCode","proj","split","item","parseFloat","trim","getCoordinateLabel","XLabel","YLabel","TreeContextMenu","React","memo","overlay","xPos","node","yPos","showMenu","visibility","mode","top","left","collapsible","preTools","postTools","title","toggleCollapse","onMouseOver","onMouseOut","onClose","flex","DownOutlined","onClick","CloseOutlined","Expander","expanded","divEl","setHeight","scrollHeight","Panel","expandDir","onTitleMouseOver","onTitleMouseOut","titleStyle","internalExpanded","setInternalExpanded","prevInternalExpanded","showHeader","Window","onOk","onCancel","visible","bounds","setBounds","dragDisabled","setDragDisabled","draggleRef","onStart","event","uiData","document","documentElement","clientWidth","clientHeight","targetRect","getBoundingClientRect","x","right","y","bottom","nodeRef","disabled","cursor","margin","type","GeneralTab","Fragment","Item","name","label","rules","required","max","step","valuePropName","getOpts","BaseLayer","maxResolution","getMaxResolution","minResolution","getMinResolution","maxZoom","getMaxZoom","minZoom","getMinZoom","opacity","getOpacity","getVisible","zIndex","getZIndex","layout","labelAlign","labelCol","span","wrapperCol","tailLayout","offset","NewLayerForm","layerOpts","onFinish","onFinishFailed","tabs","isDefault","el","Form","useForm","form","defaultActiveKey","tab","initialValues","Tab","TabItem","TabPane","htmlType","resetFields","setFieldsValue","ImageWMSSourceTab","TextArea","allowClear","OlLayerBase","url","getUrl","params","FEATURE_COUNT","getParams","FORMAT","LAYERS","STYLES","VERSION","CQL_FILTER","INFO_FORMAT","defaultWMSLayerOpts","ratio","NewImageWMSLayerForm","parentLayerGroup","onInternalFinish","values","baseOpts","OlImageLayer","OlImageWMSSource","NewImageWMSLayerButton","wndStyle","visibleWnd","setVisibleWnd","TileWMSSourceTab","getUrls","attributions","getAttributions","OlState","READY","normalizeStringInObject","obj","String","defaultTileWMSLayerOpts","imageSmoothing","opaque","wrapX","hidpi","gutter","NewTileWMSLayerForm","OlTileLayer","OlTileWMSSource","NewTileWMSLayerButton","defaultLayerOpts","NewGroupLayerForm","NewGroupLayerButton","OSMSourceTab","defaultOSMLayerOpts","NewOSMLayerForm","opts","OlOSMSource","NewOSMLayerButton","EditLayerForm","EditDefaultLayerForm","properties","setProperties","EditImageWMSLayerForm","setUrl","updateParams","EditTileWMSLayerForm","Array","isArray","setUrls","setAttributions","TileWMSourceTab","EditOSMLayerForm","LayerWnd","ImageWMSSource","TileWMSSource","OSMSource","EditLayerButton","onCloseWindow","RemoveLayerButton","onClickHandler","clear","ClearAllFeaturesButton","vectorLayer","defaultStyle","OlStyleStyle","image","OlStyleCircle","radius","fill","OlStyleFill","useGetPointGeomInteraction","msg","geometry","drawStartHandler","feature","drawEndHandler","setIsRunning","drawAbortHandler","createInteraction","newInteraction","OlInteractionDraw","interaction","OlSourceVector","isRunning","createTooltip","tooltipEl","createElement","OlOverlay","element","positioning","tooltip","mouseOutHandler","getElement","innerHTML","pointerMoveHandler","dragging","setPosition","start","stop","escKeyHandler","keyCode","cleanup","removeOverlay","getViewport","addOverlay","parseFeatureInfoJSON","GeoJSON","readFeatures","parseFeatureInfoTextXml","xmlStr","xmlDoc","DOMParser","parseFromString","xsltDoc","join","xsltProcessor","XSLTProcessor","importStylesheet","resultDoc","transformToDocument","XMLSerializer","serializeToString","prettifyXml","Date","now","parseFeatureInfo","infoFormat","doc","featureInfoCollectionEl","getElementsByTagNameNS","k","layerName","getAttribute","featureInfosEl","i","fieldsEl","j","fieldName","fieldValue","parseEsriWmsFeatureInfoXml","childNodes","nodeValue","parseEsriWmsRawXml","useWmsGetFeatureInfo","errors","setErrors","setFeatures","clearRequest","fetchOpts","method","leafLayers","view","viewResolution","newStates","index","wmsSource","getFeatureInfoUrl","info_format","console","log","fetch","then","response","ok","Error","json","text","responseData","newFeatures","prevFeatures","catch","error","prevErrors","message","FeaturePropertiesWnd","buildDataSourcesFromFromFeatures","dataSources","getProperties","idx","dataSource","property","OlGeomGeometry","toString","getFeatureIds","ids","getId","setDataSources","featureIds","setFeatureIds","columns","dataIndex","scroll","scrollToFirstRowOnChange","tabPosition","size","tableLayout","pagination","bordered","sticky","WmsGetFeatureInfoButton","sendRequest","TreeLayerContextMenu","icon","EditOutlined","maxHeight","createEditLayerButton","ol_layer","DeleteOutlined","OlLayerVector","ClearOutlined","createClearLayerButton","OlLayerImage","InfoCircleOutlined","selectable","createGetFeatureInfoButton","Divider","FileAddOutlined","createAddGroupLayerButton","createAddWMSLayerButton","createAddTileWMSLayerButton","createAddOSMLayerButton","useTreeContextMenu","setXPos","setYPos","setShowMenu","rightClickedNode","setRightClickedNode","onRightClickNode","clientX","clientY","handleClick","LayerTree","layerGroup","draggable","checkable","onExpand","filterFunc","titleFunc","treeNodes","setTreeNodes","checkedKeys","setCheckedKeys","rootLayerName","getVisibleOlUids","l","ol_uid","treeNodeFromLayer","childLayers","TreeNode","treeNodesFromLayerGroup","newTreeNodes","rebuildTreeNodes","onLayerChangeName","oldValue","registerOnLayerChangeName","layerOrGroup","filterFunction","unRegisterOnLayerChangeName","onLayerChangeVisible","newCheckedKeys","registerOnLayerChangeVisible","unRegisterOnLayerChangeVisible","registerCollectionHandlers","unRegisterCollectionHandlers","onCollectionAdd","onCollectionRemove","onCollectionChangeLayers","setLayerVisibility","subLayer","setVisible","onCheck","checked","onDrop","dragLayer","dragNode","dragCollection","dropLayer","dropPos","pos","location","dropPosition","Number","remove","dropInfo","dropCollection","getLength","insertAt","onExpandTree","expandedKeys","onRightClick","CoordinateWnd","coordinateProj","projs","inputCoordinateEl","getCode","curProjCode","setCurProjCode","curStrCoordinate","setCurStrCoordinate","onProjChangeHandler","value","onCopyHandler","inputEl","select","setSelectionRange","execCommand","direction","defaultValue","onChange","Option","display","gap","addonBefore","GetCoordinateButton","ZoomToAllFeaturesButton","zoomToLyr","ZoomToSelectedFeaturesButton","gridApi","getSelectedRows","row","__feature","newSource","VectorSource","ZoomToFeatures","ClearSelectedFeaturesButton","removeFeature","FeatureGridMenuBar","zoomMenu","clearMenu","placement","defaultKeyFunction","defaultColumnDefs","FeatureGrid","columnDefs","rowSelection","featureStyle","OlStyle","stroke","OlStyleStroke","selectedFeatureStyle","keyFunc","onGridReady","onRowClicked","onSelectionChanged","_rowData","setRowData","_selectedFeatures","setSelectedFeatures","_gridApi","setGridApi","setGridColumnApi","getRowNodeId","data","buildRowDataFromFeatures","filtered","Object","keys","reduce","buildRowDataFromLayer","onFeaturePropertyChangeHandler","changedFeature","propertyName","propertyValue","getRowNode","setDataValue","find","registerFeaturePropertyChange","unRegisterFeaturePropertyChange","onFeatureAddHandler","applyTransaction","add","refreshClientSideRowModel","onFeatureRemoveHandler","removedFeature","onFeatureSourceClearHandler","registerLayerEventHandlers","unRegisterLayerEventHandlers","onInternalGridReady","api","columnApi","onInternalSelectionChanged","newSelectedFeatures","includes","field","getGeometryName","sortable","resizable","buildColumnDefs","enableCellTextSelection","immutableData","defaultColDef","headerComponentParams","menuIcon","rowData","column","headerName","MenuBar","useWFSGetFeature","isLoading","setIsLoading","setError","wfsOptions","fetchOptions","contentType","featureRequest","WFS","writeGetFeature","body","parser","outputFormat","toUpperCase","GML2","GML3","GML32","usePrevious","WfsSearchByPropertyMenuBar","internalColumnDefs","setInternalColumnDefs","setPropertyName","setPropertyValue","propertyValue2","setPropertyValue2","filterName","setFilterName","hasNotfilter","setHasNotFilter","matchCase","setMatchCase","wfsGetFeature","onSearchClickHandler","equalTo","notEqualTo","like","isNull","greaterThan","greaterThanOrEqualTo","lessThan","lessThanOrEqualTo","between","not","wfsFilteredOptions","onFilterNameChangeHandler","onHasNotFilterChangeHandler","onMatchCaseChangeHandler","onPropertyNameChangeHandler","onPropertyValueChangeHandler","onPropertyValue2ChangeHandler","matchCaseControl","checkedChildren","unCheckedChildren","defaultChecked","betweenControl","placeholder","onPressEnter","loading","WfsSearchByPointButton","geometryName","srsName","intersects","WfsSearchByPointMenuBar","useGetBBoxGeomInteraction","boxStartHandler","boxDragHandler","boxCancelHandler","dragBox","DragBox","condition","platformModifierKeyOnly","WfsSearchByBBoxButton","bbox","WfsSearchByBBoxMenuBar","olStyleStroke","useGetPolygonGeomInteraction","createSnap","newSnap","OlInteractionSnap","snap","WfsSearchByPolygonButton","WfsSearchByPolygonMenuBar","WfsSearchByCQLFilterMenuBar","filterValue","setFilterValue","onFilterValueHandler","cql_filter","WfsSearchMenuBar","searchType","setSearchType","radioStyle","lineHeight","childSearchPanel","searchMenu","Group","useWFSDescribeFeatureType","setData","featureType","a","wfsOpts","version","exceptions","typeName","WfsFeatureGrid","featureTypes","featurePrefix","newColumnDefs","jsonFeatTypes","featType","buildColumnDefsFromWfsDescribeFeatureTypes","wrap","SearchMenuBar","ZoomCenterWnd","defaultScale","curScale","setCurScale","oldCoordinate","onZoomHandler","mapProjCode","setCenter","zoomCenter","min","formatter","ZoomCenterButton","AboutWnd","AboutButton","onShowWindow","dragHandler","overviewMap","viewOpts","projection","zoom","osmLayer","OlLayerTile","OlSourceOSM","options","controls","defaultControls","attribution","extend","ScaleLine","interactions","interactionDefaults","OlView","overlays","OlMap","createDefaultMap","wmsLayers","wmsParcelLayer","ImageLayer","wmsbuildingLayer","wmsaddressLayer","wmsGroupLayer","LayerGroup","createWmsLayers","wfsLayer","createWfsLayer","featureNS","maxFeatures","OlCollection","doubleClickZoom","dragAndDrop","dragPan","keyboardPan","keyboardZoom","mouseWheelZoom","pointer","getZoom","createDefaultOverviewMap","App","minSize","maxSize","defaultSize","onDragFinished","minWidth","maxWidth","InfoOutlined","fontSize","shape","backgroundColor","primary","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.64d76868.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/react-olext_logo.dc1c73a5.svg\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../Header.css';\r\nimport app_logo from '../../../../assets/images/react-olext_logo.svg';\r\n\r\n/**\r\n * Logo to be shown in the <i>Header</i> component: \r\n * this component will be used as a child of\r\n * <i>Header</i> component.\r\n * @visibleName Header.Logo\r\n */\r\nconst Logo = ({\r\n    logo=app_logo,\r\n    style={paddingLeft:'10px', paddingBottom:'5px', paddingTop:'5px'},\r\n    alt= 'logo',\r\n    width=undefined,\r\n    height=undefined,\r\n}) => {\r\n\r\n    return (\r\n        <div className=\"rolext-header-logo\" style={style}>\r\n            <img \r\n                src={logo}\r\n                alt={alt}\r\n                width={width}\r\n                height={height}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nLogo.propTypes = {\r\n    /**\r\n     * A CSS Style to render the Logo\r\n     */\r\n    style:PropTypes.object,\r\n\r\n    /**\r\n     * The logo to be shown in the Header.\r\n     * The default is the React-Olext Logo in\r\n     * SVG format.\r\n     */\r\n    logo: PropTypes.any,\r\n\r\n    /**\r\n     * Specifies an alternate text for an image, if the image cannot be displayed\r\n     */\r\n    alt: PropTypes.string,\r\n\r\n    /**\r\n     * The height of the Logo.\r\n     */\r\n    height: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number\r\n    ]),\r\n\r\n    /**\r\n     * The width of the Logo.\r\n     */\r\n    width: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number\r\n    ]),\r\n\r\n\r\n};\r\n\r\n\r\nexport default Logo;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../../Header.css';\r\n\r\n/**\r\n * Subtitle to be shown in the <i>Header</i> component: \r\n * this component will be used as a child of\r\n * <i>&lt;Header.Title&gt;</i> component.\r\n * \r\n * @visibleName Header.Title.SubTitle\r\n */\r\nconst SubTitle = ({\r\n    style=null,\r\n    children\r\n}) => {\r\n    return (\r\n        <h1 className=\"rolext-header-title-sub\" style={style}>\r\n            {children}\r\n        </h1>\r\n    );\r\n};\r\n\r\nSubTitle.propTypes = {\r\n\r\n    /**\r\n     * A CSS Style to render the subtitle in the header title\r\n     */\r\n    style:PropTypes.object,\r\n\r\n    /**\r\n     * The children elements having the subtitle to \r\n     * be shown in the header title\r\n     */\r\n    children: PropTypes.node,\r\n\r\n};\r\n\r\nexport default SubTitle;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport MainTitle from './MainTitle/MainTitle';\r\nimport SubTitle from './SubTitle/SubTitle';\r\nimport '../Header.css';\r\n\r\n/**\r\n * Title to be shown in the <i>Header</i> component: \r\n * this component will be used as a child of\r\n * <i>Header</i> component.\r\n * @visibleName Header.Title\r\n */\r\nconst Title = ({\r\n    style=null,\r\n    children\r\n}) => {\r\n    return (\r\n        <div className=\"rolext-header-title\" style={style}>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nTitle.propTypes = {\r\n    /**\r\n     * A CSS Style to render the Title\r\n     */\r\n    style:PropTypes.object,\r\n\r\n\r\n    /**\r\n     * The child nodes of the Title component:\r\n     * &lt;Header.Title.MainTitle&gt; and &lt;Header.Title.SubTitle&gt;.\r\n     */\r\n    children: PropTypes.node.isRequired\r\n};\r\n\r\nTitle.MainTitle = MainTitle;\r\nTitle.SubTitle = SubTitle;\r\n\r\nexport default Title;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../../Header.css';\r\n\r\n\r\n/**\r\n * Main Title to be shown in the <i>Header</i> component: \r\n * this component will be used as a child of\r\n * <i>Header.Title</i> component.\r\n * \r\n * @visibleName Header.Title.MainTitle\r\n */\r\nconst MainTitle = ({\r\n    style=null,\r\n    children\r\n}) => {\r\n    return (\r\n        <h1 className=\"rolext-header-title-main\" style={style}>\r\n            {children}\r\n        </h1>\r\n    );\r\n};\r\n\r\nMainTitle.propTypes = {\r\n\r\n    /**\r\n     * A CSS Style to render the title in the header main title.\r\n     */\r\n    style:PropTypes.object,\r\n\r\n    /**\r\n     * The children elements having the main title to \r\n     * be shown in the header\r\n     */\r\n    children: PropTypes.node,\r\n\r\n\r\n};\r\n\r\nexport default MainTitle;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../Header.css';\r\n\r\n/**\r\n * The content to be shown in the header.\r\n * The content can include any element(s). But common elements\r\n * included are the current coordinate and current scale.\r\n * By default,  the elements in the Content will be placed\r\n * in the horizontal direction.\r\n * @visibleName Header.Content\r\n */\r\nconst Content = ({\r\n    style=null,\r\n    children\r\n}) => {\r\n    return (\r\n        <div className=\"rolext-header-content\" style={style}>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nContent.propTypes = {\r\n    /**\r\n     * A CSS Style to render the Content\r\n     */\r\n    style:PropTypes.object,\r\n\r\n    /**\r\n     * The children node of the Content\r\n     */\r\n    children: PropTypes.node.isRequired\r\n};\r\n\r\nexport default Content;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Logo from './Logo/Logo';\r\nimport Title from './Title/Title';\r\nimport Content from './Content/Content';\r\nimport './Header.css';\r\n\r\n/**\r\n * Header to be shown in the application.\r\n * The Header can include one or more of child elements:\r\n * <ul>\r\n *  <li>&lt;Header.Logo&gt;: Show the application Logo</li>\r\n *  <li>&lt;Header.Title&gt;: Show the application title</li>\r\n *  <li>&lt;Header.Content&gt;:Used to include any controls you want</li>\r\n * </ul>\r\n * On this documentation you can find the description of these child elements;\r\n */\r\nconst Header = ({\r\n    style=null,\r\n    children,\r\n    ...otherProps\r\n}) => {\r\n\r\n    return (\r\n        <div className=\"rolext-header-container\" style={style} {...otherProps}>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nHeader.propTypes = {\r\n    /**\r\n     * A CSS Style to render the Header\r\n     */\r\n    style:PropTypes.object,\r\n\r\n    /**\r\n     * The children nodes of the header:\r\n     * &lt;Header.Logo&gt;, &lt;Header.Title&gt;, &lt;Header.Content&gt;.\r\n     */\r\n    children: PropTypes.node.isRequired\r\n};\r\n\r\nHeader.Logo = Logo;\r\nHeader.Title = Title;\r\nHeader.Content = Content;\r\n\r\n\r\nexport default Header;","import React, {useRef, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Map} from 'ol';\r\nimport {format as olFormat} from 'ol/coordinate';\r\nimport {MousePosition as olMousePosition} from 'ol/control';\r\n\r\n\r\nconst mapCoordinateFormat = (map, fractionDigits) => {\r\n    const proj = map.getView().getProjection();\r\n    const axisOrientation = proj.getAxisOrientation();\r\n    const fmtFunc = (coord) => {\r\n        let template = '{x}, {y}';\r\n        //invert coordinate for lat/long\r\n        if(axisOrientation === 'neu') {\r\n            template = '{y}, {x}';\r\n        }\r\n        return olFormat(coord, template, fractionDigits);\r\n    }\r\n    return fmtFunc;\r\n};\r\n\r\n/**\r\n * Display Text with the current coordinate of the mouse position\r\n * in the map. If the mouse is outside the map, a empty string \r\n * will be shown.\r\n * \r\n * @visibleName Current Coordinate Text\r\n */\r\nconst CurrentCoordinateText = ({\r\n    map,\r\n    style= undefined,\r\n    className= undefined,\r\n    coordinateFormatFunc= mapCoordinateFormat(map, 2),\r\n    ...otherProps\r\n}) => {\r\n    const ref = useRef();\r\n    \r\n    useEffect(() => {\r\n        const mousePositionControl = new olMousePosition({\r\n            className: 'custom-mouse-position',\r\n            target: ref.current,\r\n            coordinateFormat: coordinateFormatFunc,\r\n            undefinedHTML: '&nbsp;'\r\n        });\r\n        map.addControl(mousePositionControl);\r\n\r\n        return () => map.removeControl(mousePositionControl);\r\n    }, [map, coordinateFormatFunc]);\r\n\r\n    return(\r\n        <span ref={ref} className={className} style={style} {...otherProps}></span>\r\n    );\r\n\r\n};\r\n\r\nCurrentCoordinateText.propTypes = {\r\n    /**\r\n     * The OpenLayers ol/Map from where the coordinate will be \r\n     * retrieved.\r\n     */\r\n    map: PropTypes.instanceOf(Map).isRequired,\r\n\r\n    /**\r\n     * A CSS Style to render the Text\r\n     */\r\n    style:PropTypes.object,\r\n\r\n    /**\r\n     * The CSS class name for this component.\r\n     */\r\n    className: PropTypes.string,\r\n\r\n    /**\r\n     * A function that takes a ol/coordinate/Coordinate and \r\n     * transforms it into a {string}.\r\n     * <p>The default function will format the string in <i>\"x, y\"</i>\r\n     * with 2 decimal digits. If the map is in lat/long, the returned\r\n     * string will be <i>\"y, x\"</i>.</p>\r\n     */\r\n    coordinateFormatFunc:PropTypes.func \r\n\r\n}\r\n\r\nexport default CurrentCoordinateText;","import React, {useState, useCallback, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Map} from 'ol';\r\nimport {METERS_PER_UNIT} from 'ol/proj';\r\n\r\n/**\r\n * \r\n * Display the Text with the current scale of the map.\r\n * The scale of the map is changed once the zoom of the map\r\n * is changed.\r\n * @visibleName Current Scale Text\r\n */\r\nconst CurrentScaleText = ({\r\n    map,\r\n    style = undefined,\r\n    className = undefined,\r\n    ...otherProps\r\n}) => {\r\n\r\n    const [scale, setScale] = useState(null);\r\n\r\n    /**\r\n     * Event handler to calculate the scale every time the scale\r\n     * of the map is changed.\r\n     */\r\n    const scaleHandler = useCallback((evt) => {\r\n        if(!evt) return;\r\n        const resolution = evt.target.get('resolution');\r\n\t\tconst units = map.getView().getProjection().getUnits();\r\n\t\tconst dpi = 25.4 / 0.28;\r\n        const mpu = METERS_PER_UNIT[units];\r\n        let newScale = resolution * mpu * 39.37 * dpi\r\n\t\tif (newScale >= 9500 && newScale <= 950000) {\r\n\t\t    newScale = Math.round(newScale / 1000) + \"K\";\r\n\t\t} else if (newScale >= 950000) {\r\n\t\t    newScale = Math.round(newScale / 1000000) + \"M\";\r\n\t\t} else {\r\n\t\t\tnewScale = Math.round(newScale);\r\n        }\r\n        setScale(newScale);\r\n    },[map]);\r\n\r\n    /**\r\n     * Register/Unregister 'change:resolution' event handler\r\n     */\r\n    useEffect(() => {\r\n        map.getView().on('change:resolution', scaleHandler);\r\n        return () => map.getView().un('change:resolution', scaleHandler)\r\n    }, [map, scaleHandler]);\r\n\r\n    return(\r\n        <span style={style} className={className} {...otherProps}>{scale}</span>\r\n    );\r\n\r\n};\r\n\r\nCurrentScaleText.propTypes = {\r\n    /**\r\n     * The OpenLayers ol/Map from where the scale will be \r\n     * retrieved.\r\n     */\r\n    map: PropTypes.instanceOf(Map).isRequired,\r\n\r\n    /**\r\n     * A CSS Style to render the scale Text\r\n     */\r\n    style:PropTypes.object,\r\n\r\n    /**\r\n     * The CSS class name for this component.\r\n     */\r\n    className: PropTypes.string,\r\n\r\n\r\n}\r\n\r\nexport default CurrentScaleText;","import PropTypes from 'prop-types';\r\nimport {Map as olMap} from 'ol';\r\nimport Header from '../Header/Header';\r\nimport app_logo from '../../../assets/images/react-olext_logo.svg';\r\nimport CurrentCoordinateText from '../../text/coordinate/CurrentCoordinateText/CurrentCoordinateText';\r\nimport CurrentScaleText from '../../text/scale/CurrentScaleText/CurrentScaleText';\r\n\r\n/**\r\n * <p>\r\n *  A simple Header for the application with a logo, title, subtitle, \r\n *  current coordinate and current scale\r\n * </p>\r\n * <p>\r\n *  To build a custom header, check the <i>Header</i> component.\r\n * </p>\r\n *\r\n */\r\nconst SimpleHeader = ({\r\n    map,\r\n    style,\r\n    logo = app_logo,\r\n    mainTitle = 'React-Olext',\r\n    subTitle='Components for OpenLayers',\r\n    ...otherProps\r\n}) => {\r\n\r\n    return(\r\n        <Header style={style} {...otherProps}>\r\n        <Header.Logo logo={logo}/>\r\n        <Header.Title>\r\n            <Header.Title.MainTitle>{mainTitle}</Header.Title.MainTitle>\r\n            <Header.Title.SubTitle>{subTitle}</Header.Title.SubTitle>\r\n        </Header.Title>\r\n        <Header.Content>\r\n            <div>Pos:</div>\r\n            <CurrentCoordinateText map={map} style={{color:\"white\", width:\"160px\"}}/>\r\n            <div>Scale: 1/</div>\r\n            <CurrentScaleText map={map} style={{color:\"white\", width:\"100px\"}}/>\r\n        </Header.Content>\r\n    </Header>\r\n    );\r\n};\r\n\r\nSimpleHeader.propTypes = {\r\n\r\n    /**\r\n     * The OpenLayers ol/Map\r\n     */\r\n    map: PropTypes.instanceOf(olMap).isRequired,\r\n\r\n    /**\r\n     * The logo to be shown in the Header.\r\n     * The default is the React-Olext Logo in\r\n     * SVG format.\r\n     */\r\n    logo: PropTypes.any,\r\n\r\n    /**\r\n     * A CSS Style to render the Header\r\n     */\r\n    style:PropTypes.object,\r\n\r\n    /**\r\n     * The main title to be shown in the Header\r\n     */\r\n    mainTitle: PropTypes.node,\r\n\r\n    /**\r\n     * The subtitle to be shown in the Header\r\n     */\r\n    subTitle: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.element\r\n    ])\r\n\r\n};\r\n\r\nexport default SimpleHeader;","import React, { useRef, useEffect } from 'react';\r\nimport { Map as olMap } from 'ol';\r\nimport PropTypes from 'prop-types';\r\nimport Controls from '../../../control/map/Controls/Controls';\r\n\r\n/**\r\n * The Map Widget representing the OpenLayers Map.\r\n * \r\n * @visibleName Map\r\n */\r\nconst MapWidget = ({ map, height = \"100%\", width = \"100%\", children }) => {\r\n    const mapRef = useRef();\r\n\r\n    useEffect(() => {\r\n        map.setTarget(mapRef.current);\r\n        return () => map.setTarget(undefined);\r\n\r\n    }, [map]);\r\n\r\n    return (<div ref={mapRef}\r\n        style={{ height: height, width: width }}\r\n    >\r\n        {children}\r\n    </div>\r\n    );\r\n\r\n};\r\n\r\nMapWidget.propTypes = {\r\n    /**\r\n     * The OpenLayers ol/Map\r\n     */\r\n    map: PropTypes.instanceOf(olMap).isRequired,\r\n    /**\r\n     * The height of the map.\r\n     */\r\n    height: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number\r\n    ]),\r\n    /**\r\n     * The width of the map.\r\n     */\r\n    width: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number\r\n    ]),\r\n};\r\n\r\nMapWidget.Controls = Controls;\r\n\r\nexport default MapWidget;","\r\nconst Controls = ({\r\n    map,\r\n    children\r\n}) => {\r\n    return (\r\n        <div>{children}</div>\r\n    );\r\n};\r\n\r\nexport default Controls;\r\n\r\n","import React, {useState, useRef, useEffect, useCallback} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Map as olMap,Feature as olFeature, Collection as olCollection} from 'ol';\r\nimport {Vector as olVectorLayer} from 'ol/layer';\r\nimport {Style as olStyle} from 'ol/style';\r\nimport {Vector as olVectorSource} from 'ol/source'\r\nimport {equivalent as olProjEquivalent, transform as olProjTransform} from 'ol/proj';\r\nimport {transformExtent as olProjTransformExtent} from 'ol/proj';\r\nimport {Point as olGeomPoint, Polygon as olGeomPolygon} from 'ol/geom'\r\nimport {Translate as olInteractionTranslate} from 'ol/interaction';\r\nimport {getCenter as olExtentGetCenter} from 'ol/extent';\r\n\r\n/**\r\n * <p>The Overview Map Control.</p>\r\n * <p>\r\n * \tThis control has a view in a large area of the map,\r\n * \tallowing a better map navigation,\r\n * \tThe box present in the overview map represents the area of the parent view.\r\n * \tThis control has the following properties:\r\n * </p>\r\n * <ol>\r\n * <li>If the user pan the overview map, the parent map will also be re-centered accordinlgy.</li>\r\n * <li>If the user pan the parent the map, the overview map will be re-centered accordingly.</li>\r\n * <li>If the user click a point in the overview map:\r\n *      <ul>\r\n *          <li>The overview map will be re-centered in the clicked point</li>\r\n *          <li>The parent map will be re-centered accordingly</li>\r\n *      </ul>\r\n * </li>\r\n * </ol>\r\n * \r\n * @visibleName Map Overview\r\n */\r\nconst MapOverviewWidget = (\r\n    {\r\n        map,\r\n        parentMap,\r\n        anchorStyle = null,\r\n        boxStyle = null,\r\n        magnification = 5,\r\n        height=\"100%\", \r\n        width=\"100%\"\r\n    }) => {\r\n    //const parentMap = useContext(MapContext).map;\r\n    const childMapRef = useRef();\r\n    const childMap = useState(map)[0];\r\n    const boxFeature = useState(new olFeature())[0];\r\n    const anchorFeature = useState(new olFeature())[0];\r\n    const extentLayer = useState(new olVectorLayer({\r\n        source: new olVectorSource()\r\n    }))[0];\r\n    const [dragInteraction, setDragInteraction] = useState(null);\r\n\r\n\r\n    /**\r\n     * Set an OverviewMap property (center or resolution).\r\n     * \r\n     * @param {String} key The name of the property, either 'center' or 'resolution'\r\n     */\r\n    const setOverviewMapProperty = useCallback((key) => {\r\n        if(! childMap) return;\r\n        const parentView = parentMap.getView();\r\n        const parentProjection = parentView.getProjection();\r\n        const overviewView = childMap.getView();\r\n        const overviewProjection = overviewView.getProjection();\r\n        let overviewCenter = parentView.getCenter();\r\n\r\n        if (key === 'center') {\r\n            // transform if necessary\r\n            if (!olProjEquivalent(parentProjection, overviewProjection)) {\r\n                overviewCenter = olProjTransform(overviewCenter,\r\n                    parentProjection, overviewProjection);\r\n            }\r\n            overviewView.set('center', overviewCenter);\r\n        }\r\n        if (key === 'resolution') {\r\n            if (olProjEquivalent(parentProjection, overviewProjection)) {\r\n                overviewView.set('resolution',\r\n                    magnification * parentView.getResolution());\r\n            } else {\r\n                const parentExtent = parentView.calculateExtent(\r\n                    parentMap.getSize());\r\n                const parentExtentProjected = olProjTransformExtent(\r\n                    parentExtent, parentProjection, overviewProjection);\r\n                overviewView.fit(\r\n                    parentExtentProjected,\r\n                    {constrainResolution: false}\r\n                );\r\n               \r\n                overviewView.set(\r\n                    'resolution',\r\n                    magnification() * overviewView.getResolution()\r\n                );\r\n            }\r\n            // Do nothing when parent and overview projections are not\r\n            // equivalent as me.getMap().getSize()\r\n            // would not be reliable here.\r\n        }\r\n    }, [childMap, parentMap, magnification]);\r\n   \r\n    /**\r\n     * Called when a property of the parent map view Changes\r\n     */\r\n    const onParentViewPropChange =  useCallback((evt) => {\r\n        if (evt.key === 'center' || evt.key === 'resolution') {\r\n            setOverviewMapProperty(evt.key);\r\n        }\r\n    }, [setOverviewMapProperty]);\r\n\r\n\r\n    const updateBox = useCallback(() => {\r\n        if(! childMap) return;\r\n        const extentGeometries = getVisibleExtentGeometries(parentMap);\r\n        if (!extentGeometries) {\r\n            return;\r\n        }\r\n        const geom = extentGeometries.extent;\r\n        const anchor = extentGeometries.topLeft;\r\n\r\n        const parentMapProjection = parentMap.getView().getProjection();\r\n        const overviewProjection = childMap.getView().getProjection();\r\n\r\n        // transform if necessary\r\n        if (!olProjEquivalent(parentMapProjection, overviewProjection)) {\r\n            geom.transform(parentMapProjection, overviewProjection);\r\n            anchor.transform(parentMapProjection, overviewProjection);\r\n        }\r\n\r\n        boxFeature.setGeometry(geom);\r\n        anchorFeature.setGeometry(anchor);\r\n    }, [childMap, parentMap, boxFeature, anchorFeature]);\r\n\r\n    /**\r\n     * Enables the update of the box by biding the updateBox function\r\n     * to the postrender event of the parent map\r\n     */\r\n    const enableBoxUpdate = useCallback(() => {\r\n        if (parentMap) {\r\n            parentMap.on('postrender', updateBox);\r\n        }\r\n    }, [parentMap, updateBox]);\r\n\r\n    const disableBoxUpdate = useCallback(() => {\r\n        if (parentMap) {\r\n            parentMap.un('postrender', updateBox);\r\n        }\r\n    }, [parentMap, updateBox]);\r\n\r\n    /**\r\n     * Repositions the #anchorFeature during dragging sequences of the box.\r\n     * Called while the #boxFeature is being dragged.\r\n     */\r\n    const repositionAnchorFeature = useCallback(() => {\r\n        const boxCoords = boxFeature.getGeometry().getCoordinates();\r\n        const topLeftCoord = boxCoords[0][0];\r\n        const newAnchorGeom = new olGeomPoint(topLeftCoord);\r\n        anchorFeature.setGeometry(newAnchorGeom);\r\n    }, [anchorFeature, boxFeature]);\r\n\r\n    /**\r\n     * Recenters the #parentMap to the center of the extent of the #boxFeature.\r\n     * Called when dragging of the #boxFeature ends.\r\n     */\r\n    const recenterParentFromBox = useCallback(() => {\r\n        if(! childMap) return;\r\n        const parentView = parentMap.getView();\r\n        const parentProjection = parentView.getProjection();\r\n\r\n        const overviewView = childMap.getView();\r\n        const overviewProjection = overviewView.getProjection();\r\n\r\n        //const currentMapCenter = parentView.getCenter();\r\n        const boxExtent = boxFeature.getGeometry().getExtent();\r\n        let boxCenter = olExtentGetCenter(boxExtent);\r\n\r\n        // transform if necessary\r\n        if (!olProjEquivalent(parentProjection, overviewProjection)) {\r\n            boxCenter = olProjTransform(boxCenter, overviewProjection,\r\n                parentProjection);\r\n        }\r\n\r\n        parentView.animate({\r\n            center: boxCenter\r\n        });\r\n        \r\n\r\n    }, [parentMap, childMap, boxFeature]);\r\n\r\n    /**\r\n     * Enable everything we need to be able to drag the extent box on the\r\n     * overview map, and to properly handle drag events (e.g. recenter on\r\n     * finished dragging).\r\n     */\r\n    const setupDragBehaviour = useCallback(() => {\r\n        if(! childMap) return;\r\n        if(!dragInteraction) {\r\n            const newDragInteraction = new olInteractionTranslate({\r\n                features: new olCollection([boxFeature])\r\n            });\r\n            childMap.addInteraction(newDragInteraction);\r\n            newDragInteraction.setActive(true);\r\n            // disable the box update during the translation\r\n            // because it interferes when dragging the feature\r\n            newDragInteraction.on('translatestart', disableBoxUpdate);\r\n            newDragInteraction.on('translating', repositionAnchorFeature);\r\n            newDragInteraction.on('translateend', recenterParentFromBox);\r\n            newDragInteraction.on('translateend', enableBoxUpdate);\r\n            setDragInteraction(newDragInteraction);\r\n        }\r\n    }, [boxFeature, childMap, enableBoxUpdate, dragInteraction,\r\n        disableBoxUpdate, repositionAnchorFeature, recenterParentFromBox\r\n    ]);\r\n\r\n    /**\r\n     * Disable / destroy everything we need to be able to drag the extent box on\r\n     * the overview map. Unregisters any events we might have added and removes\r\n     * the `ol.interaction.Translate`.\r\n     */\r\n    const destroyDragBehaviour = useCallback(() => {\r\n        if(! childMap) return;\r\n        if (!dragInteraction) {\r\n            return;\r\n        }\r\n        dragInteraction.setActive(false);\r\n        childMap.removeInteraction(dragInteraction);\r\n        dragInteraction.un('translatestart', disableBoxUpdate);\r\n        dragInteraction.un('translating', repositionAnchorFeature);\r\n        dragInteraction.un('translateend', recenterParentFromBox);\r\n        dragInteraction.un('translateend', enableBoxUpdate);\r\n        setDragInteraction(null);\r\n    }, [\r\n        dragInteraction, childMap, disableBoxUpdate, repositionAnchorFeature,\r\n        recenterParentFromBox, enableBoxUpdate\r\n    ]);\r\n\r\n    /**\r\n     * Handler for the click event of the overview map. Recenters the parent\r\n     * map to the clicked location.\r\n     *\r\n     * @param {ol.MapBrowserEvent} evt The click event on the map.\r\n     * @private\r\n     */\r\n    const overviewMapClicked = useCallback((evt) => {\r\n        if(! childMap) return;\r\n        const parentView = parentMap.getView();\r\n        const parentProjection = parentView.getProjection();\r\n        //const currentMapCenter = parentView.getCenter();\r\n        const overviewView = childMap.getView();\r\n        const overviewProjection = overviewView.getProjection();\r\n        let newCenter = evt.coordinate;\r\n\r\n        // transform if necessary\r\n        if (!olProjEquivalent(parentProjection, overviewProjection)) {\r\n            newCenter = olProjTransform(newCenter,\r\n                overviewProjection, parentProjection);\r\n        }\r\n\r\n        parentView.animate({\r\n            center: newCenter\r\n        });\r\n    }, [childMap, parentMap]);\r\n\r\n\r\n    /**\r\n     * Handler to update center/zoom of the overview map if the size of\r\n     * the window is changed.\r\n     */\r\n    const resizeWindowHandler = useCallback((e) => {\r\n        if(! childMap) return;\r\n        childMap.updateSize();\r\n        setOverviewMapProperty('resolution');\r\n        setOverviewMapProperty('center');\r\n    }, [setOverviewMapProperty, childMap]);\r\n\r\n\r\n    /**\r\n     * Initialize the child overview map\r\n     */\r\n    useEffect(() => {\r\n        if(! childMap) return;\r\n        childMap.addLayer(extentLayer);\r\n        childMap.setTarget(childMapRef.current);\r\n        setOverviewMapProperty('resolution');\r\n        window.addEventListener(\"resize\", resizeWindowHandler)\r\n\r\n        return () => {\r\n            if(childMap) {\r\n                childMap.removeLayer(extentLayer);\r\n                childMap.setTarget(undefined);\r\n                window.removeEventListener(\"resize\", resizeWindowHandler);\r\n            }\r\n        }\r\n\r\n    }, [childMap, extentLayer, setOverviewMapProperty, resizeWindowHandler]);\r\n\r\n    /**\r\n     * Set Event Handler to change the center or resolution of the child overview map\r\n     * if the center or resolution in parent map changes\r\n     */\r\n    useEffect(() => {\r\n        parentMap.getView().on('propertychange', onParentViewPropChange);\r\n\r\n        return () => {\r\n            parentMap.getView().un('propertychange', onParentViewPropChange);\r\n        }\r\n\r\n    }, [parentMap, onParentViewPropChange]);\r\n\r\n    /**\r\n     * Set 'postrender' event handler update the box/anchor in the child overview map \r\n     * after rendering a new frame of the parent map\r\n     */\r\n    useEffect(() => {\r\n        enableBoxUpdate();\r\n        //return cleanup function\r\n        return () => disableBoxUpdate();\r\n\r\n    }, [enableBoxUpdate, disableBoxUpdate]);\r\n\r\n    /**\r\n     * Initially set the center and resolution of the overview map\r\n     */\r\n    useEffect(() => {\r\n        setOverviewMapProperty('center');\r\n        setOverviewMapProperty('resolution');\r\n\r\n    }, [setOverviewMapProperty]);\r\n\r\n    /**\r\n     * Add the box and anchor features into the extent layer of the \r\n     * child overview map\r\n     */\r\n    useEffect(() => {\r\n        extentLayer.getSource().addFeatures([\r\n            boxFeature,\r\n            anchorFeature\r\n        ]);\r\n        if(anchorStyle) {\r\n            anchorFeature.setStyle(anchorStyle);\r\n        }\r\n        if(boxStyle) {\r\n            boxFeature.setStyle(boxStyle);\r\n        }\r\n    }, [extentLayer, anchorFeature, boxFeature, boxStyle, anchorStyle]);\r\n\r\n    /**\r\n     * Enable everything we need to be able to drag the extent box on the\r\n     * overview map, and to properly handle drag events (e.g. recenter on\r\n     * finished dragging).\r\n     */\r\n    useEffect(() => {\r\n        setupDragBehaviour();\r\n\r\n        return () => destroyDragBehaviour();\r\n\r\n    }, [setupDragBehaviour, destroyDragBehaviour]);\r\n\r\n    /**\r\n     * Set the event handler to recenter the overview map if the user clicks on it\r\n     */\r\n    useEffect(() => {\r\n        if(! childMap) return;\r\n        childMap.on('click', overviewMapClicked);\r\n        \r\n        return () => childMap.un('click', overviewMapClicked);\r\n    }, [childMap, overviewMapClicked]);\r\n\r\n    return(\r\n        <div ref={childMapRef} style={{height: height, width: width}}></div>\r\n    );\r\n\r\n};\r\n\r\nconst getVisibleExtentGeometries = (map) => {\r\n    const mapSize = map && map.getSize();\r\n    const w = mapSize && mapSize[0];\r\n    const h = mapSize && mapSize[1];\r\n    if (!mapSize || isNaN(w) || isNaN(h)) {\r\n        return;\r\n    }\r\n    const pixels = [\r\n        [0, 0], [w, 0], [w, h], [0, h], [0, 0]\r\n    ];\r\n    const extentCoords = [];\r\n    pixels.forEach((pixel) => {\r\n        const coord = map.getCoordinateFromPixel(pixel);\r\n        if (coord === null) {\r\n            return false;\r\n        }\r\n        extentCoords.push(coord);\r\n    });\r\n    if (extentCoords.length !== 5) {\r\n        return;\r\n    }\r\n    var geom = new olGeomPolygon([extentCoords]);\r\n    var anchor = new olGeomPoint(extentCoords[0]);\r\n    return {\r\n        extent: geom,\r\n        topLeft: anchor\r\n    };\r\n};\r\n\r\nMapOverviewWidget.propTypes = {\r\n    /**\r\n     * The OpenLayers ol/Map\r\n     */\r\n    map: PropTypes.instanceOf(olMap).isRequired,\r\n    /**\r\n     * The height of the map.\r\n     */\r\n    height: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number\r\n    ]),\r\n    /**\r\n     * The width of the map.\r\n     */\r\n    width: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number\r\n    ]),\r\n\r\n    /**\r\n     * The ol/style/Style for the anchor feature which indicates the upper-left\r\n     * corner of the overview rectangle.\r\n     */\r\n    anchorStyle: PropTypes.instanceOf(olStyle),\r\n\r\n    /**\r\n     * The ol/style/Style for the overview rectangle.\r\n     */\r\n    boxStyle: PropTypes.instanceOf(olStyle),\r\n\r\n    /**\r\n     * The magnification of the overview map.\r\n     * The maginification represent how many times\r\n     * the scale of the parent map is bigger than the\r\n     * the scale of the overview map.\r\n     */\r\n    magnification: PropTypes.number\r\n};\r\n\r\n\r\n\r\nexport default MapOverviewWidget;\r\n","import SplitPane from 'react-split-pane';\r\nimport './BorderLayout.css';\r\n\r\n\r\nconst BorderLayout = (props) => {\r\n    return <SplitPane {...props}>{props.children}</SplitPane>\r\n};\r\n\r\nexport default BorderLayout;","import {Collection as OlCollection, Map as OlMap, View as OlView} from \"ol\";\r\nimport VectorSource from 'ol/source/Vector';\r\nimport {ScaleLine, defaults as defaultControls} from 'ol/control';\r\nimport {defaults as interactionDefaults}  from 'ol/interaction';\r\nimport OlLayerTile from \"ol/layer/Tile\";\r\nimport {OSM as OlSourceOSM}  from \"ol/source\";\r\nimport OlLayerGroup from 'ol/layer/Group';\r\nimport OlSourceTileWMS from 'ol/source/TileWMS';\r\nimport {createStringXY} from 'ol/coordinate';\r\nimport {transform} from 'ol/proj';\r\nimport { fromLonLat } from 'ol/proj';\r\nimport {METERS_PER_UNIT as OlProjMETERS_PER_UNIT} from 'ol/proj';\r\nimport proj4 from 'proj4';\r\nimport {register} from 'ol/proj/proj4';\r\nimport {get as getProjection} from 'ol/proj/projections';\r\n\r\nvar projObj = {\r\n  'code': '31370', \r\n  'name': 'Belge 1972 / Belgian Lambert 72',\r\n  'proj4': \"+proj=lcc +lat_1=51.16666723333333 +lat_2=49.8333339 +lat_0=90 +lon_0=4.367486666666666 +x_0=150000.013 +y_0=5400088.438 +ellps=intl +towgs84=-106.869,52.2978,-103.724,0.3366,-0.457,1.8422,-1.2747 +units=m +no_defs\",\r\n  'bbox': [51.51, 2.5, 49.5, 6.4]\r\n};\r\nproj4.defs('EPSG:31370', projObj['proj4']);\r\nregister(proj4);\r\nconst proj31370 = getProjection('EPSG:31370');\r\n\r\nexport function registerProjection(projectionCode, proj4Definition) {\r\n  let projection = getProjection(projectionCode);\r\n  if(!projection) {\r\n      proj4.defs(projectionCode, proj4Definition);\r\n      register(proj4);\r\n      projection = getProjection(projectionCode)\r\n  }\r\n  return projection;\r\n}\r\n\r\nexport function createDefaultMap(viewOpts={\r\n  projection: 'EPSG:31370',\r\n  center: [170000, 135000],\r\n\tzoom: 9\r\n  \r\n})\r\n {\r\n     //create osm layer\r\n     const osmLayer = new OlLayerTile({\r\n        name: 'OSM',\r\n        source: new OlSourceOSM(),\r\n        zIndex: 0,\r\n    });\r\n\r\n\r\n    //create a default map\r\n    const options = {\r\n        controls: defaultControls({attribution: false}).extend(\r\n        [\r\n            //mousePositionControl, \r\n            new ScaleLine({units: 'metric'})\r\n        ]),\r\n        interactions: interactionDefaults({\r\n            constrainResolution: false, \r\n        }),\r\n        view: new OlView(viewOpts),\r\n        layers: [osmLayer],\r\n        overlays: []\r\n    };\r\n    \r\n    return (new OlMap(options));\r\n}\r\n\r\n\r\nexport function createExampleMap() {\r\n    const layerGroup = new OlLayerGroup({\r\n        name: 'Layergroup',\r\n        layers: [\r\n          new OlLayerTile({\r\n            name: 'OSM-Overlay-WMS',\r\n            minResolution: 0,\r\n            maxResolution: 200,\r\n            source: new OlSourceTileWMS({\r\n              url: 'https://ows.terrestris.de/osm/service',\r\n              params: {\r\n                'LAYERS': 'OSM-Overlay-WMS'\r\n              }\r\n            })\r\n          }),\r\n          new OlLayerTile({\r\n            name: 'SRTM30-Contour',\r\n            minResolution: 0,\r\n            maxResolution: 10,\r\n            source: new OlSourceTileWMS({\r\n              url: 'https://ows.terrestris.de/osm/service',\r\n              params: {\r\n                'LAYERS': 'SRTM30-Contour'\r\n              }\r\n            })\r\n          })\r\n        ]\r\n    });\r\n  \r\n    const map = new OlMap({\r\n        layers: [\r\n            new OlLayerTile({\r\n            name: 'OSM',\r\n            source: new OlSourceOSM()\r\n            }),\r\n            layerGroup\r\n        ],\r\n        view: new OlView({\r\n            center: fromLonLat([12.924, 47.551]),\r\n            zoom: 13\r\n        })\r\n    });\r\n\r\n    return map;\r\n}\r\n\r\n\r\n/**\r\n * Create a default overview map having a osm layer\r\n * based on the parent map configuration\r\n * \r\n * @param {ol.Map} parentMap The parent map\r\n * @param {Array} layers A collection of layers to be added in the overview map. If null, \r\n *                   a osm layer will be added\r\n */\r\nexport function createDefaultOverviewMap(parentMap, layers = null) {\r\n    const parentView = parentMap.getView();\r\n    if(!layers) {\r\n        //create osm layer\r\n        const osmLayer = new OlLayerTile({\r\n            source: new OlSourceOSM(),\r\n            zIndex: 0,\r\n        });\r\n        layers = [osmLayer];\r\n    }\r\n\r\n    //create overview map\r\n    const overviewMap = new OlMap({\r\n        controls: new OlCollection(),\r\n        //interactions: new OlCollection(),\r\n        interactions: interactionDefaults({\r\n            constrainResolution: false, \r\n            doubleClickZoom: false,\r\n            dragAndDrop: false,\r\n            dragPan: false,\r\n            keyboardPan: false,\r\n            keyboardZoom: false,\r\n            mouseWheelZoom: false,\r\n            pointer: false,\r\n            select: false\r\n        }),\r\n        view: new OlView({\r\n            center: parentView.getCenter(),\r\n            zoom: parentView.getZoom(),\r\n            projection: parentView.getProjection()\r\n        })\r\n    });\r\n    //add layers\r\n    layers.forEach((layer) => {\r\n        overviewMap.addLayer(layer);\r\n    });\r\n    \r\n    return overviewMap;\r\n}\r\n\r\n/**\r\n * Returns all layers of a collection. Even the hidden ones.\r\n *\r\n * @param {ol.Map|ol.layer.Group} collection The collection to get the layers\r\n *                                           from. This can be an ol.layer.Group\r\n *                                           or an ol.Map.\r\n * @param {Function} [filter] A filter function that receives the layer.\r\n *                            If it returns true it will be included in the\r\n *                            returned layers.\r\n * @return {Array} An array of all Layers.\r\n */\r\nexport function getAllLayers(collection, filter = (() => true)) {\r\n    \r\n    var layers = collection.getLayers().getArray();\r\n    var allLayers = [];\r\n\r\n    layers.forEach(function(layer) {\r\n        if (layer instanceof OlLayerGroup) {\r\n            getAllLayers(layer).forEach((layeri) => {\r\n                if (filter(layeri)) {\r\n                    allLayers.push(layeri);\r\n                }\r\n            });\r\n        }\r\n        if (filter(layer)) {\r\n        allLayers.push(layer);\r\n        }\r\n    });\r\n    return allLayers;\r\n}\r\n\r\n/**\r\n * Get a layer by its key (ol_uid).\r\n * \r\n * @param {ol.map} map \r\n * @param {string} ol_uid The UID for the layer as string\r\n * @return {ol.layer.Layer} The layer found\r\n */\r\nexport const getLayerByOlUid = (map, ol_uid) => {\r\n    const layers = getAllLayers(map);\r\n    const layer = layers.find((l) => {\r\n      return ol_uid === l.ol_uid.toString();\r\n    });\r\n    return layer;\r\n}\r\n\r\n\r\n/**\r\n * Get information about the layer position in the tree.\r\n * \r\n * @param {ol.layer.Layer} layer The layer to get the information\r\n * @param {ol.layer.Group | ol.Map} groupLayerOrMap The group layer or map\r\n *                                                  containing the information\r\n * @return {Object} An object with the keys:\r\n *      {ol.layer.Group} groupLayer The group Layer containing the layer\r\n *      {Integer} position The position of the layer in the collection\r\n */\r\nexport const getLayerPositionInfo = (layer, groupLayerOrMap) => {\r\n    const groupLayer = groupLayerOrMap instanceof OlLayerGroup\r\n      ? groupLayerOrMap\r\n      : groupLayerOrMap.getLayerGroup();\r\n    const layers = groupLayer.getLayers().getArray();\r\n    //let info = {};\r\n    let info = {position: layers.length - 1, groupLayer: groupLayer};\r\n\r\n    if (layers.indexOf(layer) < 0) {\r\n      layers.forEach((childLayer) => {\r\n        if (childLayer instanceof OlLayerGroup /*&& !info.groupLayer*/) {\r\n          info = getLayerPositionInfo(layer, childLayer);\r\n        }\r\n      });\r\n    } else {\r\n      info.position = layers.indexOf(layer);\r\n      info.groupLayer = groupLayer;\r\n    }\r\n    return info;\r\n};\r\n\r\n/**\r\n * Calculates the resolution based on the scale.\r\n * \r\n * @param {ol.Map} map The map on which the resolution will be calculated\r\n * @param {number} scale The scale to calculate the resolution\r\n * @return {number} The calculated resolution\r\n */\r\nexport const getResolutionFromScale = (map, scale) => {\r\n  const units = map.getView().getProjection().getUnits();\r\n  const dpi = 25.4 / 0.28;\r\n  const mpu = OlProjMETERS_PER_UNIT[units];\r\n  const resolution = scale/(mpu * 39.37 * dpi);\r\n  return resolution;\r\n};\r\n\r\n/**\r\n * Calculates the scale based on the resolution.\r\n * \r\n * @param {ol.Map} map  The map on which the scale will be calculated\r\n * @param {number} resolution The resolution to calculate the scale.\r\n * @return {number} The calculated scale.\r\n */\r\nexport const getScaleFromResolution = (map, resolution) => {\r\n  const units = map.getView().getProjection().getUnits();\r\n  const dpi = 25.4 / 0.28;\r\n  const mpu = OlProjMETERS_PER_UNIT[units];\r\n  const scale = resolution * (mpu * 39.37 * dpi);\r\n  return scale;\r\n};\r\n\r\n/**\r\n * Zoom the map based on the provided extent.\r\n * \r\n * @param {ol.Map} map The map where the zoom will be performed\r\n * @param {ol.extent.Extent} extent The extent to be zoomed\r\n */\r\nexport const zoomToExtent = (map, extent) => {\r\n\tif(extent === null || extent === undefined || extent[0] === Infinity) {\r\n    alert('No Coordinates');\r\n\t\treturn;\r\n\t}\r\n\tmap.getView().fit(extent, map.getSize());\r\n\t//Change scale if less than 1/500\r\n\tconst scale = getScaleFromResolution(map, map.getView().getResolution());\r\n\tif(scale < 500) {\r\n\t\tconst resolution = getResolutionFromScale(map, 500);\r\n\t\tmap.getView().setResolution(resolution);\r\n\t}\r\n};\r\n\r\n/**\r\n * Zoom the map based on the input scale and center coordinate\r\n * \r\n * @param {ol/Map} map The map on where the zoom will be performed\r\n * @param {number} scale The scale\r\n * @param {number} x The x coordinate for the center\r\n * @param {number} y The y coordinate for the center\r\n */\r\nexport const zoomCenter = (map, scale, x, y) => {\r\n\tconst resolution = getResolutionFromScale(map, scale);\r\n\tmap.getView().setCenter([x, y]);\r\n\tmap.getView().setResolution(resolution);\r\n};\r\n\r\n\r\n\r\n/**\r\n * Zoom the map based on the layer extent.\r\n * \r\n * @param {ol.Map} map The map to be zoomed\r\n * @param {ol.layer.Base} layer The layer\r\n */\r\nexport const zoomToLayer = (map, layer) => {\r\n  if(layer.getSource().getFeatures().length > 0 ) {\r\n\t\tconst extent = layer.getSource().getExtent();\r\n\t\tzoomToExtent(map, extent);\r\n\t}\r\n};\r\n\r\n/**\r\n * Zoom the map based on the features extent.\r\n * \r\n * @param {ol.Map} map The map to be zoomed\r\n * @param {ol.Feature[]} features The array of features \r\n */\r\nexport const ZoomToFeatures = (map, features) => {\r\n  if(features.length > 0) {\r\n    const newSource = new VectorSource();\r\n    newSource.addFeatures(features);\r\n    const extent = newSource.getExtent();\r\n    zoomToExtent(map, extent);\r\n  }\r\n};\r\n\r\n/**\r\n * Method to retrieve all the leaf layers from\r\n * the input array of layers.\r\n * \r\n * @param {[ol.layer.Base]} lyrs Collection of layers\r\n *  to extract leaf layers from\r\n */\r\nexport const getLeafVisibleLayers = (lyrs) => {\r\n\tlet  leafLyrs = [];\r\n\tlyrs.forEach(function(lyr) {\r\n\t\tif(lyr instanceof OlLayerGroup) {\r\n\t\t\tleafLyrs = leafLyrs.concat(getLeafVisibleLayers(lyr.getLayers()));\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif(lyr.get('visible')) {\r\n\t\t\t\tleafLyrs.push(lyr);\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\treturn leafLyrs;\r\n}\r\n\r\n/**\r\n * Utility Method to convert to string the coordinate.\r\n * @param {*} srcCoordinate The source coordinate\r\n * @param {*} srcProjCode The source projection code\r\n * @param {*} destProjCode The destination projection code\r\n * @return {[number, number]} The calculated destination coordinate.\r\n */\r\nexport const coordinateToString = (srcCoordinate, srcProjCode, destProjCode) => {\r\n  const stringifyFunc = createStringXY(8);\r\n  const destCoordinate = transform(srcCoordinate, srcProjCode, destProjCode);\r\n  //retrieve destinatin projection/axisOrientation\r\n  const destProj = getProjection(destProjCode);\r\n  const destAxisOrientation = destProj.getAxisOrientation();\r\n\r\n  if(destAxisOrientation === 'neu') {\r\n      destCoordinate.reverse();\r\n  }\r\n\r\n  const destCoordinateString = stringifyFunc(destCoordinate);\r\n\r\n  return destCoordinateString;\r\n};\r\n\r\n/**\r\n * \r\n * @param {string} strCoordinate The coordinate string in the format 'x, y' or 'y,x'\r\n * @param {string} projCode The projection code\r\n * @return {Array} the coordinate represented by an array with 2 floats x, y\r\n */\r\nexport const stringToCoordinate = (strCoordinate, projCode) => {\r\n  const proj = getProjection(projCode);\r\n  let coordinate = undefined;\r\n  //parse x and y values from input\r\n  if(strCoordinate && strCoordinate.split(',').length === 2) {\r\n    coordinate = strCoordinate.split(',').map((item) => {\r\n        return parseFloat(item.trim());\r\n    });\r\n    if(proj.getAxisOrientation() === 'neu') {\r\n        coordinate.reverse();\r\n    }\r\n  }\r\n  return coordinate;\r\n}\r\n\r\n\r\nexport const getCoordinateLabel = (projCode) => {\r\n  const proj = getProjection(projCode);\r\n  let [XLabel, YLabel] = ['X', 'Y'];\r\n\r\n  const units = proj.getUnits();\r\n  if(units === 'degrees') {\r\n      [XLabel, YLabel] = ['LONG', 'LAT'];\r\n  }\r\n\r\n  const axisOrientation = proj.getAxisOrientation();\r\n  if (axisOrientation === 'neu') {\r\n      [XLabel, YLabel] = [YLabel, XLabel];\r\n  }\r\n\r\n  const strLabel = `${XLabel}, ${YLabel} (${units})`;\r\n  return strLabel;\r\n}\r\n\r\n","import React from 'react';\r\nimport './TreeContextMenu.css';\r\n\r\nconst TreeContextMenu = React.memo(({\r\n    overlay, \r\n    node,\r\n    xPos,\r\n    yPos,\r\n    showMenu = false\r\n}) => {\r\n   \r\n    //calculate the visibility to show/hide the context menu\r\n    const visibility  = showMenu ? {visibility:'visible'} : {visibility:'hidden', height:0}\r\n    return (\r\n        <div mode=\"vertical\"\r\n            className=\"rolext-tree-context-menu\"\r\n            style={{\r\n                ...visibility,\r\n                top: yPos,\r\n                left: xPos,\r\n            }}\r\n        >\r\n            {overlay}\r\n        </div>\r\n    );\r\n\r\n  });\r\n\r\n  export default TreeContextMenu;\r\n\r\n// const ContextMenu = ({ menu }) => {\r\n//     const { xPos, yPos, showMenu } = useContextMenu();\r\n//     return (\r\n//       <Motion\r\n//         defaultStyle={{ opacity: 0 }}\r\n//         style={{ opacity: !showMenu ? spring(0) : spring(1) }}\r\n//       >\r\n//         {(interpolatedStyle) => (\r\n//           <>\r\n//             {showMenu ? (\r\n//               <div\r\n//                 className=\"menu-container\"\r\n//                 style={{\r\n//                   top: yPos,\r\n//                   left: xPos,\r\n//                   opacity: interpolatedStyle.opacity,\r\n//                 }}\r\n//               >\r\n//                 {menu}\r\n//               </div>\r\n//             ) : (\r\n//               <></>\r\n//             )}\r\n//           </>\r\n//         )}\r\n//       </Motion>\r\n//     );\r\n//   };","import { DownOutlined, CloseOutlined } from '@ant-design/icons';\r\nimport PropTypes from 'prop-types';\r\nimport './Header.css'\r\n\r\n/**\r\n * Header Component for the Panel Component.\r\n * Normally, this component is not used directly,\r\n * but used by the Panel Component.\r\n *\r\n */\r\nconst Header = ({\r\n    collapsible = true,\r\n    preTools,\r\n    postTools,\r\n    title,\r\n    toggleCollapse,\r\n    onMouseOver,\r\n    onMouseOut,\r\n    onClose,\r\n    style\r\n}) => {\r\n\r\n    return ( \r\n        <div className = \"rolext-panel-header\"\r\n            onMouseOver = { onMouseOver }\r\n            onMouseOut = { onMouseOut }\r\n            style = { style } \r\n        >\r\n        { title } \r\n        <div style = {\r\n            { flex: 1 } } > </div> { preTools } {\r\n            collapsible &&\r\n                <\r\n                DownOutlined style = {\r\n                    { height: \"100%\" } }\r\n            className = \"rolext-panel-header-collapse-tool rolext-panel-header-tool\"\r\n            onClick = { toggleCollapse }\r\n            />\r\n        } {\r\n            onClose &&\r\n                <\r\n                CloseOutlined style = {\r\n                    { height: \"100%\" } }\r\n            className = \"rolext-panel-header-collapse-tool rolext-panel-header-tool\"\r\n            onClick = { onClose }\r\n            />\r\n        } { postTools } \r\n        </div>\r\n    );\r\n};\r\n\r\nHeader.propTypes = {\r\n    /**\r\n     * If collapsible is true, the header will display \r\n     * a collapse/expand control that calls the callback\r\n     * function passed in as the toggleCollapse property.\r\n     */\r\n    collapsible: PropTypes.bool,\r\n\r\n    /**\r\n     * Arbitrary tools, any element or React component you’d like, \r\n     * to be shown before the collapse/expand control.\r\n     */\r\n    preTools: PropTypes.node,\r\n\r\n    /**\r\n     * Arbitrary tools, any element or React component you’d like, \r\n     * to be shown in end, after the close control.\r\n     */\r\n    postTools: PropTypes.node,\r\n\r\n\r\n    /**\r\n     * a title text string\r\n     */\r\n    title: PropTypes.string.isRequired,\r\n\r\n    /**\r\n     * A callback function to be called once the\r\n     * user clicks on the expand/collapse control.\r\n     */\r\n    toggleCollapse: PropTypes.func,\r\n\r\n    /**\r\n     * A callback function to be called once the\r\n     * mouse is over the Header component.\r\n     */\r\n    onMouseOver: PropTypes.func,\r\n\r\n    /**\r\n     * A callback function to be called once the\r\n     * mouse is moved out of the Header component.\r\n     */\r\n    onMouseOut: PropTypes.func,\r\n\r\n    /**\r\n     * A callback function to be called once the\r\n     * user clicks in the close control.\r\n     */\r\n    onClose: PropTypes.func,\r\n\r\n    /**\r\n     * A CSS Style to render the Header\r\n     */\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Header;","import React, { useRef, useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Expander.css';\r\n\r\n\r\n/**\r\n * Expander component used to collapse and expand the panel body.\r\n * Normally this component will not be used directly, but\r\n * used internally by the Panel component. But you can\r\n * use it, if you need to develop a collapsible component.\r\n */\r\nconst Expander = ({\r\n  expanded = true,\r\n  className = 'rolext-panel-expander-wrap',\r\n  style = {},\r\n  ...otherProps\r\n}) => {\r\n\r\n  const divEl = useRef(null);\r\n\r\n\r\n  const [height, setHeight] = useState(0);\r\n\r\n\r\n  /**\r\n   * Effect to update the height of the component\r\n   */\r\n  useEffect(() => {\r\n    if(!expanded) {\r\n      setHeight(0);\r\n    }\r\n    else {\r\n      const newHeight = divEl.current.scrollHeight + 5;\r\n      if(newHeight > height)\r\n        setHeight(divEl.current.scrollHeight + 5);\r\n    }\r\n\r\n  }, [expanded, height]);\r\n\r\n\r\n  return (\r\n    <div\r\n      ref={divEl}\r\n      className={className}\r\n      style = {{...style, height} }\r\n    >\r\n      {otherProps.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nExpander.propTypes = {\r\n  /**\r\n   * The expanded prop is set to true by default. \r\n   * Passing in expanded as false will collapse the element.\r\n   */\r\n  expanded: PropTypes.bool\r\n}\r\n\r\nexport default Expander;\r\n\r\n\r\n\r\n","import React, {useCallback, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Header from './Header/Header';\r\nimport Expander from './Expander/Expander';\r\nimport './Panel.css';\r\n\r\n/**\r\n * The Panel Component.\r\n */\r\nconst Panel = ({\r\n  expanded = true,\r\n  collapsible = true,\r\n  expandDir, \r\n  preTools,\r\n  postTools, \r\n  style = null, \r\n  title,\r\n  onTitleMouseOver,\r\n  onTitleMouseOut,\r\n  titleStyle,\r\n  onClose = null,\r\n  ...otherProps\r\n}) => {\r\n\r\n  const [internalExpanded, setInternalExpanded] = useState(expanded);\r\n\r\n  const toggleCollapse = useCallback(() => {\r\n    setInternalExpanded(prevInternalExpanded => {\r\n      return !prevInternalExpanded;\r\n    });\r\n  },[]);\r\n\r\nconst showHeader = title.length || collapsible;\r\nconst className = `rolext-panel${internalExpanded ? ' rolext-panel-expanded' : ''}`;\r\n\r\nreturn (\r\n  <div className={className} style={style}>\r\n    {showHeader &&\r\n      <Header\r\n        title={title}\r\n        collapsible={collapsible}\r\n        toggleCollapse={toggleCollapse}\r\n        preTools={preTools}\r\n        postTools={postTools}\r\n        onClose={onClose}\r\n        onMouseOver={onTitleMouseOver}\r\n        onMouseOut={onTitleMouseOut}\r\n        style={titleStyle}\r\n      />\r\n    }\r\n    {/* <Expander expanded={internalExpanded} expandDir={expandDir} render={() => (\r\n      <div className=\"rolext-panel-body-el\">\r\n        {otherProps.children}\r\n      </div>\r\n    )} /> */}\r\n    <Expander expanded={internalExpanded} expandDir={expandDir}>\r\n      <div className=\"rolext-panel-body-el\">\r\n        {otherProps.children}\r\n      </div>\r\n    </Expander>\r\n  </div>\r\n);\r\n\r\n};\r\n\r\nPanel.propTypes = {\r\n\r\n  /**\r\n   * Set to true by default. \r\n   * Passing expanded as false will show the \r\n   * component collapsed.\r\n   */\r\n  expanded:PropTypes.bool,\r\n  /**\r\n   * If collapsible is true, the panel header will display \r\n   * a collapse/expand control to collapse/expand the panel.\r\n   */\r\n  collapsible:PropTypes.bool,\r\n\r\n  /**\r\n   * Not used currently.\r\n   * To be used in the future to allow to expand in a horizontal\r\n   * direction.\r\n   * @ignore\r\n   */\r\n  expandDir: PropTypes.string,\r\n\r\n  /**\r\n   * Arbitrary tools, any element or React component you’d like, \r\n   * to be shown before the collapse/expand control.\r\n   */\r\n  preTools: PropTypes.node,\r\n\r\n  /**\r\n   * Arbitrary tools, any element or React component you’d like, \r\n   * to be shown in end, after the close control.\r\n   */\r\n  postTools: PropTypes.node,\r\n\r\n  /**\r\n   * A CSS Style to render the Panel\r\n   */\r\n  style:PropTypes.object,\r\n\r\n  /**\r\n   * a title to be shown\r\n   */\r\n  title: PropTypes.node.isRequired,\r\n\r\n  /**\r\n   * A callback function to be called once the\r\n   * mouse is over the Header component.\r\n   */\r\n  onTitleMouseOver: PropTypes.func,\r\n\r\n   /**\r\n   * A callback function to be called once the\r\n   * mouse is moved out of the Header component.\r\n   */\r\n  onTitleMouseOut: PropTypes.func,\r\n\r\n  /**\r\n   * A CSS Style to render the Title\r\n   */\r\n  titleStyle:PropTypes.object,\r\n\r\n  /**\r\n   * A callback function to be called once the\r\n   * user clicks in the close control.\r\n   * If null, the close control will not be \r\n   * shown.\r\n   */\r\n  onClose: PropTypes.func\r\n};\r\n\r\nexport default Panel;","import {useCallback, useState, useRef} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Draggable from 'react-draggable';\r\nimport Panel from '../../../panel/Panel/Panel';\r\nimport {Divider, Space, Button} from 'antd';\r\nimport './Window.css';\r\n\r\n/**\r\n * \r\n * The Window Component\r\n */\r\nconst Window = ({\r\n    expanded = true,\r\n    collapsible = true,\r\n    expandDir, \r\n    preTools = undefined,\r\n    postTools = undefined, \r\n    style = {}, \r\n    title = 'My Window',\r\n    onOk = undefined,\r\n    onCancel = undefined,\r\n    onClose = undefined,\r\n    visible = false,\r\n    ...otherProps\r\n}) => {\r\n    //if(!visible) return null;\r\n    const [bounds, setBounds] = useState(null);\r\n    const [dragDisabled, setDragDisabled] = useState(true);\r\n    const draggleRef = useRef(null);\r\n\r\n   \r\n\r\n    const onStart = useCallback((event, uiData) => {\r\n        const { clientWidth, clientHeight } = window?.document?.documentElement;\r\n        const targetRect = draggleRef?.current?.getBoundingClientRect();\r\n        setBounds({\r\n            left: -targetRect?.left + uiData?.x,\r\n            right: clientWidth - (targetRect?.right - uiData?.x),\r\n            top: -targetRect?.top + uiData?.y,\r\n            bottom: clientHeight - (targetRect?.bottom - uiData?.y),\r\n            //bottom: 1.15*clientHeight - (targetRect?.bottom - uiData?.y),\r\n          },);\r\n    },[]);\r\n\r\n    /**\r\n     * Handler to enable dragging if the mouse is \r\n     * over the Title Bar.\r\n     */\r\n    const onTitleMouseOver = useCallback(() => {\r\n        setDragDisabled(false);\r\n    }, []);\r\n\r\n    /**\r\n     * Handler to disable dragging if the mouse is \r\n     * out of the Title Bar.\r\n     */\r\n    const onTitleMouseOut = useCallback(() => {\r\n        setDragDisabled(true);\r\n    }, []);\r\n    \r\n\r\n    return (\r\n        visible &&\r\n        <div className=\"rolext-wnd\">\r\n            \r\n            <Draggable\r\n                nodeRef={draggleRef}\r\n                disabled={dragDisabled}\r\n                bounds={bounds}\r\n                onStart={onStart}\r\n            >\r\n            <div ref={draggleRef}>\r\n            {/* <ResizableBox> */}\r\n                <Space>\r\n                    <Panel\r\n                        title={title}\r\n                        expanded={expanded}\r\n                        collapsible\r\n                        style={style}\r\n                        preTools={preTools}\r\n                        postTools={postTools}\r\n                        expandDir={expandDir}\r\n                        onTitleMouseOver={onTitleMouseOver}\r\n                        onTitleMouseOut={onTitleMouseOut}\r\n                        titleStyle={{ width: '100%', cursor: 'move'}}\r\n                        onClose={onClose}\r\n                    >\r\n                        {otherProps.children}\r\n                        <Divider style={{margin:\"5px\"}}/>\r\n                        {(onOk || onCancel) &&\r\n                            <div className=\"rolext-wnd-btn-container\">\r\n                                {onOk && <Button type=\"primary\" onClick={onOk}>OK</Button>}\r\n                                {onCancel && <Button type=\"primary\" onClick={onCancel}>Cancel</Button>}\r\n                            </div>\r\n                        }\r\n                    </Panel>\r\n                    \r\n                </Space>\r\n            {/* </ResizableBox>   */}\r\n            </div>\r\n            </Draggable>\r\n        </div>\r\n    );\r\n};\r\n\r\nWindow.propTypes = {\r\n\r\n    /**\r\n     * Set to true by default. \r\n     * Passing expanded as false will show the \r\n     * window panel collapsed.\r\n     */\r\n    expanded:PropTypes.bool,\r\n\r\n    /**\r\n     * If true, the window titlebar will display \r\n     * a collapse/expand control to collapse/expand the window panel.\r\n     */\r\n    collapsible:PropTypes.bool,\r\n\r\n    /**\r\n     * Not used currently.\r\n     * To be used in the future to allow to expand in a horizontal\r\n     * direction.\r\n     * @ignore\r\n     */\r\n    expandDir: PropTypes.string,\r\n\r\n    /**\r\n     * Arbitrary tools, any element or React component you’d like, \r\n     * to be shown in the titlebar before the collapse/expand control.\r\n     */\r\n    preTools: PropTypes.node,\r\n\r\n    /**\r\n     * Arbitrary tools, any element or React component you’d like, \r\n     * to be shown in the titlebar, after the close control.\r\n     */\r\n    postTools: PropTypes.node,\r\n\r\n    /**\r\n     * A CSS Style to render the Window\r\n     */\r\n    style:PropTypes.object,\r\n\r\n    /**\r\n     * a title to be shown in the Window titlebar\r\n     */\r\n    title: PropTypes.node.isRequired,\r\n\r\n    /**\r\n     * A callback function to be called once the\r\n     * user clicks in the <i>OK</i> button.\r\n     * If null, the <i>OK</i> button will not be \r\n     * shown.\r\n     */\r\n     onOk: PropTypes.func,\r\n\r\n     /**\r\n     * A callback function to be called once the\r\n     * user clicks in the <i>Cancel</i> button.\r\n     * If null, the <i>Cancel</i> button will not be \r\n     * shown.\r\n     */\r\n      onCancel: PropTypes.func,\r\n\r\n     /**\r\n     * A callback function to be called once the\r\n     * user clicks in the close control.\r\n     * If null, the close control will not be \r\n     * shown.\r\n     */\r\n    onClose: PropTypes.func\r\n\r\n\r\n};\r\n\r\nexport default Window;","import React from 'react';\r\nimport BaseLayer from 'ol/layer/Base';\r\nimport {Form, Slider, Checkbox, InputNumber, Input} from 'antd';\r\n\r\nconst getOpts = (layer) => {\r\n    if (layer instanceof BaseLayer) {\r\n        const layerOpts = {\r\n            name: layer ? layer.get('name') : undefined,\r\n            maxResolution: layer ? layer.getMaxResolution() : undefined,\r\n            minResolution: layer ? layer.getMinResolution() : undefined,\r\n            maxZoom: layer ? layer.getMaxZoom() : undefined,\r\n            minZoom: layer ? layer.getMinZoom() : undefined,\r\n            opacity: layer ? layer.getOpacity() : 1,\r\n            visible: layer ? layer.getVisible() : true,\r\n            zIndex: layer ? layer.getZIndex() : 0\r\n        };\r\n        return layerOpts;\r\n    }\r\n    else {\r\n        const {source, ...layerOpts} = layer;\r\n        return layerOpts;\r\n    }\r\n};\r\n\r\n/**\r\n * The 'General' Tab for the Base Layer to be used in the Layer Form\r\n */\r\nconst GeneralTab = () => {\r\n    return(\r\n        <React.Fragment>\r\n            <Form.Item\r\n                name=\"name\"\r\n                label=\"Name\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                    },\r\n                ]}\r\n            >\r\n                <Input/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                    name=\"maxResolution\"\r\n                    label=\"Max Resolution\"\r\n                >\r\n                    <InputNumber/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                name=\"minResolution\"\r\n                label=\"Min Resolution\"\r\n            >\r\n                <InputNumber/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                name=\"maxZoom\"\r\n                label=\"Max Zoom\"\r\n            >\r\n                <InputNumber/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                name=\"minZoom\"\r\n                label=\"Min Zoom\"\r\n            >\r\n                <InputNumber/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                name=\"opacity\"\r\n                label=\"Opacity\"\r\n            >\r\n                <Slider max={1} step={0.1}/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                name=\"visible\"\r\n                valuePropName=\"checked\"\r\n                label=\"Visible\"\r\n            >\r\n                <Checkbox/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                name=\"zIndex\"\r\n                label=\"Z-Index\"\r\n            >\r\n                <InputNumber/>\r\n            </Form.Item>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nGeneralTab.getOpts = getOpts;\r\n\r\nexport default GeneralTab;","import React from 'react';\r\nimport {Tabs} from 'antd';\r\nimport {Form, Button, Space} from 'antd';\r\nimport GeneralTab from '../../tabs/general/GeneralTab/GeneralTab';\r\n\r\n\r\nconst layout = {\r\n    labelAlign: 'left',\r\n    labelCol: {\r\n      span: 6,\r\n    },\r\n    wrapperCol: {\r\n      span: 16,\r\n    },\r\n};\r\n\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 10,\r\n        span: 3,\r\n    },\r\n};\r\n\r\n/**\r\n * A basic Form to create a new Layer ol/layer/Base Layer.\r\n */\r\nconst NewLayerForm = ({\r\n    layerOpts,\r\n    onFinish,\r\n    onFinishFailed,\r\n    tabs = [\r\n        {\r\n            title: \"General\",\r\n            key: \"general\",\r\n            isDefault: true,\r\n            el: GeneralTab\r\n        }\r\n    ],\r\n    ...otherProps\r\n}) => {\r\n    const [form] = Form.useForm();\r\n\r\n\r\n    const onReset = () => {\r\n        form.resetFields();\r\n    };\r\n\r\n    const onFill = () => {\r\n        form.setFieldsValue(layerOpts);\r\n    };\r\n\r\n    //get first key as the default active key for the tab\r\n    let defaultActiveKey = tabs[0].key;\r\n    tabs.forEach((tab) => {\r\n        if(tab.isDefault === true) {\r\n            defaultActiveKey = tab.key;\r\n        }\r\n    });\r\n\r\n    return(\r\n        <Form \r\n            {...layout} \r\n            //layout=\"vertical\"\r\n            form={form} \r\n            name=\"new-layer-form\" \r\n            onFinish={onFinish}\r\n            initialValues = {layerOpts}\r\n        >\r\n        <Tabs defaultActiveKey= {defaultActiveKey}>\r\n        {tabs.map((Tab) => {\r\n                const TabItem = Tab.el;\r\n                return(\r\n                    <Tabs.TabPane tab={Tab.title} key={Tab.key}>\r\n                        <TabItem mode=\"new\"/>\r\n                    </Tabs.TabPane>\r\n                );\r\n            })}\r\n        </Tabs>\r\n        {/* <Tabs defaultActiveKey= {defaultActiveKey}>\r\n            <Tabs.TabPane tab=\"General\" key=\"general\">\r\n                <GeneralTab mode=\"new\"/>\r\n            </Tabs.TabPane>\r\n            {SourceTab &&\r\n                <Tabs.TabPane tab=\"Source\" key=\"source\">\r\n                    <SourceTab mode=\"new\"/>\r\n                </Tabs.TabPane>\r\n            }\r\n        </Tabs> */}\r\n        <Form.Item \r\n            {...tailLayout}\r\n        >\r\n            <Space>\r\n                <Button  type=\"primary\" htmlType=\"submit\">\r\n                    Submit\r\n                </Button>\r\n                <Button htmlType=\"button\" onClick={onReset}>\r\n                    Reset\r\n                </Button>\r\n                <Button type=\"link\" htmlType=\"button\" onClick={onFill}>\r\n                    Fill form\r\n                </Button>\r\n            </Space>\r\n        </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default NewLayerForm;","import React from 'react';\r\nimport OlLayerBase from 'ol/layer/Base';\r\nimport {Form, Input, InputNumber} from 'antd';\r\n\r\nconst getOpts = (layer) => {\r\n    if(layer instanceof OlLayerBase) {\r\n        const sourceOpts = {\r\n            source: {\r\n                url: layer.getSource().getUrl(), \r\n                params: {\r\n                    FEATURE_COUNT: layer.getSource().getParams().FEATURE_COUNT,\r\n                    FORMAT: layer.getSource().getParams().FORMAT,\r\n                    LAYERS: layer.getSource().getParams().LAYERS,\r\n                    STYLES: layer.getSource().getParams().STYLES,\r\n                    VERSION: layer.getSource().getParams().VERSION,\r\n                    CQL_FILTER: layer.getSource().getParams().CQL_FILTER,\r\n                    INFO_FORMAT: layer.getSource().getParams().INFO_FORMAT\r\n                },\r\n            }\r\n        };\r\n        return sourceOpts;\r\n    }\r\n};\r\n\r\nconst ImageWMSSourceTab = (props) => {\r\n    return(\r\n        <React.Fragment>\r\n            <Form.Item\r\n                name={['source', 'url']}\r\n                label=\"URL\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                    },\r\n                ]}\r\n            >\r\n                <Input/>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name={['source', 'params', 'FEATURE_COUNT']}\r\n                label=\"Feature Count\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                    },\r\n                ]}\r\n            >\r\n                <InputNumber/>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name={['source', 'params', 'FORMAT']}\r\n                label=\"Format\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                    },\r\n                ]}\r\n            >\r\n                <Input/>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name={['source', 'params', 'LAYERS']}\r\n                label=\"Layers\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                    },\r\n                ]}\r\n            >\r\n                <Input/>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name={['source', 'params', 'STYLES']}\r\n                label=\"Styles\"\r\n            >\r\n                <Input/>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name={['source', 'params', 'VERSION']}\r\n                label=\"Version\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                    },\r\n                ]}\r\n            >\r\n                <Input/>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name={['source', 'params', 'CQL_FILTER']}\r\n                label=\"CQL Filter\"\r\n                \r\n            >\r\n                <Input.TextArea allowClear/>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name={['source', 'params', 'INFO_FORMAT']}\r\n                label=\"FeatureInfo Format\"\r\n            >\r\n                <Input/>\r\n            </Form.Item>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nImageWMSSourceTab.getOpts = getOpts;\r\n\r\nexport default ImageWMSSourceTab;","import {useCallback} from 'react';\r\nimport OlImageLayer from 'ol/layer/Image';\r\nimport OlImageWMSSource from 'ol/source/ImageWMS';\r\nimport NewLayerForm from '../NewLayerForm/NewLayerForm';\r\nimport GeneralTab from '../../tabs/general/GeneralTab/GeneralTab';\r\nimport ImageWMSSourceTab  from '../../tabs/source/ImageWMSSourceTab/ImageWMSSourceTab';\r\n\r\nconst defaultWMSLayerOpts = {\r\n    opacity: 1,\r\n    maxResolution: Infinity,\r\n    maxZoom: Infinity,\r\n    minResolution: 0,\r\n    minZoom: -Infinity,\r\n    visible: true,\r\n    zIndex: 0,\r\n    name: 'unnamed layer',\r\n    source: {\r\n        ratio: 1,\r\n        params: {\r\n            FORMAT: 'image/png',\r\n            STYLES: '',\r\n            VERSION: '1.1.1',\r\n            FEATURE_COUNT: 50\r\n        }\r\n    }\r\n};\r\n\r\nconst NewImageWMSLayerForm = ({\r\n    map,\r\n    parentLayerGroup = undefined,\r\n    layerOpts = defaultWMSLayerOpts, \r\n    onFinish = undefined\r\n}) => {\r\n\r\n    const onInternalFinish = useCallback((values) => {\r\n        const {source, ...baseOpts} = values;\r\n        const layer = new OlImageLayer({\r\n            ...baseOpts,\r\n            source: new OlImageWMSSource(source)\r\n        });\r\n        //add layer to the map\r\n        if(parentLayerGroup)\r\n            parentLayerGroup.getLayers().push(layer);\r\n        else\r\n            map.addLayer(layer);\r\n        //execute onFinish\r\n        onFinish && onFinish();\r\n\r\n    },[map, parentLayerGroup, onFinish]);\r\n\r\n    return(\r\n        <NewLayerForm \r\n            layerOpts={layerOpts} \r\n            onFinish={onInternalFinish}\r\n            tabs = {[\r\n                {\r\n                    title: \"General\",\r\n                    key: \"general\",\r\n                    isDefault: true,\r\n                    el: GeneralTab\r\n                },\r\n                {\r\n                    title: \"Source\",\r\n                    key: \"source\",\r\n                    el: ImageWMSSourceTab\r\n                }\r\n            ]}\r\n        />\r\n    );\r\n};\r\n\r\nexport default NewImageWMSLayerForm;\r\n","import React, {useCallback, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Map from 'ol/Map';\r\nimport GroupLayer from 'ol/layer/Group';\r\nimport {Button} from 'antd';\r\nimport Window from '../../../../window/base/Window/Window';\r\nimport NewImageWMSLayerForm from '../../../../form/layer/new/NewImageWMSLayerForm/NewImageWMSLayerForm';\r\n\r\n\r\n/**\r\n * <p>\r\n *  Button to create a new <i>ol/layer/Image</i> layer \r\n *  in the map having <i>ol/source/ImageWMS</i> as source.\r\n * </p>\r\n * <p>\r\n *  Remark: this component also is present in the menu context \r\n *  for <i>Layer Tree</i> component.\r\n * </p>\r\n * <p>\r\n *  Check in the <a href=\"https://ant.design/components/button/\">documentation</a> \r\n *  for additional properties for the button.\r\n * </p>\r\n * \r\n * @visibleName New Image WMS Layer Button \r\n */\r\nconst NewImageWMSLayerButton = ({\r\n    map,\r\n    parentLayerGroup = undefined,\r\n    layerOpts = undefined,\r\n    wndStyle, \r\n    children,\r\n    ...otherProps\r\n}) => {\r\n\r\n    //Initialize Image Layer\r\n    const [visibleWnd, setVisibleWnd] = useState(false);\r\n\r\n    /**\r\n     * Handler to close the Window once the OK button\r\n     * on this window is clicked\r\n     */\r\n    const onCloseWindow = () => {\r\n        setVisibleWnd(false);\r\n    };\r\n\r\n    /**\r\n     * Handler to show the Window once the button is Clicked\r\n     */\r\n    const onShowWindow = () => {\r\n        setVisibleWnd(true);\r\n    };\r\n\r\n    const onFinish = useCallback((values) => {\r\n        setVisibleWnd(false);\r\n    }, []);\r\n\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <Button onClick={onShowWindow} {...otherProps}>{children}</Button>\r\n            {\r\n                visibleWnd &&\r\n                <Window\r\n                    title={children}\r\n                    collapsible\r\n                    onClose={onCloseWindow} \r\n                    visible={visibleWnd}\r\n                    style={wndStyle} \r\n                >\r\n                    <NewImageWMSLayerForm \r\n                        map={map}\r\n                        parentLayerGroup={parentLayerGroup}\r\n                        layerOpts={layerOpts} \r\n                        onFinish={onFinish}\r\n                    />\r\n                </Window>\r\n            }\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nNewImageWMSLayerButton.propTypes = {\r\n    /**\r\n     * The OpenLayers ol/Map where the new Image WMS Layer will be created.\r\n     */\r\n    map: PropTypes.instanceOf(Map).isRequired,\r\n\r\n    /**\r\n     * Layer Group where the new Image WMS Layer will be added.\r\n     * If not provided, the map layer group will be used.\r\n     */\r\n    parentLayerGroup: PropTypes.instanceOf(GroupLayer),\r\n\r\n    /**\r\n     * <p>The default options to be shown in the window for the creation of the Image WMS Layer.</p>\r\n     * <p>\r\n     *  It is the same used as parameter in the constructor of\r\n     *  <a href=\"https://openlayers.org/en/latest/apidoc/module-ol_layer_Image-ImageLayer.html\">\r\n     *      ol/layer/Image\r\n     *  </a> \r\n     *  but the <strong>source</strong> key will have the options to create the ImageWMS source, as defined \r\n     *  in the constructor of \r\n     *  <a href=\"https://openlayers.org/en/latest/apidoc/module-ol_source_ImageWMS-ImageWMS.html\">\r\n     *      ol/source/ImageWMS\r\n     *  </a>.\r\n     * </p>\r\n     * <p>If not provided, a default options will be provided by the application.</p>\r\n     * \r\n     */\r\n    layerOpts: PropTypes.object,\r\n\r\n    /**\r\n     * The CSS style to be provided to the window\r\n     */\r\n    wndStyle:PropTypes.object,\r\n\r\n    /**\r\n     * The child node for the Button\r\n     */\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default NewImageWMSLayerButton;","import React from 'react';\r\nimport OlLayerBase from 'ol/layer/Base';\r\nimport OlState from 'ol/source/State';\r\nimport {Form, Input, InputNumber, Checkbox} from 'antd';\r\n\r\nconst getOpts = (layer) => {\r\n    if(layer instanceof OlLayerBase) {\r\n        const sourceOpts = {\r\n            source: {\r\n                url: layer.getSource().getUrls(),\r\n                attributions: layer.getSource().getAttributions() && layer.getSource().getAttributions()(OlState.READY),\r\n                params: {\r\n                    FEATURE_COUNT: layer.getSource().getParams().FEATURE_COUNT,\r\n                    FORMAT: layer.getSource().getParams().FORMAT,\r\n                    LAYERS: layer.getSource().getParams().LAYERS,\r\n                    STYLES: layer.getSource().getParams().STYLES,\r\n                    VERSION: layer.getSource().getParams().VERSION,\r\n                    CQL_FILTER: layer.getSource().getParams().CQL_FILTER\r\n                }\r\n            }\r\n        };\r\n        return sourceOpts;\r\n    }\r\n};\r\n\r\nconst TileWMSSourceTab = (\r\n    {\r\n        mode\r\n    }) => {\r\n    \r\n    return(\r\n        <React.Fragment>\r\n            {/* URLS */}\r\n            <Form.Item\r\n                name={['source', 'url']}\r\n                label=\"URL\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                    },\r\n                ]}\r\n            >\r\n                <Input/>\r\n            </Form.Item>\r\n\r\n            {/* Attributions */\r\n                <Form.Item\r\n                    name={['source', 'attributions']}\r\n                    label=\"Attributions\"\r\n                    rules={[\r\n                        {\r\n                            required: false,\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input/>\r\n                </Form.Item>\r\n            }\r\n\r\n            {/* Cache Size  */\r\n                mode === \"new\" &&\r\n                <Form.Item\r\n                    name={['source', 'cacheSize']}\r\n                    label=\"Cache Size\"\r\n                    rules={[\r\n                        {\r\n                            required: false,\r\n                        },\r\n                    ]}\r\n                >\r\n                    <InputNumber/>\r\n                </Form.Item>\r\n            }\r\n\r\n            {/* Cross-Origin */\r\n                mode === \"new\" &&\r\n                <Form.Item\r\n                    name={['source', 'crossOrigin']}\r\n                    label=\"Cross Origin\"\r\n                    rules={[\r\n                        {\r\n                            required: false,\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input/>\r\n                </Form.Item>\r\n            }\r\n\r\n            {/* Image Smoothing */\r\n                mode === \"new\" &&\r\n                <Form.Item\r\n                    name={['source', 'imageSmoothing']}\r\n                    label=\"Image Smooth.: \"\r\n                    valuePropName=\"checked\"\r\n                >\r\n                    <Checkbox/>\r\n                </Form.Item>\r\n            }\r\n\r\n            {/*FEATURE_COUNT Param*/}\r\n            <Form.Item\r\n                name={['source', 'params', 'FEATURE_COUNT']}\r\n                label=\"Feature Count\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                    },\r\n                ]}\r\n            >\r\n                <InputNumber/>\r\n            </Form.Item>\r\n\r\n            {/*FORMAT Param*/}\r\n            <Form.Item\r\n                name={['source', 'params', 'FORMAT']}\r\n                label=\"Format\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                    },\r\n                ]}\r\n            >\r\n                <Input/>\r\n            </Form.Item>\r\n\r\n            {/* LAYERS Param */}\r\n            <Form.Item\r\n                name={['source', 'params', 'LAYERS']}\r\n                label=\"Layers\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                    },\r\n                ]}\r\n            >\r\n                <Input/>\r\n            </Form.Item>\r\n            \r\n            {/* STYLES Param */}\r\n            <Form.Item\r\n                name={['source', 'params', 'STYLES']}\r\n                label=\"Styles\"\r\n            >\r\n                <Input/>\r\n            </Form.Item>\r\n            \r\n            {/* VERSION Param */}\r\n            <Form.Item\r\n                name={['source', 'params', 'VERSION']}\r\n                label=\"Version\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                    },\r\n                ]}\r\n            >\r\n                <Input/>\r\n            </Form.Item>\r\n\r\n            {/* CQL FILTER Param */}\r\n            <Form.Item\r\n                name={['source', 'params', 'CQL_FILTER']}\r\n                label=\"CQL Filter\"\r\n            >\r\n                <Input.TextArea allowClear/>\r\n            </Form.Item>\r\n\r\n             {/* Gutter */\r\n                mode === \"new\" &&\r\n                <Form.Item\r\n                    name={['source', 'gutter']}\r\n                    label=\"Gutter\"\r\n                >\r\n                    <InputNumber/>\r\n                </Form.Item>\r\n            }\r\n\r\n            {/* hidpi */\r\n                mode === \"new\" &&\r\n                <Form.Item\r\n                    name={['source', 'hidpi']}\r\n                    label=\"hidpi\"\r\n                    valuePropName=\"checked\"\r\n                >\r\n                    <Checkbox/>\r\n                </Form.Item>\r\n            }\r\n\r\n            {/* Maximum Zoom */\r\n                mode === \"new\" &&\r\n                <Form.Item\r\n                    name={['source', 'maxZoom']}\r\n                    label=\"Max Zoom\"\r\n                >\r\n                    <InputNumber/>\r\n                </Form.Item>\r\n            }\r\n\r\n            {/* Reprojection Error Threshold */\r\n                mode === \"new\" &&\r\n                <Form.Item\r\n                    name={['source', 'reprojectionErrorThreshold']}\r\n                    label=\"Reproj. Error Threshold\"\r\n                >\r\n                    <InputNumber/>\r\n                </Form.Item>\r\n            }\r\n\r\n            {/* Server Type */\r\n                mode === \"new\" &&\r\n                <Form.Item\r\n                    name={['source', 'serverType']}\r\n                    label=\"Server Type\"\r\n                >\r\n                    <Input/>\r\n                </Form.Item>\r\n            }\r\n\r\n            {/* Wrap X */\r\n                mode === \"new\" &&\r\n                <Form.Item\r\n                    name={['source', 'wrapX']}\r\n                    label=\"Wrap X\"\r\n                    valuePropName=\"checked\"\r\n                >\r\n                    <Checkbox/>\r\n                </Form.Item>\r\n            }\r\n\r\n            {/* Transition */\r\n                mode === \"new\" &&\r\n                <Form.Item\r\n                    name={['source', 'transition']}\r\n                    label=\"Transition\"\r\n                >\r\n                    <InputNumber/>\r\n                </Form.Item>\r\n            }\r\n\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nTileWMSSourceTab.getOpts = getOpts;\r\n\r\nexport default TileWMSSourceTab;","\r\nexport function normalizeStringInObject(obj) {\r\n    if(! obj) return;\r\n    for(let key in obj) {\r\n        if(obj[key] && (typeof obj[key] === 'string' || obj[key] instanceof String)) {\r\n            obj[key] = obj[key].trim();\r\n            if(obj[key] === \"\") {\r\n                obj[key] = undefined;\r\n            }\r\n        }\r\n    }\r\n}","import {useCallback} from 'react';\r\nimport OlTileLayer from 'ol/layer/Tile';\r\nimport OlTileWMSSource from 'ol/source/TileWMS';\r\nimport NewLayerForm from '../NewLayerForm/NewLayerForm';\r\nimport GeneralTab from '../../tabs/general/GeneralTab/GeneralTab';\r\nimport TileWMSSourceTab  from '../../tabs/source/TileWMSSourceTab/TileWMSSourceTab';\r\nimport {normalizeStringInObject} from '../../../../../util/common';\r\n\r\nconst defaultTileWMSLayerOpts = {\r\n    opacity: 1,\r\n    maxResolution: Infinity,\r\n    maxZoom: Infinity,\r\n    minResolution: 0,\r\n    minZoom: -Infinity,\r\n    visible: true,\r\n    zIndex: 0,\r\n    name: 'unnamed layer',\r\n    source: {\r\n        imageSmoothing: true,\r\n        opaque: true,\r\n        wrapX: true,\r\n        hidpi: true,\r\n        gutter: 0,\r\n        params: {\r\n            FORMAT: 'image/png',\r\n            STYLES: '',\r\n            VERSION: '1.1.1',\r\n            FEATURE_COUNT: 50\r\n        }\r\n    }\r\n};\r\n\r\nconst NewTileWMSLayerForm = ({\r\n    map,\r\n    parentLayerGroup = undefined,\r\n    layerOpts = defaultTileWMSLayerOpts, \r\n    onFinish = undefined\r\n}) => {\r\n\r\n    const onInternalFinish = useCallback((values) => {\r\n        normalizeStringInObject(values);\r\n        normalizeStringInObject(values.source);\r\n        normalizeStringInObject(values.source.params);\r\n        const {source, ...baseOpts} = values;\r\n        \r\n        const layer = new OlTileLayer({\r\n            ...baseOpts,\r\n            source: new OlTileWMSSource(source)\r\n        });\r\n        //add layer to the map\r\n        if(parentLayerGroup)\r\n            parentLayerGroup.getLayers().push(layer);\r\n        else\r\n            map.addLayer(layer);\r\n        //execute onFinish\r\n        onFinish && onFinish();\r\n\r\n    },[map, parentLayerGroup, onFinish]);\r\n\r\n    return(\r\n        <NewLayerForm \r\n            layerOpts={layerOpts} \r\n            onFinish={onInternalFinish}\r\n            //GeneralTab={GeneralTab}\r\n            //SourceTab={ImageWMSSourceTab}\r\n            tabs = {[\r\n                {\r\n                    title: \"General\",\r\n                    key: \"general\",\r\n                    isDefault: true,\r\n                    el: GeneralTab\r\n                },\r\n                {\r\n                    title: \"Source\",\r\n                    key: \"source\",\r\n                    el: TileWMSSourceTab\r\n                }\r\n            ]}\r\n            \r\n        />\r\n    );\r\n};\r\n\r\nexport default NewTileWMSLayerForm;\r\n","import React, {useCallback, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Map from 'ol/Map';\r\nimport GroupLayer from 'ol/layer/Group';\r\nimport {Button} from 'antd';\r\nimport Window from '../../../../window/base/Window/Window';\r\nimport NewTileWMSLayerForm from '../../../../form/layer/new/NewTileWMSLayerForm/NewTileWMSLayerForm';\r\n\r\n/**\r\n * <p>\r\n *  Button to create a new <i>ol/layer/Tile</i> layer \r\n *  in the map having <i>ol/source/TileWMS</i> as source.\r\n * </p>\r\n * <p>\r\n *  Remark: this component also is present in the menu context \r\n *  for <i>Layer Tree</i> component.\r\n * </p>\r\n * <p>\r\n *  Check in the <a href=\"https://ant.design/components/button/\">documentation</a> \r\n *  for additional properties for the button.\r\n * </p>\r\n * \r\n * @visibleName New Tile WMS Layer Button \r\n */\r\nconst NewTileWMSLayerButton = ({\r\n    map,\r\n    parentLayerGroup = undefined,\r\n    layerOpts = undefined,\r\n    wndStyle, \r\n    children,\r\n    ...otherProps\r\n}) => {\r\n\r\n    //Initialize Image Layer\r\n    const [visibleWnd, setVisibleWnd] = useState(false);\r\n\r\n    /**\r\n     * Handler to close the Window once the OK button\r\n     * on this window is clicked\r\n     */\r\n    const onCloseWindow = () => {\r\n        setVisibleWnd(false);\r\n    };\r\n\r\n    /**\r\n     * Handler to show the Window once the button is Clicked\r\n     */\r\n    const onShowWindow = () => {\r\n        setVisibleWnd(true);\r\n    };\r\n\r\n    const onFinish = useCallback((values) => {\r\n        setVisibleWnd(false);\r\n    }, []);\r\n\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <Button onClick={onShowWindow} {...otherProps}>{children}</Button>\r\n            {\r\n                visibleWnd &&\r\n                <Window\r\n                    title= {children}\r\n                    collapsible\r\n                    onClose={onCloseWindow} \r\n                    visible={visibleWnd}\r\n                    style={wndStyle} \r\n                >\r\n                    <NewTileWMSLayerForm \r\n                        map={map}\r\n                        parentLayerGroup={parentLayerGroup}\r\n                        layerOpts={layerOpts} \r\n                        onFinish={onFinish}\r\n                    />\r\n                </Window>\r\n            }\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nNewTileWMSLayerButton.propTypes = {\r\n    /**\r\n     * The OpenLayers ol/Map where the new Tile WMS Layer will be created.\r\n     */\r\n    map: PropTypes.instanceOf(Map).isRequired,\r\n\r\n    /**\r\n     * Layer Group where the new Tile WMS Layer will be added.\r\n     * If not provided, the map layer group will be used.\r\n     */\r\n    parentLayerGroup: PropTypes.instanceOf(GroupLayer),\r\n\r\n    /**\r\n     * <p>The default options to be shown in the window for the creation of the Tile WMS Layer.</p>\r\n     * <p>\r\n     *  It is the same used as parameter in the constructor of\r\n     *  <a href=\"https://openlayers.org/en/latest/apidoc/module-ol_layer_Tile-TileLayer.html\">\r\n     *      ol/layer/Tile\r\n     *  </a> \r\n     *  but the <strong>source</strong> key will have the options to create the TileWMS source, as defined \r\n     *  in the constructor of \r\n     *  <a href=\"https://openlayers.org/en/latest/apidoc/module-ol_source_TileWMS-TileWMS.html\">\r\n     *      ol/source/TileWMS\r\n     *  </a>.\r\n     * </p>\r\n     * <p>If not provided, a default options will be provided by the application.</p>\r\n     * \r\n     */\r\n    layerOpts: PropTypes.object,\r\n\r\n    /**\r\n     * The CSS style to be provided to the window\r\n     */\r\n    wndStyle:PropTypes.object,\r\n\r\n    /**\r\n     * The child node for the Button\r\n     */\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default NewTileWMSLayerButton;","\r\nimport {useCallback} from 'react';\r\nimport OlLayerGroup from 'ol/layer/Group';\r\nimport NewLayerForm from '../NewLayerForm/NewLayerForm';\r\n\r\nconst defaultLayerOpts = {\r\n    opacity: 1,\r\n    maxResolution: Infinity,\r\n    maxZoom: Infinity,\r\n    minResolution: 0,\r\n    minZoom: -Infinity,\r\n    visible: true,\r\n    zIndex: 0,\r\n    name: 'unnamed group layer',\r\n};\r\n\r\nconst NewGroupLayerForm = ({\r\n    map,\r\n    parentLayerGroup = undefined,\r\n    layerOpts = defaultLayerOpts, \r\n    onFinish = undefined\r\n}) => {\r\n\r\n    const onInternalFinish = useCallback((values) => {\r\n        //create new Group Layer with values from Form\r\n        const layer = new OlLayerGroup(values);\r\n        //add layer to the map\r\n        if(parentLayerGroup)\r\n            parentLayerGroup.getLayers().push(layer);\r\n        else\r\n            map.addLayer(layer);\r\n        //execute onFinish\r\n        onFinish && onFinish();\r\n\r\n    },[map, parentLayerGroup, onFinish]);\r\n\r\n    return(\r\n        <NewLayerForm \r\n            layerOpts={layerOpts} \r\n            onFinish={onInternalFinish}\r\n        />\r\n    );\r\n};\r\n\r\nexport default NewGroupLayerForm;","import React, {useCallback, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Map from 'ol/Map';\r\nimport GroupLayer from 'ol/layer/Group';\r\nimport {Button} from 'antd';\r\nimport Window from '../../../../window/base/Window/Window';\r\nimport NewGroupLayerForm from '../../../../form/layer/new/NewGroupLayerForm/NewGroupLayerForm';\r\n\r\n/**\r\n * <p>Button to create a new <i>ol/layer/Group</i> in the map.</p>\r\n * <p>\r\n *  Remark: this component also is present in the menu context \r\n *  for <i>Layer Tree</i> component.\r\n * </p>\r\n * <p>\r\n *  Check in the <a href=\"https://ant.design/components/button/\">documentation</a> \r\n *  for additional properties for the button.\r\n * </p>\r\n * \r\n * @visibleName New Layer Group Button \r\n */\r\nconst NewGroupLayerButton = ({\r\n    map,\r\n    parentLayerGroup = map.getLayerGroup(),\r\n    layerOpts = undefined,\r\n    wndStyle, \r\n    children,\r\n    ...otherProps\r\n}) => {\r\n\r\n    //Initialize Image Layer\r\n    const [visibleWnd, setVisibleWnd] = useState(false);\r\n\r\n    /**\r\n     * Handler to close the Window once the OK button\r\n     * on this window is clicked\r\n     */\r\n    const onCloseWindow = () => {\r\n        setVisibleWnd(false);\r\n    };\r\n\r\n    /**\r\n     * Handler to show the Window once the button is Clicked\r\n     */\r\n    const onShowWindow = () => {\r\n        setVisibleWnd(true);\r\n    };\r\n\r\n    const onFinish = useCallback((values) => {\r\n        setVisibleWnd(false);\r\n    }, []);\r\n\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <Button onClick={onShowWindow} {...otherProps}>{children}</Button>\r\n            {\r\n                visibleWnd &&\r\n                <Window\r\n                    title={children}\r\n                    collapsible\r\n                    onClose={onCloseWindow} \r\n                    visible={visibleWnd}\r\n                    style={wndStyle} \r\n                >\r\n                    <NewGroupLayerForm \r\n                        map={map}\r\n                        parentLayerGroup={parentLayerGroup}\r\n                        layerOpts={layerOpts} \r\n                        onFinish={onFinish}\r\n                    />\r\n                </Window>\r\n            }\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nNewGroupLayerButton.propTypes = {\r\n    /**\r\n     * The OpenLayers ol/Map where the new Layer Group will be added.\r\n     */\r\n    map: PropTypes.instanceOf(Map).isRequired,\r\n\r\n    /**\r\n     * Layer Group where the new Layer Group will be added.\r\n     * If not provided, the map layer group will be used.\r\n     */\r\n    parentLayerGroup: PropTypes.instanceOf(GroupLayer),\r\n\r\n    /**\r\n     * The default options to be shown in the window for the creation of the Layer Group.\r\n     * It is the same used as parameter in the constructor of\r\n     * <a href=\"https://openlayers.org/en/latest/apidoc/module-ol_layer_Group-LayerGroup.html\">\r\n     *  ol/layer/Group\r\n     * </a>\r\n     */\r\n    layerOpts: PropTypes.object,\r\n\r\n    /**\r\n     * The CSS style to be provided to the window\r\n     */\r\n    wndStyle:PropTypes.object,\r\n\r\n    /**\r\n     * The child node for the Button\r\n     */\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default NewGroupLayerButton;","import React from 'react';\r\nimport OlLayerBase from 'ol/layer/Base';\r\nimport OlState from 'ol/source/State';\r\nimport {Form, Input, InputNumber, Checkbox} from 'antd';\r\n\r\nconst getOpts = (layer) => {\r\n    if(layer instanceof OlLayerBase) {\r\n        const sourceOpts = {\r\n            source: {\r\n                url: layer.getSource().getUrls(),\r\n                attributions: layer.getSource().getAttributions()(OlState.READY)\r\n            }\r\n        };\r\n        return sourceOpts;\r\n    }\r\n};\r\n\r\nconst OSMSourceTab = (\r\n    {\r\n        mode\r\n    }) => {\r\n    \r\n    return(\r\n        <React.Fragment>\r\n            {/* URL */}\r\n            <Form.Item\r\n                name={['source', 'url']}\r\n                label=\"URL\"\r\n                rules={[\r\n                    {\r\n                        required: false,\r\n                    },\r\n                ]}\r\n            >\r\n                <Input/>\r\n            </Form.Item>\r\n\r\n            {/* Attributions */\r\n                <Form.Item\r\n                    name={['source', 'attributions']}\r\n                    label=\"Attributions\"\r\n                    rules={[\r\n                        {\r\n                            required: false,\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input/>\r\n                </Form.Item>\r\n            }\r\n\r\n            {/* Cache Size  */\r\n                mode === \"new\" &&\r\n                <Form.Item\r\n                    name={['source', 'cacheSize']}\r\n                    label=\"Cache Size\"\r\n                    rules={[\r\n                        {\r\n                            required: false,\r\n                        },\r\n                    ]}\r\n                >\r\n                    <InputNumber/>\r\n                </Form.Item>\r\n            }\r\n\r\n            {/* Cross-Origin */\r\n                mode === \"new\" &&\r\n                <Form.Item\r\n                    name={['source', 'crossOrigin']}\r\n                    label=\"Cross Origin\"\r\n                    rules={[\r\n                        {\r\n                            required: false,\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input/>\r\n                </Form.Item>\r\n            }\r\n\r\n            {/* Image Smoothing */\r\n                mode === \"new\" &&\r\n                <Form.Item\r\n                    name={['source', 'imageSmoothing']}\r\n                    label=\"Image Smooth.: \"\r\n                    valuePropName=\"checked\"\r\n                >\r\n                    <Checkbox/>\r\n                </Form.Item>\r\n            }\r\n\r\n            {/* Maximum Zoom */\r\n                mode === \"new\" &&\r\n                <Form.Item\r\n                    name={['source', 'maxZoom']}\r\n                    label=\"Max Zoom\"\r\n                >\r\n                    <InputNumber/>\r\n                </Form.Item>\r\n            }\r\n\r\n            {/* Opaque */\r\n                mode === \"new\" &&\r\n                <Form.Item\r\n                    name={['source', 'opaque']}\r\n                    label=\"Opaque\"\r\n                    valuePropName=\"checked\"\r\n                >\r\n                    <Checkbox/>\r\n                </Form.Item>\r\n            }\r\n\r\n            {/* Reprojection Error Threshold */\r\n                mode === \"new\" &&\r\n                <Form.Item\r\n                    name={['source', 'reprojectionErrorThreshold']}\r\n                    label=\"Reproj. Error Threshold\"\r\n                >\r\n                    <InputNumber/>\r\n                </Form.Item>\r\n            }\r\n\r\n            {/* Transition */\r\n                mode === \"new\" &&\r\n                <Form.Item\r\n                    name={['source', 'transition']}\r\n                    label=\"Max Zoom\"\r\n                >\r\n                    <InputNumber/>\r\n                </Form.Item>\r\n            }\r\n\r\n            {/* Wrap X */\r\n                mode === \"new\" &&\r\n                <Form.Item\r\n                    name={['source', 'wrapX']}\r\n                    label=\"Wrap X\"\r\n                    valuePropName=\"checked\"\r\n                >\r\n                    <Checkbox/>\r\n                </Form.Item>\r\n            }\r\n\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nOSMSourceTab.getOpts = getOpts;\r\n\r\nexport default OSMSourceTab;","import {useCallback} from 'react';\r\nimport OlTileLayer from \"ol/layer/Tile\";\r\nimport OlOSMSource from 'ol/source/OSM';\r\nimport NewLayerForm from '../NewLayerForm/NewLayerForm';\r\nimport GeneralTab from '../../tabs/general/GeneralTab/GeneralTab';\r\nimport OSMSourceTab  from '../../tabs/source/OSMSourceTab/OSMSourceTab';\r\n\r\nconst defaultOSMLayerOpts = {\r\n    opacity: 1,\r\n    maxResolution: Infinity,\r\n    maxZoom: Infinity,\r\n    minResolution: 0,\r\n    minZoom: -Infinity,\r\n    visible: true,\r\n    zIndex: 0,\r\n    name: 'OSM',\r\n    source: {\r\n        imageSmoothing: true,\r\n        opaque: true,\r\n        wrapX: true\r\n    }\r\n};\r\n\r\nconst NewOSMLayerForm = ({\r\n    map,\r\n    parentLayerGroup = undefined,\r\n    layerOpts = defaultOSMLayerOpts, \r\n    onFinish = undefined\r\n}) => {\r\n\r\n    const onInternalFinish = useCallback((values) => {\r\n        const {source, ...baseOpts} = values;\r\n        const opts = {\r\n            ...baseOpts, \r\n            source: new OlOSMSource(source)\r\n        };\r\n        //create new Group Layer with values from Form\r\n        const layer = new OlTileLayer(opts);\r\n        //add layer to the map\r\n        if(parentLayerGroup)\r\n            parentLayerGroup.getLayers().push(layer);\r\n        else\r\n            map.addLayer(layer);\r\n        //execute onFinish\r\n        onFinish && onFinish();\r\n\r\n    },[map, parentLayerGroup, onFinish]);\r\n\r\n    return(\r\n        <NewLayerForm \r\n            layerOpts={layerOpts} \r\n            onFinish={onInternalFinish}\r\n            //GeneralTab={GeneralTab}\r\n            //SourceTab={OSMSourceTab}\r\n            tabs = {[\r\n                {\r\n                    title: \"General\",\r\n                    key: \"general\",\r\n                    isDefault: true,\r\n                    el: GeneralTab\r\n                },\r\n                {\r\n                    title: \"Source\",\r\n                    key: \"source\",\r\n                    el: OSMSourceTab\r\n                }\r\n            ]}\r\n        />\r\n    );\r\n};\r\n\r\nexport default NewOSMLayerForm;\r\n","import React, {useCallback, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Map from 'ol/Map';\r\nimport GroupLayer from 'ol/layer/Group';\r\nimport {Button} from 'antd';\r\nimport Window from '../../../../window/base/Window/Window';\r\nimport NewOSMLayerForm from '../../../../form/layer/new/NewOSMLayerForm/NewOSMLayerForm';\r\n\r\n/**\r\n * <p>Button to create a new <i>OpenStreetMap (OSM)</i> layer in the map.</p>\r\n * <p>\r\n *  Remark: this component also is present in the menu context \r\n *  for <i>Layer Tree</i> component.\r\n * </p>\r\n * <p>\r\n *  Check in the <a href=\"https://ant.design/components/button/\">documentation</a> \r\n *  for additional properties for the button.\r\n * </p>\r\n * \r\n * @visibleName New OSM Layer Button \r\n */\r\nconst NewOSMLayerButton = ({\r\n    map,\r\n    parentLayerGroup = undefined,\r\n    layerOpts = undefined,\r\n    wndStyle, \r\n    children,\r\n    ...otherProps\r\n}) => {\r\n\r\n    //Initialize Image Layer\r\n    const [visibleWnd, setVisibleWnd] = useState(false);\r\n\r\n    /**\r\n     * Handler to close the Window once the OK button\r\n     * on this window is clicked\r\n     */\r\n    const onCloseWindow = () => {\r\n        setVisibleWnd(false);\r\n    };\r\n\r\n    /**\r\n     * Handler to show the Window once the button is Clicked\r\n     */\r\n    const onShowWindow = () => {\r\n        setVisibleWnd(true);\r\n    };\r\n\r\n    const onFinish = useCallback((values) => {\r\n        setVisibleWnd(false);\r\n    }, []);\r\n\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <Button onClick={onShowWindow} {...otherProps}>{children}</Button>\r\n            {\r\n                visibleWnd &&\r\n                <Window\r\n                    title={children}\r\n                    collapsible\r\n                    onClose={onCloseWindow} \r\n                    visible={visibleWnd}\r\n                    style={wndStyle} \r\n                >\r\n                    <NewOSMLayerForm \r\n                        map={map}\r\n                        parentLayerGroup={parentLayerGroup}\r\n                        layerOpts={layerOpts} \r\n                        onFinish={onFinish}\r\n                    />\r\n                </Window>\r\n            }\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nNewOSMLayerButton.propTypes = {\r\n    /**\r\n     * The OpenLayers ol/Map where the new OSM Layer will be created.\r\n     */\r\n    map: PropTypes.instanceOf(Map).isRequired,\r\n\r\n    /**\r\n     * Layer Group where the new OSM Layer will be added.\r\n     * If not provided, the map layer group will be used.\r\n     */\r\n    parentLayerGroup: PropTypes.instanceOf(GroupLayer),\r\n\r\n    /**\r\n     * <p>The default options to be shown in the window for the creation of the OSM Layer.</p>\r\n     * <p>\r\n     *  It is the same used as parameter in the constructor of\r\n     *  <a href=\"https://openlayers.org/en/latest/apidoc/module-ol_layer_Tile-TileLayer.html\">\r\n     *      ol/layer/Tile\r\n     *  </a> \r\n     *  but the <strong>source</strong> key will have the options to create the OSM source, as defined \r\n     *  in the constructor of \r\n     *  <a href=\"https://openlayers.org/en/latest/apidoc/module-ol_source_OSM-OSM.html\">\r\n     *      ol/source/OSM\r\n     *  </a>.\r\n     * </p>\r\n     * <p>If not provided, a default options will be provided by the application.</p>\r\n     * \r\n     */\r\n    layerOpts: PropTypes.object,\r\n\r\n    /**\r\n     * The CSS style to be provided to the window\r\n     */\r\n    wndStyle:PropTypes.object,\r\n\r\n    /**\r\n     * The child node for the Button\r\n     */\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default NewOSMLayerButton;","import React from 'react';\r\nimport {Tabs} from 'antd';\r\nimport {Form, Button, Space} from 'antd';\r\nimport GeneralTab from '../../tabs/general/GeneralTab/GeneralTab';\r\n\r\n\r\nconst layout = {\r\n    labelAlign: 'left',\r\n    labelCol: {\r\n      span: 6,\r\n    },\r\n    wrapperCol: {\r\n      span: 16,\r\n    },\r\n};\r\n\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 10,\r\n        span: 3\r\n    },\r\n};\r\n\r\n/**\r\n * A basic Form for the ol/layer/Base Layer.\r\n */\r\nconst EditLayerForm = ({\r\n    layer,\r\n    onFinish,\r\n    onFinishFailed,\r\n    tabs = [\r\n        {\r\n            title: \"General\",\r\n            key: \"general\",\r\n            isDefault: true,\r\n            el: GeneralTab\r\n        }\r\n    ],\r\n    ...otherProps\r\n}) => {\r\n    const [form] = Form.useForm();\r\n\r\n    //get first key as the default active key for the tab\r\n    let defaultActiveKey = tabs[0].key;\r\n    //get options\r\n    let opts = {};\r\n    tabs.forEach((tab) => {\r\n        opts = {\r\n            ...opts,\r\n            ...tab.el.getOpts(layer)\r\n        };\r\n        if(tab.isDefault === true) {\r\n            defaultActiveKey = tab.key;\r\n        }\r\n    });\r\n    \r\n    const onReset = () => {\r\n        form.resetFields();\r\n    };\r\n\r\n    const onFill = () => {\r\n        form.setFieldsValue(opts);\r\n    };\r\n\r\n    return(\r\n        <Form \r\n            {...layout} \r\n            //layout=\"vertical\"\r\n            form={form} \r\n            name=\"edit-layer-form\" \r\n            onFinish={onFinish}\r\n            initialValues = {opts}\r\n        >\r\n        <Tabs defaultActiveKey={defaultActiveKey}>\r\n            {tabs.map((Tab) => {\r\n                const TabItem = Tab.el;\r\n                return(\r\n                    <Tabs.TabPane tab={Tab.title} key={Tab.key}>\r\n                        <TabItem mode=\"edit\"/>\r\n                    </Tabs.TabPane>\r\n                );\r\n            })}\r\n        </Tabs>\r\n\r\n        <Form.Item \r\n            {...tailLayout}\r\n        >\r\n            <Space>\r\n                <Button  type=\"primary\" htmlType=\"submit\">\r\n                    Submit\r\n                </Button>\r\n                <Button htmlType=\"button\" onClick={onReset}>\r\n                    Reset\r\n                </Button>\r\n                <Button type=\"link\" htmlType=\"button\" onClick={onFill}>\r\n                    Fill form\r\n                </Button>\r\n            </Space>\r\n        </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default EditLayerForm;","import {useCallback} from 'react';\r\nimport EditLayerForm from '../EditLayerForm/EditLayerForm';\r\nimport {normalizeStringInObject} from '../../../../../util/common';\r\n\r\nconst EditDefaultLayerForm = ({\r\n    layer, \r\n    onFinish\r\n}) => {\r\n\r\n    const onInternalFinish = useCallback((values) => {\r\n        const {source, ...properties} = values;\r\n        normalizeStringInObject(properties);\r\n        layer.setProperties(properties);\r\n        \r\n        //execute onFinish\r\n        onFinish && onFinish(values);\r\n    },[layer, onFinish]);\r\n\r\n    return(\r\n        <EditLayerForm \r\n            layer={layer} \r\n            onFinish={onInternalFinish}\r\n        />\r\n    );\r\n};\r\n\r\nexport default EditDefaultLayerForm;\r\n","import {useCallback} from 'react';\r\nimport OlImageWMSSource from 'ol/source/ImageWMS';\r\nimport EditLayerForm from '../EditLayerForm/EditLayerForm.js';\r\nimport GeneralTab from '../../tabs/general/GeneralTab/GeneralTab';\r\nimport ImageWMSSourceTab from '../../tabs/source/ImageWMSSourceTab/ImageWMSSourceTab';\r\nimport {normalizeStringInObject} from '../../../../../util/common';\r\n\r\nconst EditImageWMSLayerForm = ({\r\n    layer, \r\n    onFinish\r\n}) => {\r\n\r\n    const onInternalFinish = useCallback((values) => {\r\n        normalizeStringInObject(values);\r\n        if(values.source) {\r\n            normalizeStringInObject(values.source);\r\n            if(values.source.params)\r\n                normalizeStringInObject(values.source.params);\r\n        }\r\n        const {source, ...properties} = values;\r\n        layer.setProperties(properties);\r\n        if(source) {\r\n            if(layer.getSource() instanceof OlImageWMSSource) {\r\n                layer.getSource().setUrl(source.url);\r\n                for(let key in source.params) {\r\n                    if(source.params[key] === \"\") {\r\n                        source.params[key] = undefined;\r\n                    }\r\n                }\r\n                layer.getSource().updateParams(source.params);\r\n            }\r\n        }\r\n        //execute onFinish\r\n        onFinish && onFinish(values);\r\n        \r\n\r\n    },[layer, onFinish]);\r\n\r\n    return(\r\n        <EditLayerForm \r\n            layer={layer} \r\n            onFinish={onInternalFinish}\r\n            tabs = {[\r\n                {\r\n                    title: \"General\",\r\n                    key: \"general\",\r\n                    isDefault: true,\r\n                    el: GeneralTab\r\n                },\r\n                {\r\n                    title: \"Source\",\r\n                    key: \"source\",\r\n                    el: ImageWMSSourceTab\r\n                }\r\n            ]}\r\n        />\r\n    );\r\n};\r\n\r\nexport default EditImageWMSLayerForm;\r\n","import {useCallback} from 'react';\r\nimport OlTileWMSSource from 'ol/source/TileWMS';\r\nimport EditLayerForm from '../EditLayerForm/EditLayerForm';\r\nimport GeneralTab from '../../tabs/general/GeneralTab/GeneralTab';\r\nimport TileWMSourceTab  from '../../tabs/source/TileWMSSourceTab/TileWMSSourceTab';\r\nimport {normalizeStringInObject} from '../../../../../util/common';\r\n\r\nconst EditTileWMSLayerForm = ({\r\n    layer, \r\n    onFinish\r\n}) => {\r\n\r\n    const onInternalFinish = useCallback((values) => {\r\n        normalizeStringInObject(values);\r\n        if(values.source) {\r\n            normalizeStringInObject(values.source);\r\n            if(values.source.params)\r\n                normalizeStringInObject(values.source.params);\r\n        }\r\n        const {source, ...properties} = values;\r\n        layer.setProperties(properties);\r\n        if(source) {\r\n            if(layer.getSource() instanceof OlTileWMSSource) {\r\n                //set urls\r\n                if(source.url && Array.isArray(source.url)) {\r\n                    layer.getSource().setUrls( source.url);\r\n                }\r\n                else if(source.url && (typeof source.url === 'string' || source.url instanceof String)) {\r\n                    layer.getSource().setUrls(source.url.split(','));\r\n                }\r\n                //set attributions\r\n                if(source.attributions &&  Array.isArray(source.attributions)) {\r\n                    layer.getSource().setAttributions(source.attributions);\r\n                }\r\n                else if(source.attributions && (typeof source.attributions === 'string' \r\n                    || source.attributions instanceof String)) {\r\n                    layer.getSource().setAttributions(source.attributions.split(','));\r\n                }\r\n                //set params\r\n                if(source.params) layer.getSource().updateParams(source.params);\r\n            }\r\n        }\r\n        //execute onFinish\r\n        onFinish && onFinish(values);\r\n        \r\n\r\n    },[layer, onFinish]);\r\n\r\n    return(\r\n        <EditLayerForm \r\n            layer={layer} \r\n            onFinish={onInternalFinish}\r\n            tabs = {[\r\n                {\r\n                    title: \"General\",\r\n                    key: \"general\",\r\n                    isDefault: true,\r\n                    el: GeneralTab\r\n                },\r\n                {\r\n                    title: \"Source\",\r\n                    key: \"source\",\r\n                    el: TileWMSourceTab\r\n                }\r\n            ]}\r\n        />\r\n    );\r\n};\r\n\r\nexport default EditTileWMSLayerForm;\r\n","import {useCallback} from 'react';\r\nimport OlOSMSource from 'ol/source/OSM';\r\nimport EditLayerForm from '../EditLayerForm/EditLayerForm';\r\nimport GeneralTab from '../../tabs/general/GeneralTab/GeneralTab';\r\nimport OSMSourceTab  from '../../tabs/source/OSMSourceTab/OSMSourceTab';\r\n\r\nconst EditOSMLayerForm = ({\r\n    layer, \r\n    onFinish\r\n}) => {\r\n\r\n    const onInternalFinish = useCallback((values) => {\r\n        const {source, ...properties} = values;\r\n        layer.setProperties(properties);\r\n        if(source) {\r\n            if(layer.getSource() instanceof OlOSMSource) {\r\n                //set urls\r\n                if(source.url && Array.isArray(source.url)) {\r\n                    layer.getSource().setUrls( source.url);\r\n                }\r\n                else if(source.url && (typeof source.url === 'string' || source.url instanceof String)) {\r\n                    layer.getSource().setUrls(source.url.split(','));\r\n                }\r\n                //set attributions\r\n                if(source.attributions &&  Array.isArray(source.attributions)) {\r\n                    layer.getSource().setAttributions(source.attributions);\r\n                }\r\n                else if(source.attributions && (typeof source.attributions === 'string' \r\n                    || source.attributions instanceof String)) {\r\n                    layer.getSource().setAttributions(source.attributions.split(','));\r\n                }\r\n            }\r\n        }\r\n        //execute onFinish\r\n        onFinish && onFinish(values);\r\n    },[layer, onFinish]);\r\n\r\n    return(\r\n        <EditLayerForm \r\n            layer={layer} \r\n            onFinish={onInternalFinish}\r\n            tabs = {[\r\n                {\r\n                    title: \"General\",\r\n                    key: \"general\",\r\n                    isDefault: true,\r\n                    el: GeneralTab\r\n                },\r\n                {\r\n                    title: \"Source\",\r\n                    key: \"source\",\r\n                    el: OSMSourceTab\r\n                }\r\n            ]}\r\n        />\r\n    );\r\n};\r\n\r\nexport default EditOSMLayerForm;\r\n","import React from 'react';\r\nimport ImageWMSSource from 'ol/source/ImageWMS';\r\nimport TileWMSSource from 'ol/source/TileWMS';\r\nimport OSMSource from 'ol/source/OSM';\r\nimport OlLayerGroup from 'ol/layer/Group';\r\nimport Window from '../../base/Window/Window';\r\nimport EditDefaultLayerForm from '../../../form/layer/edit/EditDefaultLayerForm/EditDefaultLayerForm';\r\nimport EditWMSLayerForm from '../../../form/layer/edit/EditImageWMSLayerForm/EditImageWMSLayerForm';\r\nimport EditTileWMSLayerForm from '../../../form/layer/edit/EditTileWMSLayerForm/EditTileWMSLayerForm';\r\nimport EditOSMLayerForm from '../../../form/layer/edit/EditOSMLayerForm/EditOSMLayerForm';\r\n\r\nconst LayerWnd = ({\r\n    title=\"Layer\",\r\n    visible=false,\r\n    onOk,\r\n    layer,\r\n    ...otherProps\r\n}) => {\r\n\r\n    const createLayerForm = () => {\r\n        if(layer instanceof OlLayerGroup) {\r\n            return(\r\n                <EditDefaultLayerForm \r\n                    layer={layer} \r\n                    onFinish={onOk}\r\n                />\r\n            );\r\n        }\r\n        else if(layer.getSource() instanceof ImageWMSSource) {\r\n            return (\r\n                <EditWMSLayerForm \r\n                    layer={layer} \r\n                    onFinish={onOk}\r\n                />\r\n            );\r\n        }\r\n        else if(layer.getSource() instanceof TileWMSSource) {\r\n            return (\r\n                <EditTileWMSLayerForm \r\n                    layer={layer} \r\n                    onFinish={onOk}\r\n                />\r\n            );\r\n        }\r\n        else if(layer.getSource() instanceof OSMSource) {\r\n            return (\r\n                <EditOSMLayerForm \r\n                    layer={layer} \r\n                    onFinish={onOk}\r\n                />\r\n            );\r\n        }\r\n        \r\n        return (\r\n            <EditDefaultLayerForm \r\n                layer={layer} \r\n                onFinish={onOk}\r\n            />\r\n        )\r\n    };\r\n\r\n    return (\r\n        <Window\r\n            title={title}\r\n            collapsible\r\n            //onOk={onOk}\r\n            visible={visible}\r\n            {...otherProps}\r\n        >\r\n            {createLayerForm()}\r\n      </Window>\r\n    );\r\n};\r\n\r\nexport default LayerWnd;","import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport BaseLayer from 'ol/layer/Base';\r\nimport {Button} from 'antd';\r\nimport LayerWnd from '../../../../window/layer/LayerWnd/LayerWnd';\r\n\r\n/**\r\n * <p>\r\n *  Button to edit the Layer.\r\n *  Once the user clicks the button, a window will be\r\n *  shown with the current properties of the layer and \r\n *  the user can modify them.\r\n * </p>\r\n  * <p>\r\n *  Remark: this component also is present in the menu context \r\n *  for <i>Layer Tree</i> component.\r\n * </p>\r\n * <p>\r\n *  Check in the <a href=\"https://ant.design/components/button/\">documentation</a> \r\n *  for additional properties for the button.\r\n * </p>\r\n * \r\n * @visibleName Edit Layer Button \r\n */\r\nconst EditLayerButton = ({\r\n    layer,\r\n    wndStyle, \r\n    children,\r\n    ...otherProps\r\n}) => {\r\n\r\n    const [visibleWnd, setVisibleWnd] = useState(false);\r\n\r\n    /**\r\n     * Handler to close the Window once the OK button\r\n     * on this window is clicked\r\n     */\r\n    const onCloseWindow = () => {\r\n        setVisibleWnd(false);\r\n    };\r\n\r\n    /**\r\n     * Handler to show the Window once the button is Clicked\r\n     */\r\n    const onShowWindow = () => {\r\n        setVisibleWnd(true);\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Button onClick={onShowWindow} {...otherProps}>{children}</Button>\r\n            {\r\n                visibleWnd &&\r\n                <LayerWnd \r\n                    onOk={onCloseWindow}\r\n                    onClose={onCloseWindow} \r\n                    layer={layer} \r\n                    style={wndStyle} \r\n                    visible={visibleWnd}\r\n                />\r\n            }\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nEditLayerButton.propTypes = {\r\n    /**\r\n     * The OpenLayers Layer to be edited.\r\n     */\r\n    layer: PropTypes.instanceOf(BaseLayer).isRequired,\r\n\r\n    /**\r\n     * The CSS style to be provided to the window\r\n     */\r\n    wndStyle:PropTypes.object,\r\n\r\n    /**\r\n     * The child node for the Button\r\n     */\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default EditLayerButton;","import React, {useCallback} from 'react';\r\nimport {Map} from 'ol';\r\nimport Base from 'ol/layer/Base';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from 'antd';\r\n\r\n/**\r\n * <p>Button to remove a layer from the map.</p>\r\n * <p>Remark: this component also is present in the <i>Layer Tree</i> component.</p>\r\n * <p>\r\n *  Check in the <a href=\"https://ant.design/components/button/\">documentation</a> \r\n *  for additional properties for the button.\r\n * </p>\r\n * \r\n * @visibleName Remove Layer Button \r\n */\r\nconst RemoveLayerButton = ({\r\n    map,\r\n    layer,\r\n    children,\r\n    ...otherProps\r\n}) => {\r\n    const onClickHandler = useCallback((event) => {\r\n        if(map && layer) {\r\n           if (layer.getSource && layer.getSource().clear) {\r\n                layer.getSource().clear(true);\r\n           }\r\n           map.removeLayer(layer);\r\n        }\r\n    }, [layer, map]);\r\n\r\n    return(\r\n        <Button {...otherProps} onClick={onClickHandler}>\r\n            {children}\r\n        </Button>\r\n    );\r\n};\r\n\r\nRemoveLayerButton.propTypes = {\r\n    /**\r\n     * The OpenLayers ol/Map from where the layer will be removed.\r\n     */\r\n    map: PropTypes.instanceOf(Map).isRequired,\r\n\r\n    /**\r\n     * Layer to be removed.\r\n     */\r\n    layer: PropTypes.instanceOf(Base),\r\n\r\n    /**\r\n     * The child node for the Button\r\n     */\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default RemoveLayerButton;","import React, {useCallback} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport { Button } from 'antd';\r\n\r\n/**\r\n * <p>\r\n *  Button to clear all the features in a <i>ol/layer/Vector</i> \r\n *  vector layer.\r\n * </p>\r\n * <p>Remark:This component is present in the <i>WfsFeatureGrid</i> component.</p>\r\n * <p>\r\n *  Check in the <a href=\"https://ant.design/components/button/\">documentation</a> \r\n *  for additional properties for the button.\r\n * </p>\r\n * \r\n * @visibleName Clear All Features Button \r\n */\r\nconst ClearAllFeaturesButton = (props) => {\r\n    const {vectorLayer, children, ...otherProps} = props;\r\n    const onClickHandler = useCallback((event) => {\r\n        if(vectorLayer) {\r\n           vectorLayer.getSource().clear();\r\n        }\r\n    }, [vectorLayer]);\r\n\r\n    return(\r\n        <Button {...otherProps} onClick={onClickHandler}>\r\n            {children}\r\n        </Button>\r\n    );\r\n};\r\n\r\nClearAllFeaturesButton.propTypes = {\r\n    /**\r\n     * The <i>ol/layer/Vector</i> layer from where all the features will\r\n     * be cleared. \r\n     */\r\n    vectorlayer: PropTypes.instanceOf(VectorLayer),\r\n\r\n    /**\r\n     * The child node for the button\r\n     */\r\n    children: PropTypes.node\r\n\r\n}\r\n\r\nexport default ClearAllFeaturesButton;","import {useCallback, useState, useEffect} from 'react';\r\nimport OlOverlay from 'ol/Overlay';\r\nimport OlInteractionDraw from 'ol/interaction/Draw';\r\nimport OlStyleStyle from 'ol/style/Style';\r\nimport OlStyleFill from 'ol/style/Fill';\r\nimport OlStyleCircle from 'ol/style/Circle';\r\nimport OlSourceVector from 'ol/source/Vector';\r\nimport './interactions.css';\r\n\r\n\r\nconst defaultStyle = new OlStyleStyle({\r\n    image: new OlStyleCircle({\r\n        radius: 1,\r\n        fill: new OlStyleFill({\r\n            color: '#ffcc33'\r\n        })\r\n    })\r\n});\r\n\r\nconst useGetPointGeomInteraction = (\r\n    map, \r\n    msg = 'Select Point or &lt;esc&gt; to Cancel',\r\n    style = defaultStyle,\r\n    \r\n) => {\r\n    \r\n    /**\r\n     * The ol.geometry to be shown during the operation and\r\n     * to be returned to caller.\r\n     */\r\n    const [geometry, setGeometry] = useState(null);\r\n\r\n    const drawStartHandler = useCallback((evt) => {\r\n        if(evt.feature && evt.feature.getGeometry() !== geometry) {\r\n            setGeometry(evt.feature.getGeometry());\r\n        }\r\n    }, [geometry]);\r\n\r\n    const drawEndHandler = useCallback(() => {\r\n        setIsRunning(false);\r\n    }, []);\r\n\r\n    const drawAbortHandler = useCallback(() => {\r\n        //console.log('drawAbortHandler');\r\n    }, []);\r\n\r\n    /**\r\n     * Method to create Drawing Interaction\r\n     * The interaction will start once it is added\r\n     * to the map. Once the interaction is started,\r\n     * a temporary feature will be shown\r\n     * \r\n     * @param {} map \r\n     * @param {*} source \r\n     */\r\n    const createInteraction = useCallback((map, source) => {\r\n\t\tconst newInteraction = new OlInteractionDraw(\r\n\t\t\t{\r\n\t\t\t\tsource: source,\r\n\t\t\t\ttype: 'Point',\r\n\t\t\t\tstyle: style\r\n\t\t\t}\r\n        );\r\n        //register handler for 'drawend' event in the interaction\r\n        newInteraction.on('drawend', drawEndHandler);\r\n        //register handler for 'drawstart' handler\r\n        newInteraction.on('drawstart', drawStartHandler);\r\n        //register handler for 'drawabort' handler\r\n        newInteraction.on('drawabort', drawAbortHandler);\r\n\r\n        newInteraction.setActive(false);\r\n        //map.addInteraction(newInteraction);\r\n\r\n        return newInteraction;\r\n    }, [drawEndHandler, drawStartHandler, drawAbortHandler, style]);\r\n\r\n    /**\r\n     * The Interaction created initially\r\n     * @type {ol.interaction.Draw}\r\n     */\r\n    const interaction = useState( createInteraction(map, new OlSourceVector()))[0];\r\n\r\n     /**\r\n     * State to indicate if the interaction is running\r\n     */\r\n    const [isRunning, setIsRunning] = useState(false);\r\n\r\n    /**\r\n     * Method to create the tooltip.\r\n     * \r\n     */\r\n    const createTooltip = useCallback(() => {\r\n        const tooltipEl = document.createElement('div');\r\n        tooltipEl.className = 'tooltip-hidden';\r\n        //create overlay tooltip\r\n        const tooltip = new OlOverlay({\r\n            element: tooltipEl,\r\n            offset: [15, 0],\r\n            positioning: 'center-left'\r\n        });\r\n        return tooltip;\r\n    }, []);\r\n\r\n\r\n    /**\r\n     * Overlay to show the tooltip messages.\r\n     *  @type {ol.Overlay}\r\n     */\r\n    //const [tooltip, setTooltip] = useState(createTooltip(map));\r\n    const tooltip = useState(createTooltip())[0];\r\n    \r\n\r\n    /**\r\n     * Handler to handle the event 'mouseout' for the \r\n     * ol.Viewport. This event is fired once the mouse\r\n     * is outside the viewport area.\r\n     * This method will hide the tooltip once the mouse\r\n     * is outside the viewport area.\r\n     */\r\n    const mouseOutHandler = useCallback(() => {\r\n         if(tooltip && tooltip.getElement()) {\r\n            tooltip.getElement().innerHTML = \"\";\r\n            tooltip.getElement().className = 'tooltip-hidden'\r\n        }\r\n    }, [tooltip]);\r\n\r\n    /**\r\n     * Handler to handle the event 'pointermove' fired\r\n     * by ol.Map.\r\n     * Triggered when a pointer is moved. Note that on touch devices \r\n     * this is triggered when the map is panned, so is not the same as \r\n     * mousemove.\r\n     * This handler will reposition the tooltip in the current mouse\r\n     * position\r\n     */\r\n    const pointerMoveHandler = useCallback((evt) => {\r\n        if (evt.dragging) {\r\n            return;\r\n        }\r\n\r\n        if(tooltip && tooltip.getElement()) {\r\n            tooltip.getElement().innerHTML = msg;\r\n            tooltip.getElement().className = 'tooltip';\r\n        }\r\n        \r\n        if(tooltip) tooltip.setPosition(evt.coordinate);\r\n\r\n    },[tooltip, msg]);\r\n\r\n    /**\r\n     * Callback to start the interaction\r\n     */\r\n    const start = useCallback(() => {\r\n        setIsRunning(true);\r\n    }, []);\r\n\r\n    /**\r\n     * Callback to stop the interaction\r\n     */\r\n    const stop = useCallback(() => {\r\n        setIsRunning(false);\r\n    }, []);\r\n\r\n    /**\r\n     * Event handler to cancel the interaction \r\n     * if the user press the <esc> key\r\n     */\r\n    const escKeyHandler = useCallback((evt) => {\r\n        if(evt.keyCode === 27) {\r\n            stop();\r\n        }\r\n    }, [stop]);\r\n\r\n    const clear = useCallback(() => {\r\n        setGeometry(null);\r\n    }, []);\r\n\r\n    const cleanup = useCallback(() => {\r\n        document.removeEventListener('keydown', escKeyHandler);\r\n        interaction.setActive(false);\r\n        map.removeOverlay(tooltip);\r\n        map.getViewport().removeEventListener('mouseout', mouseOutHandler);\r\n        map.un('pointermove', pointerMoveHandler);\r\n        mouseOutHandler();\r\n    }, [interaction, map, tooltip, pointerMoveHandler, mouseOutHandler, escKeyHandler])\r\n\r\n    /**\r\n     * Effect to start/stop the interaction based\r\n     * on the 'isRunning' state\r\n     */\r\n    useEffect(() => {\r\n    if(isRunning) {\r\n        document.addEventListener('keydown', escKeyHandler);\r\n        interaction.setActive(true);\r\n        map.addOverlay(tooltip);\r\n        map.getViewport().addEventListener('mouseout', mouseOutHandler);\r\n        map.on('pointermove', pointerMoveHandler);\r\n    }\r\n    else {\r\n        cleanup();\r\n    }\r\n    return () => {\r\n        cleanup();\r\n    }\r\n   }, [isRunning, interaction, map, tooltip, cleanup, pointerMoveHandler, mouseOutHandler, escKeyHandler]);\r\n\r\n    /**\r\n     * Effect to add/remove the interaction from the map\r\n     */\r\n    useEffect(() => {\r\n        map.addInteraction(interaction);\r\n        return () => {\r\n            map.removeInteraction(interaction);\r\n        }\r\n    }, [createInteraction, interaction, map]);\r\n\r\n    return {start, stop, clear, geometry, isRunning};\r\n\r\n};\r\n\r\nexport default useGetPointGeomInteraction;","import GeoJSON from 'ol/format/GeoJSON';\r\n\r\n\r\nconst prettifyXml = (source) => {\r\n    let xmlDoc = source;\r\n    if(typeof source === 'string') {\r\n        xmlDoc = new DOMParser().parseFromString(source, 'application/xml');\r\n    }\r\n    const xsltDoc = new DOMParser().parseFromString([\r\n        // describes how we want to modify the XML - indent everything\r\n        '<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">',\r\n        '  <xsl:strip-space elements=\"*\"/>',\r\n        '  <xsl:template match=\"para[content-style][not(text())]\">', // change to just text() to strip space in text nodes\r\n        '    <xsl:value-of select=\"normalize-space(.)\"/>',\r\n        '  </xsl:template>',\r\n        '  <xsl:template match=\"node()|@*\">',\r\n        '    <xsl:copy><xsl:apply-templates select=\"node()|@*\"/></xsl:copy>',\r\n        '  </xsl:template>',\r\n        '  <xsl:output indent=\"yes\"/>',\r\n        '</xsl:stylesheet>',\r\n    ].join('\\n'), 'application/xml');\r\n\r\n    const xsltProcessor = new XSLTProcessor();    \r\n    xsltProcessor.importStylesheet(xsltDoc);\r\n    const resultDoc = xsltProcessor.transformToDocument(xmlDoc);\r\n    const resultXml = new XMLSerializer().serializeToString(resultDoc);\r\n    return resultXml;\r\n};\r\n\r\n\r\n/**\r\n * Method to parse the features from GetFeatureInfo response having the \r\n * info_format = 'application/json'\r\n */\r\nexport const parseFeatureInfoJSON = (source) => {\r\n    const features = new GeoJSON().readFeatures(source);\r\n\t/*\r\n    console.log('newFeatures', features);\r\n    features.forEach((feature) => {\r\n        console.log('feature', feature);\r\n    });\r\n\t*/\r\n    return features;\r\n};\r\n\r\n/**\r\n * Method to parse the features from GetFeatureInfo response having the \r\n * info_format = 'text/xml'\r\n */\r\nexport const parseFeatureInfoTextXml = (source) => {\r\n    let xmlStr = prettifyXml(source);\r\n    const feature =  {};\r\n    const properties = {}\r\n    properties['text/xml'] = xmlStr;\r\n    feature['getProperties'] = () => properties;\r\n    feature['getId'] = () => `text/xml.${Date.now()}`;\r\n    \r\n    return [feature];\r\n}\r\n\r\n/**\r\n * Method to parse the features from GetFeatureInfo response having the \r\n * info_format = 'application/vnd.esri.wms_raw_xml'\r\n'\r\n */\r\nexport const parseEsriWmsRawXml = (source) => {\r\n\r\n    let doc = null;\r\n    if(typeof source === 'string') {\r\n        const parser = new DOMParser();\r\n        doc = parser.parseFromString(source, \"application/xml\");\r\n    }\r\n    else {\r\n        doc = source;\r\n    }\r\n    const features = [];\r\n    const featureInfoCollectionEl = doc.getElementsByTagNameNS('http://www.esri.com/wms','FeatureInfoCollection');\r\n    for(let k = 0; k < featureInfoCollectionEl.length; ++k) {\r\n        const layerName = featureInfoCollectionEl[k].getAttribute('layername');\r\n        const featureInfosEl = featureInfoCollectionEl[k].getElementsByTagNameNS('http://www.esri.com/wms','FeatureInfo');\r\n        for(let i = 0; i < featureInfosEl.length; ++i) {\r\n            const feature = {};\r\n            const properties = {};\r\n            const fieldsEl = featureInfosEl[i].getElementsByTagNameNS('http://www.esri.com/wms','Field');\r\n            for(let j = 0; j < fieldsEl.length; ++j) {\r\n                const fieldName = fieldsEl[j].getElementsByTagNameNS('http://www.esri.com/wms','FieldName')[0].childNodes[0].nodeValue;\r\n                const fieldValue = fieldsEl[j].getElementsByTagNameNS('http://www.esri.com/wms','FieldValue')[0].childNodes[0].nodeValue;\r\n                properties[fieldName] = fieldValue;\r\n                \r\n            }\r\n            feature['getProperties'] = () => properties;\r\n            feature['getId'] = () => `${layerName}.${i}`;\r\n            features.push(feature);\r\n        }\r\n        return features;\r\n    }\r\n}\r\n\r\n/**\r\n * Method to parse the features from GetFeatureInfo response having the \r\n * info_format = 'application/vnd.esri.wms_featureinfo_xml'\r\n */\r\nexport const parseEsriWmsFeatureInfoXml = (source) => {\r\n    let doc = null;\r\n    if(typeof source === 'string') {\r\n        const parser = new DOMParser();\r\n        doc = parser.parseFromString(source, \"application/xml\");\r\n    }\r\n    else {\r\n        doc = source;\r\n    }\r\n    const features = [];\r\n    const featureInfoCollectionEl = doc.getElementsByTagNameNS('http://www.esri.com/wms', 'FeatureInfoCollection');\r\n    for(let k = 0; k < featureInfoCollectionEl.length; ++k) {\r\n        const layerName = featureInfoCollectionEl[k].getAttribute('layername');\r\n        const featureInfosEl = featureInfoCollectionEl[k].getElementsByTagNameNS('http://www.esri.com/wms','FeatureInfo');\r\n        for(let i = 0; i < featureInfosEl.length; ++i) {\r\n            const feature = {};\r\n            const properties = {};\r\n            const fieldsEl = featureInfosEl[i].getElementsByTagNameNS('http://www.esri.com/wms',\"Field\");\r\n            for(let j = 0; j < fieldsEl.length; ++j) {\r\n                const fieldName = fieldsEl[j].getElementsByTagNameNS('http://www.esri.com/wms','FieldName')[0].innerHTML;\r\n                const fieldValue = fieldsEl[j].getElementsByTagNameNS('http://www.esri.com/wms','FieldValue')[0].innerHTML;\r\n                properties[fieldName] = fieldValue;\r\n                \r\n            }\r\n            feature['getProperties'] = () => properties;\r\n            feature['getId'] = () => `${layerName}.${i}`;\r\n            features.push(feature);\r\n        }\r\n        return features;\r\n    }\r\n};\r\n\r\nexport const parseFeatureInfo = (source, infoFormat) => {\r\n    switch(infoFormat) {\r\n        case 'application/json':\r\n            return parseFeatureInfoJSON(source);\r\n        case 'application/vnd.esri.wms_featureinfo_xml':\r\n            return  parseEsriWmsFeatureInfoXml(source);\r\n        case 'application/vnd.esri.wms_raw_xml':\r\n            return parseEsriWmsRawXml(source);\r\n        case 'text/xml':\r\n            return parseFeatureInfoTextXml(source);\r\n        default:\r\n            return parseFeatureInfoJSON(source);\r\n    }\r\n}","import {useState, useCallback} from 'react';\r\nimport {message} from 'antd';\r\nimport {parseFeatureInfo} from '../../util/featureinfo';\r\n\r\nimport {getLeafVisibleLayers} from '../../util/map';\r\n\r\nconst useWmsGetFeatureInfo = () => {\r\n    const [errors, setErrors] = useState(null);\r\n    const [features, setFeatures] = useState(null);\r\n\r\n    const clearRequest = useCallback(() => {\r\n        setErrors(null);\r\n        setFeatures(null);\r\n    }, []);\r\n\r\n    const sendRequest = useCallback((\r\n        map, \r\n        layers, \r\n        position, \r\n        fetchOpts = {\r\n            method: 'GET'\r\n        }\r\n        ) => {\r\n        //retrieve coordinate from the point geometry\r\n        const coordinate = position.getCoordinates();\r\n        //retrieve all the active leaf leayers\r\n        let leafLayers = getLeafVisibleLayers(layers);\r\n        \r\n        if(leafLayers.length === 0) {\r\n            message.info(\"Please, activate the layers to retrieve the features!!!\");\r\n            return;\r\n        }\r\n        //retrieve map view and its resolution\r\n        const view = map.getView();\r\n        const viewResolution = view.getResolution();\r\n        const proj = view.getProjection();\r\n        const newStates = [];\r\n        leafLayers.forEach((lyr, index) => {\r\n            newStates.push(true);\r\n        });\r\n        \r\n        fetchOpts = {\r\n            ...fetchOpts, \r\n            method: 'GET',\r\n        };\r\n        leafLayers.forEach((lyr, index) => {\r\n            const wmsSource = lyr.getSource();\r\n            if(!wmsSource.getFeatureInfoUrl) return;\r\n            let info_format =  lyr.getSource().getParams().INFO_FORMAT;\r\n            console.log('info_format:', info_format);\r\n            if(!info_format) info_format = 'application/json';\r\n            const url = wmsSource.getFeatureInfoUrl(coordinate, \r\n                viewResolution, proj, \r\n                {'INFO_FORMAT': info_format}\r\n            );\r\n            console.log('WMS GetFeatureInfo Request:', url);\r\n            fetch(url, fetchOpts)\r\n            .then(response => {\r\n                if(!response.ok) {\r\n                   throw new Error(response);\r\n                }\r\n                if(info_format === 'application/json')\r\n                    return response.json();\r\n                else\r\n                    return response.text();\r\n            })\r\n            .then(responseData => {\r\n                console.log('WFS GetFeature Response:', responseData);\r\n                \r\n                const newFeatures = parseFeatureInfo(responseData, info_format);\r\n                setFeatures((prevFeatures) => {\r\n                    if(prevFeatures && newFeatures) {\r\n                        return [...prevFeatures, ...newFeatures];\r\n                    }\r\n                    return newFeatures;\r\n                });\r\n            })\r\n            .catch(error => {\r\n                setErrors((prevErrors) => {\r\n                    if(prevErrors) {\r\n                        return [...prevErrors, error];\r\n                    }\r\n                    return [error];\r\n                });\r\n                message.info(error.message);\r\n            });\r\n        });\r\n\r\n    }, []);\r\n\r\n    return [sendRequest, clearRequest, errors, features];\r\n};\r\n\r\nexport default useWmsGetFeatureInfo;","import React, {useState, useCallback, useEffect} from 'react';\r\nimport {Table, Tabs} from 'antd';\r\nimport OlGeomGeometry from 'ol/geom/Geometry';\r\nimport Window from '../../base/Window/Window';\r\n\r\n\r\nconst FeaturePropertiesWnd = ({\r\n    title,\r\n    style= {width:500},\r\n    features,\r\n    onClose,\r\n    onCancel,\r\n    visible,\r\n    ...otherProps\r\n}) => {\r\n\r\n    /**\r\n     * Method to build the Table datasources from the array of features\r\n     * \r\n     */\r\n    const buildDataSourcesFromFromFeatures = useCallback((features) => {\r\n        if(!features || features.length === 0) return [[]];\r\n        const dataSources = [];\r\n        features.forEach((feature) => {\r\n            const properties = feature.getProperties();\r\n            let idx = 0;\r\n            const dataSource = [];\r\n            for(const property in properties) {\r\n                const item = {}\r\n                if(!(properties[property] instanceof OlGeomGeometry)) {\r\n                    item['key'] = idx.toString();\r\n                    item['name'] = property;\r\n                    item['value'] = properties[property];\r\n                    idx = idx + 1;\r\n                    dataSource.push(item);\r\n                }\r\n            }\r\n            dataSources.push(dataSource);\r\n        });\r\n        \r\n        return dataSources;\r\n    }, []);\r\n\r\n    const getFeatureIds = useCallback((features) => {\r\n        const ids = [];\r\n        if(!features || features.length === 0) return ids;\r\n        features.forEach((feature) => {\r\n            ids.push(feature.getId());\r\n        });\r\n        return ids;\r\n    },[]);\r\n\r\n    const [dataSources, setDataSources] = useState(buildDataSourcesFromFromFeatures(features));\r\n    const [featureIds, setFeatureIds] = useState(getFeatureIds(features));\r\n\r\n    \r\n    const columns = [\r\n        {\r\n          title: 'Name',\r\n          dataIndex: 'name',\r\n          key: 'name',\r\n        },\r\n        {\r\n          title: 'Value',\r\n          dataIndex: 'value',\r\n          key: 'value',\r\n        },\r\n    ];\r\n    const scroll = {scrollToFirstRowOnChange:true, x:400, y: 400};\r\n    useEffect(() => {\r\n        if(features && features.length > 0) {\r\n            setDataSources(buildDataSourcesFromFromFeatures(features));\r\n            setFeatureIds(getFeatureIds(features));\r\n        }\r\n    }, [buildDataSourcesFromFromFeatures, features, getFeatureIds]);\r\n\r\n    return (\r\n        <Window \r\n            title={title} \r\n            collapsible \r\n            visible={visible} \r\n            onCancel={onCancel} \r\n            onClose={onClose} \r\n            style={style}\r\n            {...otherProps}\r\n        >\r\n            <Tabs defaultActiveKey={['0']} /*style={{ height: 400}}*/ tabPosition=\"top\">\r\n                {\r\n                    dataSources.map((dataSource, idx) => {\r\n                        return(\r\n                            <Tabs.TabPane tab={featureIds[idx]} key={idx.toString()}>\r\n                                <Table \r\n                                    dataSource={dataSource} \r\n                                    columns={columns}  \r\n                                    size='middle'\r\n                                    tableLayout='auto'\r\n                                    pagination= {false}\r\n                                    scroll={scroll}\r\n                                    bordered\r\n                                    sticky\r\n                                />\r\n                            </Tabs.TabPane>\r\n                        );\r\n                    })\r\n                }\r\n            </Tabs>\r\n        </Window>     \r\n    );\r\n};\r\n\r\nexport default FeaturePropertiesWnd;","import React, {useCallback, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Map} from 'ol';\r\nimport BaseLayer from 'ol/layer/Base';\r\nimport {message, Button} from 'antd';\r\nimport useGetPointGeomInteraction from '../../../../hooks/interactions/useGetPointGeomInteraction';\r\nimport useWmsGetFeatureInfo from '../../../../hooks/wms/useWmsGetFeatureInfo';\r\nimport FeaturePropertiesWnd from '../../../window/feature/FeaturePropertiesWnd/FeaturePropertiesWnd';\r\n\r\n/**\r\n * Button to retrieve the WMS properties from the feature(s) using the\r\n * WMS GetFeatureInfo request\r\n * @visibleName WMS GetFeatureInfo Button\r\n */\r\nconst WmsGetFeatureInfoButton = (props) => {\r\n    const {\r\n        map, \r\n        layers, \r\n        //icon=<InfoOutlined/>,\r\n        //shape=\"circle\", \r\n        fetchOpts, \r\n        msg, \r\n        wndStyle,\r\n        children,\r\n    ...otherProps\r\n    } = props;\r\n    const interaction = useGetPointGeomInteraction(map, msg);\r\n    const [sendRequest, clearRequest, errors, features] = useWmsGetFeatureInfo();\r\n    if(errors) console.log('WMS GetFeatureInfo Errors: ', errors);\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        interaction.start();\r\n    }, [interaction]);\r\n\r\n    const onClose = () => {\r\n        clearRequest()\r\n    };\r\n\r\n\r\n    /**\r\n     * UseEffect to retrieve the point from the user and send \r\n     * the WMS GetFeatureInfo request\r\n     */\r\n    useEffect(() => {\r\n        if(interaction.geometry && !interaction.isRunning) {\r\n            const geometry = interaction.geometry;\r\n            interaction.clear();\r\n            //send request\r\n            sendRequest(map, layers, geometry, fetchOpts);\r\n        }\r\n    }, [interaction, fetchOpts, layers, map, sendRequest]);\r\n\r\n    /**\r\n     * UseEffect to retrieve the result from the WMS\r\n     * GetFeatureInfo and show in the dialog properties\r\n     */\r\n    useEffect(() => {\r\n        if(features) {\r\n            if(features.length === 0) {\r\n                message.info('No feature(s) selected!');\r\n            }\r\n        }\r\n\r\n    }, [features]);\r\n\r\n    return(\r\n        <>\r\n            <Button \r\n                {...otherProps} \r\n                onClick={onClickHandler} \r\n                disabled={interaction.isRunning}\r\n            >\r\n                {children}\r\n            </Button>\r\n            {\r\n                (features && features.length > 0) &&\r\n                <FeaturePropertiesWnd \r\n                    title={children || 'Info'}  \r\n                    features={features}\r\n                    visible={features && features.length > 0}\r\n                    onClose={onClose}\r\n                    style={wndStyle}\r\n                />\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nWmsGetFeatureInfoButton.propTypes = {\r\n    /**\r\n     * The OpenLayers ol/Map where the layers will be rendered.\r\n     */\r\n    map: PropTypes.instanceOf(Map).isRequired,\r\n\r\n    /**\r\n     * The layers to retrieve the feature information\r\n     */\r\n    layers: PropTypes.arrayOf(PropTypes.instanceOf(BaseLayer)).isRequired,\r\n\r\n    /**\r\n     * Additional options to be used for the \r\n     * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\">fetch API</a>.\r\n     */\r\n    fetchOptions: PropTypes.object,\r\n\r\n    /**\r\n     * Message to be shown requesting the user to select the feature\r\n     */\r\n    msg: PropTypes.string,\r\n\r\n    /**\r\n     * A CSS Style to render the window\r\n     */\r\n    wndStyle:PropTypes.object,\r\n\r\n    /**\r\n     * The child node for the button\r\n     */\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default WmsGetFeatureInfoButton;","import React, {useEffect}  from 'react';\r\nimport {Menu} from 'antd';\r\nimport {FileAddOutlined  , EditOutlined  , DeleteOutlined , InfoCircleOutlined , ClearOutlined   } from '@ant-design/icons';\r\nimport OlLayerImage from 'ol/layer/Image';\r\nimport OlLayerGroup from 'ol/layer/Group';\r\nimport OlLayerVector from 'ol/layer/Vector';\r\nimport TreeContextMenu from '../TreeContextMenu/TreeContextMenu';\r\nimport NewImageWMSLayerButton from '../../button/layer/new/NewImageWMSLayerButton/NewImageWMSLayerButton';\r\nimport NewTileWMSLayerButton from '../../button/layer/new/NewTileWMSLayerButton/NewTileWMSLayerButton';\r\nimport NewGroupLayerButton from '../../button/layer/new/NewGroupLayerButton/NewGroupLayerButton';\r\nimport NewOSMLayerButton from '../../button/layer/new/NewOSMLayerButton/NewOSMLayerButton';\r\nimport EditLayerButton from '../../button/layer/edit/EditLayerButton/EditLayerButton';\r\nimport RemoveLayerButton from '../../button/layer/remove/RemoveLayerButton/RemoveLayerButton';\r\nimport ClearAllFeaturesButton from '../../button/feature/ClearAllFeaturesButton/ClearAllFeaturesButton';\r\nimport WmsGetFeatureInfoButton from '../../button/wms/WmsGetFeatureInfoButton/WmsGetFeatureInfoButton';\r\n\r\nconst TreeLayerContextMenu = ({\r\n    map,\r\n    node,\r\n    xPos,\r\n    yPos,\r\n    showMenu\r\n\r\n}) => {\r\n\r\n   \r\n    if(!node) return null;\r\n\r\n    const createAddWMSLayerButton = (layer) => {\r\n        if(layer && layer instanceof OlLayerGroup) {\r\n            return(\r\n                <Menu.Item icon={<FileAddOutlined   />}>\r\n                    <NewImageWMSLayerButton \r\n                        size=\"small\"\r\n                        type=\"text\"\r\n                        map={map} \r\n                        parentLayerGroup={layer}\r\n                        wndStyle={{visibility: 'visible', width: 700, maxHeight: 500}}\r\n                    >\r\n                        New WMS Layer\r\n                    </NewImageWMSLayerButton>\r\n                </Menu.Item>\r\n            );\r\n        }\r\n        return null;\r\n    }\r\n\r\n    const createAddTileWMSLayerButton = (layer) => {\r\n        if(layer && layer instanceof OlLayerGroup) {\r\n            return(\r\n                <Menu.Item icon={<FileAddOutlined   />}>\r\n                    <NewTileWMSLayerButton \r\n                        size=\"small\"\r\n                        type=\"text\"\r\n                        map={map} \r\n                        parentLayerGroup={layer}\r\n                        wndStyle={{visibility: 'visible', width: 700, maxHeight: 500}}\r\n                    >\r\n                        New Tile WMS Layer\r\n                    </NewTileWMSLayerButton>\r\n                </Menu.Item>\r\n            );\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // const createAddWMSLayerButton = (layer) => {\r\n    //     if(layer && layer instanceof OlLayerGroup) {\r\n    //         return(\r\n    //             <Menu.Item icon={<FileAddOutlined   />}>\r\n    //                 <AddImageWMSLayerButton \r\n    //                     size=\"small\"\r\n    //                     type=\"text\"\r\n    //                     map={map} \r\n    //                     layerGroup={layer}\r\n    //                     wndStyle={{visibility: 'visible', width: 700, maxHeight: 500}}\r\n    //                 >\r\n    //                     Add WMS Layer\r\n    //                 </AddImageWMSLayerButton>\r\n    //             </Menu.Item>\r\n    //         );\r\n    //     }\r\n    //     return null;\r\n    // }\r\n\r\n    const createAddGroupLayerButton = (layer) => {\r\n        if(layer && layer instanceof OlLayerGroup) {\r\n            return(\r\n                <Menu.Item icon={<FileAddOutlined   />}>\r\n                    <NewGroupLayerButton \r\n                        size=\"small\"\r\n                        type=\"text\"\r\n                        map={map} \r\n                        parentLayerGroup={layer}\r\n                        wndStyle={{visibility: 'visible', width: 700, maxHeight: 500}}\r\n                    >\r\n                        New Group Layer\r\n                    </NewGroupLayerButton>\r\n                </Menu.Item>\r\n            );\r\n        }\r\n        return null;\r\n    }\r\n\r\n    const createAddOSMLayerButton = (layer) => {\r\n        if(layer && layer instanceof OlLayerGroup) {\r\n            return(\r\n                <Menu.Item icon={<FileAddOutlined   />}>\r\n                    <NewOSMLayerButton \r\n                        size=\"small\"\r\n                        type=\"text\"\r\n                        map={map} \r\n                        parentLayerGroup={layer}\r\n                        wndStyle={{visibility: 'visible', width: 700, maxHeight: 500}}\r\n                    >\r\n                        New OSM Layer\r\n                    </NewOSMLayerButton>\r\n                </Menu.Item>\r\n            );\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // const createAddGroupLayerButton = (layer) => {\r\n    //     if(layer && layer instanceof OlLayerGroup) {\r\n    //         return(\r\n    //             <Menu.Item icon={<FileAddOutlined   />}>\r\n    //                 <AddGroupLayerButton \r\n    //                     size=\"small\"\r\n    //                     type=\"text\"\r\n    //                     map={map} \r\n    //                     layerGroup={layer}\r\n    //                     wndStyle={{visibility: 'visible', width: 700, maxHeight: 500}}\r\n    //                 >\r\n    //                     Add Group Layer\r\n    //                 </AddGroupLayerButton>\r\n    //             </Menu.Item>\r\n    //         );\r\n    //     }\r\n    //     return null;\r\n    // }\r\n\r\n    /*\r\n    const createAddLayerSubMenu = (layer) => {\r\n        if(layer && layer instanceof OlLayerGroup) {\r\n            return(\r\n                <Menu.SubMenu title=\"Add Layer\" icon={<FileAddOutlined   />}>\r\n                    {createAddWMSLayerButton(layer)}\r\n                    {createAddGroupLayerButton(layer)}\r\n                </Menu.SubMenu>\r\n            );\r\n        }\r\n        return null;\r\n    }\r\n    */\r\n\r\n    \r\n    // const createAddLayerItemGroup = (layer) => {\r\n    //     if(layer && layer instanceof OlLayerGroup) {\r\n    //         return(\r\n    //             <Menu.ItemGroup title=\"Add Layer\">\r\n    //                 {/* <FileAddTwoTone/> */}\r\n    //                 {createAddWMSLayerButton(layer)}\r\n    //                 {createAddGroupLayerButton(layer)}\r\n    //             </Menu.ItemGroup>\r\n    //         );\r\n    //     }\r\n    //     return null;\r\n    // }\r\n    \r\n\r\n    const createEditLayerButton = (layer) => {\r\n        if(layer) {\r\n            return (\r\n                <Menu.Item icon={<EditOutlined />}>\r\n                    <EditLayerButton \r\n                        size=\"small\" \r\n                        type=\"text\"\r\n                        wndStyle={{visibility: 'visible', width: 700, maxHeight: 500}}\r\n                        layer={layer}\r\n                    >\r\n                        Edit Layer\r\n                    </EditLayerButton>\r\n                </Menu.Item>\r\n            );\r\n        }\r\n    }\r\n\r\n    const createRemoveLayerButton = (layer) => {\r\n        if(layer && layer !== map.getLayerGroup()) {\r\n            return(\r\n                <Menu.Item icon={<DeleteOutlined />}>\r\n                    <RemoveLayerButton size='small' type=\"text\" map={map} layer={node.ol_layer}>\r\n                        Remove Layer\r\n                    </RemoveLayerButton>\r\n                </Menu.Item>\r\n            );\r\n        }\r\n        return null;\r\n    }\r\n\r\n    const createClearLayerButton = (layer) => {\r\n        if(layer instanceof OlLayerVector) {\r\n            return (\r\n                <Menu.Item icon={<ClearOutlined  />}>\r\n                    <ClearAllFeaturesButton size='small' type=\"text\" map={map} vectorLayer={node.ol_layer}>\r\n                        Clear Layer\r\n                    </ClearAllFeaturesButton>\r\n                </Menu.Item>\r\n            );\r\n        }\r\n        return null;\r\n    };\r\n\r\n    const createGetFeatureInfoButton = (map, layer) => {\r\n        if(layer instanceof OlLayerImage || layer instanceof OlLayerGroup) {\r\n            return (\r\n                <Menu.Item icon={<InfoCircleOutlined />} selectable={false}>\r\n                    <WmsGetFeatureInfoButton \r\n                        size='small' \r\n                        type=\"text\"\r\n                        map={map}\r\n                        layers={[layer]}\r\n                        wndStyle={{visibility: 'visible', width:600}}\r\n                    >\r\n                        Feature Info\r\n                    </WmsGetFeatureInfoButton>\r\n                 </Menu.Item>\r\n            );\r\n        }\r\n        return null;\r\n    };\r\n\r\n    let overlay = (\r\n        <Menu mode=\"vertical\">\r\n            {createEditLayerButton(node.ol_layer)}\r\n            {createRemoveLayerButton(node.ol_layer)}\r\n            {createClearLayerButton(node.ol_layer)}\r\n            {createGetFeatureInfoButton(map, node.ol_layer)}\r\n            <Menu.Divider/>\r\n            <Menu.Divider/>\r\n            {createAddGroupLayerButton(node.ol_layer)}\r\n            {createAddWMSLayerButton(node.ol_layer)}\r\n            {createAddTileWMSLayerButton(node.ol_layer)}\r\n            {createAddOSMLayerButton(node.ol_layer)}\r\n            {/* {createAddLayerSubMenu(node.ol_layer)} */}\r\n            {/* {createAddLayerItemGroup(node.ol_layer)} */}\r\n        </Menu>\r\n    );\r\n\r\n   \r\n    // overlay = (\r\n    //     <React.Fragment>\r\n    //         {createEditLayerButton(node.ol_layer)}\r\n    //         {createRemoveLayerButton(node)}\r\n    //         {createClearLayerButton(node.ol_layer)}\r\n    //         {createGetFeatureInfoButton(map, node.ol_layer)}\r\n    //         {createAddWMSLayerButton(node.ol_layer)}\r\n    //         {createAddGroupLayerButton(node.ol_layer)}\r\n    //     </React.Fragment>\r\n    // );\r\n\r\n    // overlay = (\r\n    //     <Menu mode=\"vertical\">\r\n    //         <Menu.Item>\r\n    //             {createEditLayerButton(node.ol_layer)}\r\n    //         </Menu.Item>\r\n    //         <Menu.Item>\r\n    //             {createRemoveLayerButton(node)} \r\n    //         </Menu.Item>\r\n    //         <Menu.Item>\r\n    //             {createClearLayerButton(node.ol_layer)}\r\n    //         </Menu.Item>\r\n    //         <Menu.Item>\r\n    //             {createGetFeatureInfoButton(map, node.ol_layer)}    \r\n    //         </Menu.Item>\r\n    //         <Menu.Divider/>\r\n    //         <Menu.SubMenu title=\"Add Layer\">\r\n    //             <Menu.Item>\r\n    //                 {createAddWMSLayerButton(node.ol_layer)}\r\n    //             </Menu.Item>\r\n    //             <Menu.Item>\r\n    //                 {createAddGroupLayerButton(node.ol_layer)}\r\n    //             </Menu.Item>\r\n    //         </Menu.SubMenu>\r\n    //     </Menu>\r\n    // );\r\n\r\n    return(\r\n            <TreeContextMenu \r\n                overlay={overlay}\r\n                node = {node}\r\n                xPos={xPos}\r\n                yPos={yPos}\r\n                showMenu={showMenu}\r\n            />\r\n    );\r\n};\r\n\r\nexport default TreeLayerContextMenu;","import {useState, useCallback, useEffect} from 'react';\r\n\r\nconst useTreeContextMenu = () => {\r\n    const [xPos, setXPos] = useState(\"0px\");\r\n    const [yPos, setYPos] = useState(\"0px\");\r\n    const [showMenu, setShowMenu] = useState(false);\r\n    const [rightClickedNode, setRightClickedNode] = useState(null);\r\n\r\n    /**\r\n     * Method to handle the right click in the tree node view\r\n     * This method will store the needes states to show the\r\n     * context menu\r\n     */\r\n    const onRightClickNode = useCallback((e) => {\r\n        const node = e.node;\r\n        const event = e.event;\r\n\r\n        setXPos(`${event.clientX}px`);\r\n        setYPos(`${event.clientY}px`);\r\n\r\n        // setXPos(`${event.pageX}px`);\r\n        // setYPos(`${event.pageY}px`);\r\n        setShowMenu(true);\r\n        setRightClickedNode(node);\r\n        \r\n    }, [setXPos, setYPos]);\r\n\r\n    /**\r\n     * Handle to set the menu context invisible once \r\n     * the user clicks in the context menu or outside it\r\n     */\r\n    const handleClick = useCallback(() => {\r\n        showMenu && setShowMenu(false);\r\n    }, [showMenu ]);\r\n\r\n    /**\r\n     * Effect to register/unregister the click mouse\r\n     * event responsible to make invisible to context\r\n     * menu\r\n     */\r\n    useEffect(() => {\r\n        document.addEventListener(\"click\", handleClick);\r\n        return () => {\r\n          document.removeEventListener(\"click\", handleClick);\r\n        };\r\n    }, [handleClick]);\r\n\r\n    return { xPos, yPos, showMenu, rightClickedNode, onRightClickNode};\r\n};\r\n\r\nexport default useTreeContextMenu;\r\n","import React, {useState, useEffect, useCallback} from 'react';\r\nimport {Map as OlMap} from 'ol';\r\nimport PropTypes from 'prop-types';\r\nimport {Tree} from 'antd';\r\nimport OlLayerGroup from 'ol/layer/Group';\r\nimport TreeLayerContextMenu from '../../../contextMenu/TreeLayerContextMenu/TreeLayerContextMenu';\r\nimport {getAllLayers, getLayerPositionInfo} from '../../../../util/map';\r\nimport useTreeContextMenu from '../../../../hooks/ui/useTreeContextMenu';\r\n\r\n/**\r\n * <p>Tree to show the layers in a layer group. This component\r\n * presents several functionalities:</p>\r\n * <ol>\r\n * <li>The user will be able to switch the layer visibility to on/off\r\n * using the checkbox control.</li>\r\n * <li>Re-order the layers using the drag/drop functionality.</li>\r\n * <li>If the user right click the mouse in a layer node, a context\r\n * menu will be shown to provide several possibilities to \r\n * interact with layer (create a  new layer, edit, remove, etc...)</li>\r\n * </ol>\r\n * @visibleName Layer Tree\r\n */\r\nconst LayerTree = ({\r\n        map,\r\n        layerGroup = map.getLayerGroup(),\r\n        //className = null,\r\n        draggable = true,\r\n        checkable = true,\r\n        onExpand = false,\r\n        filterFunc = null,\r\n        titleFunc = null\r\n    }) => {\r\n    \r\n    const [treeNodes, setTreeNodes] = useState([]);\r\n    const [checkedKeys, setCheckedKeys] = useState([]);\r\n    //const [rightClickedNode, setRightClickedNode] = useState(null);\r\n    //const [showMenuContext, setShowMenuContext] = useState(false);\r\n\r\n    const { xPos, yPos, showMenu, rightClickedNode, onRightClickNode} = useTreeContextMenu();\r\n    let rootLayerName = null;\r\n    if(!map.getLayerGroup().get('name')) {\r\n        rootLayerName = 'Layers';\r\n        map.getLayerGroup().set('name', rootLayerName);\r\n    }\r\n    else {\r\n        rootLayerName = map.getLayerGroup().get('name');\r\n    }\r\n    \r\n   \r\n    /*\r\n    const onRightClickNode = useCallback((event) => {\r\n        setRightClickedNode(event.node);\r\n        setShowMenuContext(true);\r\n    }, []);\r\n    */\r\n\r\n    /*\r\n    const onFinishMenuContext = useCallback(() => {\r\n        setShowMenuContext(false);\r\n        setRightClickedNode(null);\r\n    }, []);\r\n    */\r\n\r\n  /**\r\n   * Get the flat array of ol_uids from visible non groupLayers.\r\n   *\r\n   * @return The visible ol_uids.\r\n   */\r\n    const getVisibleOlUids = useCallback(() => {\r\n        let layers = getAllLayers(layerGroup, (layer) => {\r\n            return !(layer instanceof OlLayerGroup) && layer.getVisible();\r\n        });\r\n        layers = filterFunc ? layers.filter(filterFunc) : layers;\r\n        return layers.map(l => l.ol_uid.toString());\r\n    }, [filterFunc, layerGroup]);\r\n    \r\n\r\n    /**\r\n     * Creates a treeNode for the input layer.\r\n     * \r\n     * @param {ol.layer.Base} layer \r\n     * @return The corresponding LayerTreeNode element.\r\n     */\r\n    const treeNodeFromLayer = useCallback((layer) => {\r\n        let childNodes =  [];\r\n\r\n        if (layer instanceof OlLayerGroup) {\r\n            let childLayers = layer.getLayers().getArray()\r\n            childLayers = filterFunc ? childLayers.filter(filterFunc) : childLayers;\r\n            childNodes = childLayers.map((childLayer) => {\r\n                return treeNodeFromLayer(childLayer);\r\n            });\r\n            childNodes.reverse();\r\n        } \r\n        const treeNode = (\r\n            <Tree.TreeNode \r\n                key={layer.ol_uid.toString()} \r\n                title={titleFunc ? titleFunc(layer) : layer.get('name')}\r\n                ol_layer={layer}\r\n            >\r\n                {childNodes.length > 0 && childNodes}\r\n            </Tree.TreeNode>\r\n        );\r\n        //treeNode._ol_layer = layer;\r\n\r\n        return treeNode;\r\n    }, [filterFunc, titleFunc]);\r\n    \r\n    /**\r\n     * Creates TreeNodes from a given layergroup and sets the treeNodes in the state.\r\n     * \r\n     * @param {ol.layer.Group} groupLayer A Layer Group\r\n     */\r\n    const treeNodesFromLayerGroup = useCallback((groupLayer) => {\r\n        let layers = groupLayer.getLayers().getArray();\r\n        layers = filterFunc ? layers.filter(filterFunc) : layers;\r\n        const newTreeNodes = layers.map((layer) => treeNodeFromLayer(layer));\r\n        newTreeNodes.reverse();\r\n        setTreeNodes(newTreeNodes);\r\n    }, [filterFunc, treeNodeFromLayer]);\r\n\r\n    /**\r\n     * \r\n     * @param {ol.MapEvent} evt \r\n     */\r\n    const rebuildTreeNodes = useCallback((evt) => {\r\n        treeNodesFromLayerGroup(layerGroup);\r\n        setCheckedKeys(getVisibleOlUids());\r\n    }, [layerGroup, getVisibleOlUids, treeNodesFromLayerGroup]);\r\n\r\n    /**\r\n     * Event Handler to handle 'change:name' event\r\n     * \r\n     */\r\n    const onLayerChangeName = useCallback((evt) => {\r\n        if(evt.target.get('name') !== evt.oldValue) {\r\n            rebuildTreeNodes();\r\n        }\r\n    }, [rebuildTreeNodes]);\r\n\r\n    /**\r\n     * Register the 'change:name' event handler for the layer.\r\n     * if the layer is a group, the related children will have \r\n     * also the event handler registered.\r\n     * \r\n     * @param {ol.layer.Base} layerOrGroup A corresponding layer or group\r\n     */\r\n    const registerOnLayerChangeName = useCallback((layerOrGroup) => {\r\n        const filterFunction = filterFunc ? filterFunc : () => true;\r\n        if(layerOrGroup instanceof OlLayerGroup) {\r\n            //register layer group\r\n            if(filterFunction(layerOrGroup)) {\r\n                layerOrGroup.on('change:name', onLayerChangeName);\r\n            }\r\n            //register childrens\r\n            const layers = layerOrGroup.getLayers();\r\n            layers.forEach((layer) => {\r\n                if(filterFunction(layer)) {\r\n                    registerOnLayerChangeName(layer);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            //register leaf\r\n            if(filterFunction(layerOrGroup)) {\r\n                layerOrGroup.on('change:name', onLayerChangeName);\r\n            }\r\n        }\r\n\r\n    }, [filterFunc, onLayerChangeName]);\r\n\r\n\r\n    /**\r\n     * Unregister the 'change:name' event handler for the layer.\r\n     * if the layer is a group, the related children will have \r\n     * also the event handler unregistered.\r\n     * \r\n     * @param {ol.layer.Base} layerOrGroup A corresponding layer or group\r\n     */\r\n    const unRegisterOnLayerChangeName = useCallback((layerOrGroup) => {\r\n        const filterFunction = filterFunc ? filterFunc : () => true;\r\n        if(layerOrGroup instanceof OlLayerGroup) {\r\n            //unregister layer group\r\n            if(filterFunction(layerOrGroup)) {\r\n                layerOrGroup.un('change:name', onLayerChangeName);\r\n            }\r\n            //register childrens\r\n            const layers = layerOrGroup.getLayers();\r\n            layers.forEach((layer) => {\r\n                if(filterFunction(layer)) {\r\n                    unRegisterOnLayerChangeName(layer);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            //register leaf\r\n            if(filterFunction(layerOrGroup)) {\r\n                layerOrGroup.un('change:name', onLayerChangeName);\r\n            }\r\n        }\r\n\r\n    }, [filterFunc, onLayerChangeName]);\r\n\r\n    /**\r\n      * Event handler to react to 'change:visible' event\r\n      * \r\n      * @param {*} evt \r\n      */\r\n     const onLayerChangeVisible = useCallback((evt) => {\r\n        const newCheckedKeys = getVisibleOlUids();\r\n        setCheckedKeys(newCheckedKeys);\r\n        rebuildTreeNodes();\r\n    }, [getVisibleOlUids, rebuildTreeNodes]);\r\n\r\n    /**\r\n     * Register the 'change:visible' event handler for the layer.\r\n     * if the layer is a group, the related children will have \r\n     * also the event handler registered.\r\n     * \r\n     * @param {ol.layer.Base} layerOrGroup A corresponding layer or group\r\n     */\r\n    const registerOnLayerChangeVisible = useCallback((layerOrGroup) => {\r\n        const filterFunction = filterFunc ? filterFunc : () => true;\r\n        if(layerOrGroup instanceof OlLayerGroup) {\r\n            //register layer group\r\n            if(filterFunction(layerOrGroup)) {\r\n                layerOrGroup.on('change:visible', onLayerChangeVisible);\r\n            }\r\n            //register childrens\r\n            const layers = layerOrGroup.getLayers();\r\n            layers.forEach((layer) => {\r\n                if(filterFunction(layer)) {\r\n                    registerOnLayerChangeVisible(layer);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            //register leaf\r\n            if(filterFunction(layerOrGroup)) {\r\n                layerOrGroup.on('change:visible', onLayerChangeVisible);\r\n            }\r\n        }\r\n\r\n    }, [filterFunc, onLayerChangeVisible]);\r\n\r\n    /**\r\n     * Unregister the 'change:visible' event handler for the layer.\r\n     * if the layer is a group, the related children will have \r\n     * also the event handler unregistered.\r\n     * \r\n     * @param {ol.layer.Base} layerOrGroup A corresponding layer or group\r\n     */\r\n    const unRegisterOnLayerChangeVisible = useCallback((layerOrGroup) => {\r\n        const filterFunction = filterFunc ? filterFunc : () => true;\r\n        if(layerOrGroup instanceof OlLayerGroup) {\r\n            //unregister layer group\r\n            if(filterFunction(layerOrGroup)) {\r\n                layerOrGroup.un('change:visible', onLayerChangeVisible);\r\n            }\r\n            //register childrens\r\n            const layers = layerOrGroup.getLayers();\r\n            layers.forEach((layer) => {\r\n                if(filterFunction(layer)) {\r\n                    unRegisterOnLayerChangeVisible(layer);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            //register leaf\r\n            if(filterFunction(layerOrGroup)) {\r\n                layerOrGroup.un('change:visible', onLayerChangeVisible);\r\n            }\r\n        }\r\n\r\n    }, [filterFunc, onLayerChangeVisible]);\r\n\r\n    /**\r\n     * Register recursivelly the event handlers add/remove/change\r\n     * for all the group layers.\r\n     * \r\n     * Pre-definition of registerCollectionHandlers to manage circular\r\n     * dependencies. See re-definition below\r\n     */\r\n\r\n    let registerCollectionHandlers = null;\r\n\r\n    /**\r\n     * Unregister recursivelly the event handlers add/remove/change\r\n     * for all the group layers.\r\n     * \r\n     * Pre-definition of unRegisterCollectionHandlers to manage circular\r\n     * dependencies. See re-definition below\r\n     */\r\n    let unRegisterCollectionHandlers = null;\r\n\r\n    /**\r\n     * Event handler called once a layer is added\r\n     * to the collection.\r\n     * \r\n     * This handler will register:\r\n     * (a) the event handlers for add/remove/change in group layer\r\n     * (b) the 'change:visible' event handler for the layer.\r\n     */\r\n    const onCollectionAdd = useCallback((evt) => {\r\n        const filterFunction = filterFunc ? filterFunc : () => true;\r\n        if(filterFunction(evt.element)) {\r\n            if (evt.element instanceof OlLayerGroup) {\r\n                registerCollectionHandlers && registerCollectionHandlers(evt.element);\r\n            }\r\n            registerOnLayerChangeVisible(evt.element);\r\n            registerOnLayerChangeName(evt.element);\r\n        }\r\n        rebuildTreeNodes();\r\n    }, [registerCollectionHandlers, registerOnLayerChangeVisible, \r\n        registerOnLayerChangeName, filterFunc, rebuildTreeNodes]);\r\n\r\n    /**\r\n     * Event handler called once a layer is removed\r\n     * from the collection.\r\n     * \r\n     * This handler will unregister:\r\n     * (a) the event handlers for add/remove/change in group layer\r\n     * (b) the 'change:visible' event handler for the layer.\r\n     */\r\n    const onCollectionRemove = useCallback((evt) => {\r\n        const filterFunction = filterFunc ? filterFunc : () => true;\r\n        if(filterFunction(evt.element)) {\r\n            if (evt.element instanceof OlLayerGroup) {\r\n                unRegisterCollectionHandlers && unRegisterCollectionHandlers(evt.element);\r\n            }\r\n            unRegisterOnLayerChangeVisible(evt.element);\r\n            unRegisterOnLayerChangeName(evt.element);\r\n        }\r\n        rebuildTreeNodes();\r\n\r\n    }, [unRegisterCollectionHandlers, unRegisterOnLayerChangeVisible, \r\n        filterFunc, rebuildTreeNodes, unRegisterOnLayerChangeName]);\r\n\r\n    const onCollectionChangeLayers = useCallback((evt) => {\r\n        //const filterFunc = filterFunc ? filterFunc : () => true;\r\n        //TODO: Needed to handle???\r\n    }, []);\r\n\r\n\r\n    /**\r\n     * Register recursivelly the event handlers add/remove/change\r\n     * for all the group layers.\r\n     * \r\n     * @param {ol.layer.Group} groupLayer \r\n     */\r\n    registerCollectionHandlers = useCallback((groupLayer) => {\r\n        const filterFunction = filterFunc ? filterFunc : () => true;\r\n        const collection = groupLayer.getLayers();\r\n        if(filterFunction(groupLayer)) {\r\n            collection.on('add', onCollectionAdd);\r\n            collection.on('remove', onCollectionRemove);\r\n            groupLayer.on('change:layers', onCollectionChangeLayers);\r\n        }\r\n\r\n        //register handler in all the child group layers\r\n        collection.forEach((layer) => {\r\n        if (layer instanceof OlLayerGroup) {\r\n            registerCollectionHandlers(layer);\r\n        }\r\n    });\r\n\r\n    }, [filterFunc, onCollectionAdd, onCollectionRemove, onCollectionChangeLayers, registerCollectionHandlers]);\r\n\r\n    \r\n\r\n    /**\r\n     * Unregister recursivelly the event handlers add/remove/change\r\n     * for all the group layers.\r\n     * \r\n     * @param {ol.layer.Group} groupLayer \r\n     */\r\n    unRegisterCollectionHandlers = useCallback((groupLayer) => {\r\n        const filterFunction = filterFunc ? filterFunc : () => true;\r\n        const collection = groupLayer.getLayers();\r\n        if(filterFunction(groupLayer)) {\r\n            collection.un('add', onCollectionAdd);\r\n            collection.un('remove', onCollectionRemove);\r\n            groupLayer.un('change:layers', onCollectionChangeLayers);\r\n        }\r\n\r\n        //register handler in all the child group layers\r\n        collection.forEach((layer) => {\r\n        if (layer instanceof OlLayerGroup) {\r\n            unRegisterCollectionHandlers(layer);\r\n        }\r\n    });\r\n\r\n    }, [filterFunc, onCollectionAdd, onCollectionRemove, onCollectionChangeLayers, unRegisterCollectionHandlers]);\r\n\r\n    \r\n\r\n    /**\r\n     * Sets the layer visibility. Calls itself\r\n     * recursively for group layers.\r\n     * \r\n     * @param {ol.layer.Base} layer \r\n     * @param {boolean} visibility \r\n     */\r\n    const setLayerVisibility = useCallback((layer, visibility) => {\r\n        if (layer instanceof OlLayerGroup) {\r\n          layer.getLayers().forEach((subLayer) => {\r\n            setLayerVisibility(subLayer, visibility);\r\n          });\r\n        } \r\n        else {\r\n            if (layer) {\r\n                layer.setVisible(visibility);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    /**\r\n     * Callback Method to be called once the check box is\r\n     * checked in the tree view.\r\n     * @param {Array(string)} checkedKeys \r\n     * @param {{checked:bool}} e \r\n     */\r\n    const onCheck = useCallback((checkedKeys,  e) => {\r\n        const { checked } = e;\r\n        //const key = e.node.key;\r\n        //const layer = getLayerByOlUid(map, key);\r\n        const layer = e.node.ol_layer;\r\n    \r\n        setLayerVisibility(layer, checked);\r\n    }, [setLayerVisibility]);\r\n\r\n    /**\r\n     * The callback method for the drop event in the tree view.\r\n     * As result, the corresponding layers will be re-ordered in the \r\n     * map and in the tree.\r\n     * \r\n     * @param e The ant-d tree event object for this event. See ant-d docs\r\n     */\r\n    const onDrop = useCallback((e) => {\r\n        //const dragLayer = getLayerByOlUid(map, e.dragNode.key);\r\n        const dragLayer = e.dragNode.ol_layer;\r\n        const dragInfo = getLayerPositionInfo(dragLayer, map);\r\n        const dragCollection = dragInfo.groupLayer.getLayers();\r\n\r\n        const dropLayer = e.node.ol_layer;\r\n        const dropPos = e.node.pos.split('-');\r\n        const location = e.dropPosition - Number(dropPos[dropPos.length - 1]);\r\n    \r\n        dragCollection.remove(dragLayer);\r\n    \r\n        const dropInfo = getLayerPositionInfo(dropLayer, map);\r\n        const dropPosition = dropInfo.position;\r\n        const dropCollection = dropInfo.groupLayer.getLayers();\r\n    \r\n        // drop before node\r\n        if (location === -1) {\r\n          if (dropPosition === dropCollection.getLength() - 1) {\r\n            dropCollection.push(dragLayer);\r\n          } else {\r\n            dropCollection.insertAt(dropPosition + 1, dragLayer);\r\n          }\r\n          // drop on node\r\n        } else if (location === 0) {\r\n          if (dropLayer instanceof OlLayerGroup) {\r\n            dropLayer.getLayers().push(dragLayer);\r\n          } else {\r\n            dropCollection.insertAt(dropPosition + 1, dragLayer);\r\n          }\r\n          // drop after node\r\n        } else if (location === 1) {\r\n          dropCollection.insertAt(dropPosition, dragLayer);\r\n        }\r\n    \r\n        rebuildTreeNodes();\r\n      }, [map, rebuildTreeNodes]);\r\n\r\n      /**\r\n       * The callback method to be called after the tree\r\n       * is expanded.\r\n       * This method will call rebuildTreeNodes to avoid\r\n       * sync issues.\r\n       * \r\n       * @param {string[]} expandedKeys The expanded keys\r\n       * @param {Object} info The info about the expanded keys.\r\n       *                      check ant-d doc for more details\r\n       */\r\n      const onExpandTree = useCallback((expandedKeys, info) => {\r\n        rebuildTreeNodes();\r\n    \r\n        if (onExpand) {\r\n          onExpandTree(expandedKeys, info);\r\n        }\r\n      }, [onExpand, rebuildTreeNodes]);\r\n\r\n\r\n    /**\r\n     * Register 'change:visible' for the group layer and all its\r\n     * childrens\r\n     */\r\n    useEffect(() => {\r\n        registerOnLayerChangeVisible(layerGroup);\r\n\r\n        //clean-up:\r\n        return () => unRegisterOnLayerChangeVisible(layerGroup);\r\n    }, [layerGroup, registerOnLayerChangeVisible, unRegisterOnLayerChangeVisible]);\r\n\r\n    /**\r\n     * Register 'change:name' for the group layer and all its\r\n     * childrens\r\n     */\r\n    useEffect(() => {\r\n        registerOnLayerChangeName(layerGroup);\r\n\r\n        //clean-up:\r\n        return () => unRegisterOnLayerChangeName(layerGroup);\r\n    }, [layerGroup, registerOnLayerChangeName, unRegisterOnLayerChangeName]);\r\n\r\n    /**\r\n     * Register collection event handlers for the group layer and \r\n     * its child group layers \r\n     */\r\n    useEffect(() => {\r\n        registerCollectionHandlers(layerGroup);\r\n        //clean-up:\r\n        return () => unRegisterCollectionHandlers(layerGroup);\r\n    }, [layerGroup, registerCollectionHandlers, unRegisterCollectionHandlers]);\r\n\r\n    /**\r\n     * rebuild the tree nodes\r\n     */\r\n    useEffect(() => {\r\n        rebuildTreeNodes();\r\n    }, [rebuildTreeNodes]);\r\n    \r\n\r\n    return(\r\n        <React.Fragment>\r\n            <Tree \r\n                checkedKeys={checkedKeys} \r\n                draggable = {draggable}\r\n                checkable = {checkable}\r\n                //showLine\r\n                onCheck={onCheck}\r\n                onDrop={onDrop}\r\n                onExpand={onExpandTree}\r\n                onRightClick={onRightClickNode}\r\n            >\r\n                <Tree.TreeNode key=\"root\" title={rootLayerName} ol_layer={map.getLayerGroup()}>\r\n                    {treeNodes}\r\n                </Tree.TreeNode>\r\n            </Tree>\r\n            {/* { showMenu && */}\r\n                <TreeLayerContextMenu \r\n                    map={map}\r\n                    node={rightClickedNode}\r\n                    xPos={xPos}\r\n                    yPos={yPos}\r\n                    showMenu={showMenu}\r\n                />\r\n            {/* } */}\r\n        </React.Fragment>\r\n    );\r\n\r\n};\r\n\r\nLayerTree.propTypes = {\r\n\r\n    /**\r\n     * The OpenLayers ol/Map having the layers to be shown\r\n     * in the TreeLayer.\r\n     */\r\n    map: PropTypes.instanceOf(OlMap).isRequired,\r\n\r\n    /**\r\n     * The OpenLayers ol/layer/Group having the layers to be shown\r\n     * in the TreeLayer.\r\n     * If not provided, all the layers from the <u>map</u> will\r\n     * be shown.\r\n     */\r\n    layerGroup: PropTypes.instanceOf(OlLayerGroup),\r\n\r\n    /**\r\n     * If true, the user can re-order the layers through the\r\n     * drag/drop in the LayerTree.\r\n     */\r\n    draggable: PropTypes.bool,\r\n\r\n    /**\r\n     * If true, the user will be able to switch the layer visibility\r\n     * on/off for the layer using the check-box control in the TreeLayer.\r\n     */\r\n    checkable: PropTypes.bool,\r\n\r\n    /**\r\n     * Function to filter the layers to be shown in the TreeLayer.\r\n     * This function should have as parameter the layer and if it \r\n     * returns true, the layer will be shown; otherwise the layer\r\n     * will not be included in the TreeLayer. Check for the\r\n     * javascript Array.filter function for additional parameters.\r\n     * If not provided, all the layers present in the \r\n     * <u>layerGroup</u> will be shown.\r\n     */\r\n    filterFunc: PropTypes.func,\r\n\r\n    /**\r\n     * A function to change the title of the Layer to be shown\r\n     * in the TreeLayer. This function will receive as parameter\r\n     * the layer and returns a string for the title. Some function\r\n     * implementations should be, for example, to set the first \r\n     * letter of the layer name in uppercase and or to replace\r\n     * \"_\" by a single space. This function will not change the layer\r\n     * name and it will only affect how the layer name will be \r\n     * shown in the TreeLayer.\r\n     */\r\n    titleFunc: PropTypes.func\r\n};\r\n\r\nexport default LayerTree;","import {useCallback, useState, useRef} from 'react';\r\nimport {Space, Select, Input, Button} from 'antd'\r\nimport Window from '../../base/Window/Window';\r\nimport {getCoordinateLabel, coordinateToString} from '../../../../util/map';\r\n\r\nconst CoordinateWnd = ({\r\n    title=\"Coordinate\",\r\n    visible=true,\r\n    onClose,\r\n    map,\r\n    coordinate,\r\n    coordinateProj = map.getView().getProjection(),\r\n    projs=[map.getView().getProjection()],\r\n    style\r\n    \r\n}) => {\r\n\r\n\r\n    const inputCoordinateEl = useRef(null);\r\n    const [curProjCode, setCurProjCode] = useState(map.getView().getProjection().getCode());\r\n    const [curStrCoordinate, setCurStrCoordinate] = useState(coordinateToString(coordinate, coordinateProj.getCode(), coordinateProj.getCode()));\r\n\r\n    /**\r\n     * Handler called once the projection is changed in the combo box\r\n     */\r\n    const onProjChangeHandler = useCallback((value) => {\r\n        setCurProjCode(value);\r\n        setCurStrCoordinate(coordinateToString(coordinate, coordinateProj.getCode(), value));\r\n    }, [coordinate, coordinateProj]);\r\n\r\n    const onCoordinateChangeHandler = (value) => {\r\n        setCurStrCoordinate(value.target.value);\r\n    }\r\n\r\n    /**\r\n     * Method to copy the coordinate to clipboard once the user \r\n     * click in \"copy\" button\r\n     */\r\n    const onCopyHandler = useCallback(() => {\r\n        const inputEl = inputCoordinateEl.current;\r\n        inputEl.select();\r\n        inputEl.setSelectionRange(0, 99999); //for mobile devices\r\n        /* Copy the text inside the text field */\r\n        document.execCommand(\"copy\");\r\n    }, []);\r\n\r\n    \r\n    return (\r\n        <Window\r\n            title={title}\r\n            collapsible\r\n            onClose={onClose}\r\n            visible={visible}\r\n            style={style}\r\n            //style={{width: 500, height: 500}}\r\n        >\r\n            <Space direction=\"vertical\">\r\n                <Select \r\n                    // defaultValue={map.getView().getProjection().getCode()}\r\n                    defaultValue={curProjCode}\r\n                    onChange={onProjChangeHandler}\r\n                >\r\n                    {projs.map((proj) => {\r\n                        return (\r\n                            <Select.Option key={proj.getCode()} value={proj.getCode()}>\r\n                                {proj.getCode()}\r\n                            </Select.Option>\r\n                        );\r\n                    })}\r\n                </Select>\r\n                <div style={{display:'flex', gap:5}}>\r\n                    <Input\r\n                        addonBefore={getCoordinateLabel(curProjCode)}\r\n                        ref={inputCoordinateEl}\r\n                        style={{width:400}}\r\n                        value={curStrCoordinate}\r\n                        onChange={onCoordinateChangeHandler}\r\n                    />\r\n                    <Button type=\"primary\" onClick={onCopyHandler}>Copy</Button>\r\n                </div>\r\n            </Space>\r\n      </Window>\r\n    );\r\n};\r\n\r\nexport default CoordinateWnd;","import React, {useCallback, useEffect, useState} from 'react';\r\nimport {Map} from 'ol';\r\nimport {Projection} from 'ol/proj';\r\nimport PropTypes from 'prop-types';\r\nimport {Button} from 'antd';\r\nimport useGetPointGeomInteraction from '../../../../hooks/interactions/useGetPointGeomInteraction';\r\nimport CoordinateWnd from '../../../window/coordinate/CoordinateWnd/CoordinateWnd';\r\n\r\n/**\r\n * <p>Button to retrieve the coordinate indicated by the user.</p>\r\n *\r\n * @visibleName Get Coordinate Button \r\n */\r\nconst GetCoordinateButton = (\r\n    {\r\n        map,\r\n        wndStyle, \r\n        msg = 'Pick Coordinate',\r\n        projs,\r\n        children = 'Get Coordinate',\r\n        ...otherProps\r\n    }) => {\r\n\r\n        const interaction = useGetPointGeomInteraction(map, msg);\r\n        const [position, setPosition] = useState(null);\r\n        const [visibleWnd, setVisibleWnd] = useState(false);\r\n        \r\n\r\n        const onClickHandler = useCallback((event) => {\r\n            interaction.start();\r\n        }, [interaction]);\r\n\r\n        const onClose = useCallback(() => {\r\n            setVisibleWnd(false);\r\n            setPosition(null);\r\n        }, []);\r\n    \r\n        useEffect(() => {\r\n            if(interaction.geometry && !interaction.isRunning) {\r\n                setPosition(interaction.geometry);\r\n                setVisibleWnd(true);\r\n                interaction.clear();\r\n            }\r\n        \r\n        },[interaction]);\r\n\r\n        return(\r\n            <React.Fragment>\r\n                <Button {...otherProps} onClick={onClickHandler} \r\n                    disabled={interaction.isRunning || visibleWnd}\r\n                >\r\n                    {children}\r\n                </Button>\r\n                { position &&\r\n                    <CoordinateWnd \r\n                        //title='Get Coordinate'\r\n                        title={children}\r\n                        onClose = {onClose}\r\n                        visible={visibleWnd}\r\n                        map={map}\r\n                        coordinate={position? position.getCoordinates() : null}\r\n                        coordinateProj={map.getView().getProjection()}\r\n                        projs={projs}\r\n                        style={wndStyle}\r\n                    />\r\n                }\r\n            </React.Fragment>\r\n        );\r\n\r\n};\r\n\r\nGetCoordinateButton.propTypes = {\r\n    /**\r\n     * The OpenLayers ol/Map from where the coordinate will be \r\n     * retrieved.\r\n     */\r\n    map: PropTypes.instanceOf(Map).isRequired,\r\n\r\n    /**\r\n     * Array of ol/Projection to be available\r\n     * in the window. So, the default projection once\r\n     * the window is shown is the map projection. But\r\n     * the user can select a different projection in the\r\n     * window and the coordinate will be converted to\r\n     * the selected projection.\r\n     */\r\n    projs: PropTypes.arrayOf(PropTypes.instanceOf(Projection)),\r\n\r\n    /**\r\n     * The prompt message requesting the user to indicate a \r\n     * position in the map.\r\n     */\r\n    msg: PropTypes.string,\r\n\r\n     /**\r\n     * A CSS Style to render the style for the Window\r\n     */\r\n    wndStyle:PropTypes.object,\r\n\r\n     /**\r\n     * The child node for the Button and Window Title:\r\n     */\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default GetCoordinateButton;","import React, {useCallback} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport Map from 'ol/Map';\r\nimport { Button } from 'antd';\r\nimport {zoomToLayer as zoomToLyr} from '../../../../util/map';\r\n\r\n/**\r\n * <p>\r\n *  Button to Zoom to all the features in a <i>ol/layer/Vector</i> \r\n *  vector layer.\r\n * </p>\r\n * <p>Remark:This component is present in the <i>WfsFeatureGrid</i> component.</p>\r\n * <p>\r\n *  Check in the <a href=\"https://ant.design/components/button/\">documentation</a> \r\n *  for additional properties for the button.\r\n * </p>\r\n * @visibleName Zoom to All Features \r\n */\r\nconst ZoomToAllFeaturesButton = ({\r\n    map,\r\n    vectorLayer,\r\n    children,\r\n    ...otherProps\r\n}) => {\r\n    \r\n    const onClickHandler = useCallback((event) => {\r\n        if(vectorLayer && map) {\r\n            zoomToLyr(map, vectorLayer);\r\n        }\r\n    }, [vectorLayer, map]);\r\n\r\n    return(\r\n        <Button {...otherProps} onClick={onClickHandler}>\r\n            {children}\r\n        </Button>\r\n    );\r\n};\r\n\r\nZoomToAllFeaturesButton.propTypes = {\r\n\r\n    /**\r\n     * The OpenLayers ol/Map to zoom\r\n     */\r\n    map: PropTypes.instanceOf(Map).isRequired,\r\n    /**\r\n     * The <i>ol/layer/Vector</i> layer from where all the features will\r\n     * be zoomed. \r\n     */\r\n    vectorlayer: PropTypes.instanceOf(VectorLayer),\r\n\r\n    /**\r\n     * The child node for the button\r\n     */\r\n    children: PropTypes.node\r\n}\r\n\r\nexport default ZoomToAllFeaturesButton;\r\n","import React, {useCallback} from 'react';\r\nimport {Map} from 'ol';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from 'antd';\r\nimport {ZoomToFeatures} from '../../../../util/map';\r\n\r\n\r\n/**\r\n * <p>Button will allow to zoom to selected feature(s) from a vector layer present in the Grid.</p>\r\n * <p>Remark:This component is present in the <i>WfsFeatureGrid</i> component.</p>\r\n * <p>\r\n *  Check in the <a href=\"https://ant.design/components/button/\">documentation</a> \r\n *  for additional properties for the button.\r\n * </p>\r\n * @visibleName Zoom to Selected Features Button\r\n */\r\nconst ZoomToSelectedFeaturesButton = (props) => {\r\n\r\n    const {map, gridApi, ...otherProps} = props;\r\n\r\n    const onClickHandler = useCallback((event) => {\r\n        if(map && gridApi) {\r\n            const selectedRows = gridApi.getSelectedRows();\r\n            const features = selectedRows.map(row => row.__feature);\r\n            ZoomToFeatures(map, features);\r\n        }\r\n    }, [gridApi, map]);\r\n\r\n    return(\r\n        <Button {...otherProps} onClick={onClickHandler}>\r\n            {props.children}\r\n        </Button>\r\n    );\r\n\r\n};\r\n\r\nZoomToSelectedFeaturesButton.propTypes = {\r\n\r\n    /**\r\n     * The OpenLayers ol/Map to zoom\r\n     */\r\n    map: PropTypes.instanceOf(Map).isRequired,\r\n\r\n\r\n    /**\r\n     * The Grid Api for <a href=\"https://www.ag-grid.com/react-grid/grid-api/\">Ag-Grid</a>.\r\n     */\r\n    gridApi: PropTypes.any,\r\n\r\n    /**\r\n     * The child node for the button\r\n     */\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default ZoomToSelectedFeaturesButton;","import React, {useCallback} from 'react';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from 'antd';\r\n\r\n\r\n/**\r\n * <p>Button will allow to clear selected feature(s) from a vector layer present in the Grid.</p>\r\n * <p>Remark:This component is present in the <i>WfsFeatureGrid</i> component.</p>\r\n * <p>\r\n *  Check in the <a href=\"https://ant.design/components/button/\">documentation</a> \r\n *  for additional properties for the button.\r\n * </p>\r\n * @visibleName Clear Selected Features Button\r\n */\r\nconst ClearSelectedFeaturesButton = (props) => {\r\n\r\n    const {vectorLayer, gridApi, children, ...otherProps} = props;\r\n\r\n\r\n    const onClickHandler = useCallback((event) => {\r\n        if(gridApi && vectorLayer) {\r\n            const selectedRows = gridApi.getSelectedRows();\r\n            const features = selectedRows.map(row => row.__feature);\r\n            features.forEach((feature) => {\r\n                vectorLayer.getSource().removeFeature(feature);\r\n            });\r\n            \r\n        }\r\n    }, [gridApi, vectorLayer]);\r\n\r\n    return(\r\n        <Button {...otherProps} onClick={onClickHandler}>\r\n            {children}\r\n        </Button>\r\n    );\r\n\r\n};\r\n\r\nClearSelectedFeaturesButton.propTypes = {\r\n    /**\r\n     * The <i>ol/layer/Vector</i> layer from where the features will\r\n     * be cleared. \r\n     */\r\n    vectorlayer: PropTypes.instanceOf(VectorLayer),\r\n\r\n    /**\r\n     * The Grid Api for <a href=\"https://www.ag-grid.com/react-grid/grid-api/\">Ag-Grid</a>.\r\n     */\r\n    gridApi: PropTypes.any,\r\n\r\n    /**\r\n     * The child node for the button\r\n     */\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default ClearSelectedFeaturesButton;","import React from 'react';\r\nimport { Space, Dropdown, Button, Menu } from 'antd';\r\nimport ZoomToAllFeaturesButton from '../../../button/zoom/ZoomToAllFeaturesButton/ZoomToAllFeaturesButton';\r\nimport ZoomToSelectedFeaturesButton from '../../../button/zoom/ZoomToSelectedFeaturesButton/ZoomToSelectedFeaturesButton';\r\nimport ClearAllFeaturesButton from '../../../button/feature/ClearAllFeaturesButton/ClearAllFeaturesButton';\r\nimport ClearSelectedFeaturesButton from '../../../button/feature/ClearSelectedFeaturesButton/ClearSelectedFeaturesButton';\r\n\r\nconst FeatureGridMenuBar = ({\r\n    map,\r\n    layer,\r\n    gridApi\r\n}) => {\r\n    const zoomMenu = (\r\n        <Menu>\r\n            <Menu.Item>\r\n                <ZoomToAllFeaturesButton type=\"text\" map={map} vectorLayer={layer}>\r\n                    Zoom All\r\n                </ZoomToAllFeaturesButton>\r\n            </Menu.Item>\r\n            <Menu.Item>\r\n                <ZoomToSelectedFeaturesButton type='text' map={map} gridApi={gridApi}>\r\n                    Zoom to Selected Feature(s)\r\n                </ZoomToSelectedFeaturesButton>\r\n            </Menu.Item>\r\n        </Menu>\r\n    );\r\n\r\n    const clearMenu = (\r\n        <Menu>\r\n            <Menu.Item>\r\n                <ClearAllFeaturesButton type='text' vectorLayer={layer}>\r\n                    Clear All\r\n                </ClearAllFeaturesButton>\r\n            </Menu.Item>\r\n            <Menu.Item>\r\n                <ClearSelectedFeaturesButton type=\"text\" gridApi={gridApi} vectorLayer={layer}>\r\n                    Clear Selected Feature(s)\r\n                </ClearSelectedFeaturesButton>\r\n            </Menu.Item>\r\n        </Menu>\r\n    );\r\n    return (\r\n        <React.Fragment>\r\n            <Space >\r\n                <Dropdown overlay={clearMenu} placement=\"bottomLeft\">\r\n                    <Button>Clear</Button>\r\n                </Dropdown>\r\n                <Dropdown overlay={zoomMenu} placement=\"bottomLeft\" >\r\n                    <Button>Zoom</Button>\r\n                </Dropdown>\r\n            </Space>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\n\r\nexport default FeatureGridMenuBar;","import React, {useState, useCallback, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport olMap from 'ol/Map';\r\nimport olVectorLayer from 'ol/layer/Vector';\r\nimport OlStyle from 'ol/style/Style';\r\nimport OlStyleFill from 'ol/style/Fill';\r\nimport OlStyleCircle from 'ol/style/Circle';\r\nimport OlStyleStroke from 'ol/style/Stroke';\r\nimport OlGeomGeometry from 'ol/geom/Geometry';\r\nimport {zoomToLayer as zoomToLyr} from '../../../../util/map';\r\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\r\nimport FeatureGridMenuBar from '../../../menuBar/feature/FeatureGridMenuBar/FeatureGridMenuBar';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\r\n\r\nconst defaultKeyFunction = (feature) => feature.ol_uid;\r\nconst defaultColumnDefs = [];\r\n\r\n/**\r\n * <p>Component to load the the openlayers features <i>ol/Feature</i> in the grid:</p>\r\n * <ol>\r\n *  <li>All the features in the vector layer <i>vectorLayer</i> \r\n *      will be loaded in the grid.\r\n *  </li>\r\n *  <li>\r\n *      The <strong>unselected</strong> feature(s) in the row grid will be rendered\r\n *      using the style defined in <i>featureStyle</i>.\r\n *  </li>\r\n *  <li>\r\n *      The <strong>selected</strong> feature(s) in the row grid will be rendered\r\n *      using the style defined in <i>selectedFeatureStyle</i>.\r\n *  </li>\r\n *  <li>\r\n *      Addional properties not listed below can be passed. See\r\n *      <a href=\"https://www.ag-grid.com/react-grid/grid-properties/\">documentation</a> \r\n *      for more details.\r\n *  </li>\r\n * </ol>\r\n * \r\n * @visibleName Feature Grid\r\n */\r\nconst FeatureGrid = (\r\n{\r\n    map,\r\n    vectorLayer,\r\n    zoomToLayer = true,\r\n    columnDefs = defaultColumnDefs,\r\n    rowSelection= 'multiple', //'single',\r\n    featureStyle =  new OlStyle({\r\n        stroke: new OlStyleStroke({\r\n            //color: 'rgba(204, 0, 204, 1.0)',\r\n            color: 'rgba(0, 0, 255, 0.4)',\r\n\t\t\twidth: 2\r\n\t\t}),\r\n\t\tfill: new OlStyleFill({\r\n            //color: 'rgba(255, 179, 255, 0.4)'\r\n            color: 'rgba(97, 218, 251, 0.4)'\r\n        }),\r\n        image: new OlStyleCircle({\r\n\t\t\tradius: 8,\r\n\t\t\tfill: new OlStyleFill({\r\n\t\t\t\tcolor: 'rgba(97, 218, 251, 1.0)',\r\n\t\t\t}),\r\n\t\t\tstroke: new OlStyleStroke({\r\n\t\t\t\tcolor: '#000',\r\n\t\t\t\twidth: 2\r\n\t\t\t})\r\n\t\t})\r\n    } ),\r\n    selectedFeatureStyle =  new OlStyle({\r\n        stroke: new OlStyleStroke({\r\n            //color: 'rgba(204, 0, 204, 1.0)',\r\n            color: 'rgba(0, 0, 0, 1.0)',\r\n\t\t\twidth: 3\r\n\t\t}),\r\n\t\tfill: new OlStyleFill({\r\n            color: 'rgba(0, 0, 255, 0.5)' \r\n            \r\n        }),\r\n        image: new OlStyleCircle({\r\n\t\t\tradius: 10,\r\n\t\t\tfill: new OlStyleFill({\r\n\t\t\t\tcolor: 'rgba(0, 0, 255, 1.0)', //dark magenta (40%)\r\n\t\t\t}),\r\n\t\t\tstroke: new OlStyleStroke({\r\n\t\t\t\tcolor: '#000',\r\n\t\t\t\twidth: 2\r\n\t\t\t}),\r\n\t\t\t\r\n\t\t}),\r\n\t\tzIndex: 100\r\n    }),\r\n    keyFunc= defaultKeyFunction,\r\n    className='ag-theme-balham',\r\n    onGridReady,\r\n    onRowClicked,\r\n    onSelectionChanged,\r\n    ...otherProps\r\n} ) => {\r\n\r\n    if(!columnDefs) columnDefs = [];\r\n    //const [_columnDefs, setColumnDefs] = useState(columnDefs);\r\n    const [_rowData, setRowData] = useState([]);\r\n    const [_selectedFeatures, setSelectedFeatures] = useState([]);\r\n    const [_gridApi, setGridApi] = useState(null);\r\n    const [, setGridColumnApi] = useState();\r\n\r\n    /**\r\n     * callback used to pass as attribute for ag-grid\r\n     * to retrieve the row based on a defined id\r\n     * \r\n     * Usage: const rowNode = gridOptions.api.getRowNode(key);\r\n     */\r\n    const getRowNodeId =  useCallback((data) => {\r\n        return data.key;\r\n        //usage: var rowNode = gridOptions.api.getRowNode('aa');\r\n    }, []);\r\n\r\n\r\n    /**\r\n     * Generate the grid row data in json format from\r\n     * all the features present in the array\r\n     * \r\n     * @param {ol.Feature[]} features The array of features to \r\n     *                                generate row data drom.\r\n     * @return {Object[]} The array containing the row data\r\n     */\r\n\r\n    const buildRowDataFromFeatures = useCallback((features) => {\r\n        const data = [];\r\n        features.forEach(feature => {\r\n            const properties = feature.getProperties();\r\n            const filtered = Object.keys(properties)\r\n              //filter out the properties having geometry type\r\n              .filter(key => !(properties[key] instanceof OlGeomGeometry))\r\n              .reduce((obj, key) => {\r\n                obj[key] = properties[key];\r\n                return obj;\r\n              }, {});\r\n      \r\n            data.push({\r\n              key: keyFunc(feature),\r\n              __feature:feature,\r\n              ...filtered\r\n            });\r\n        });\r\n        return data;\r\n    }, [keyFunc]);\r\n\r\n     /**\r\n     * Generata the grid row data in json format from\r\n     * all the features present in the vector layer\r\n     * \r\n     * @param {ol.layer.Vector} layer The vector layer\r\n     * @return {Object[]} The array containing the row data\r\n     */\r\n    const buildRowDataFromLayer = useCallback((layer) => {\r\n        if(! layer) return [];\r\n        const features = layer.getSource().getFeatures();\r\n        const data = buildRowDataFromFeatures(features);\r\n        return data;\r\n    }, [buildRowDataFromFeatures]);\r\n\r\n\r\n    /**\r\n     * Event handler to 'propertychange' events of the underlying `ol.Feature`. \r\n     * All changes on the object will be reflected in the row grid.\r\n     * See: https://www.ag-grid.com/documentation/react/data-update-single-row-cell/\r\n     * \r\n     * @param {ol.ObjectEvent} evt evt The `ol.ObjectEvent` we receive as handler.\r\n     */\r\n\r\n    const onFeaturePropertyChangeHandler = useCallback((evt) => {\r\n        //retrieve the changed feature\r\n        const changedFeature = evt.target;\r\n        const propertyName = evt.key;\r\n        const propertyValue = changedFeature.get(propertyName);\r\n        const row = _gridApi.getRowNode(keyFunc(changedFeature));\r\n\r\n        if(row) {\r\n            //change the data for the grid row\r\n            row.setDataValue(propertyName, propertyValue);\r\n            //change the value for the data row\r\n            const result = _rowData.find((item) => item.key === keyFunc(changedFeature));\r\n            result[propertyName] = propertyValue;\r\n            setRowData([..._rowData]);\r\n        }\r\n    }, [_gridApi, _rowData, keyFunc]);\r\n\r\n    /**\r\n     * Method to register the feature 'propertychange' event handler in all\r\n     * the features in the array.\r\n     * \r\n     * @param {ol.Feature[]} features Array of features on which the handler\r\n     *                                will be registered\r\n     */\r\n\r\n    const registerFeaturePropertyChange = useCallback((features) => {\r\n        features.forEach(feature => {\r\n            feature.on('propertychange', onFeaturePropertyChangeHandler)\r\n        });\r\n    }, [onFeaturePropertyChangeHandler]);\r\n\r\n    /**\r\n     * Method to unregister the feature 'propertychange' event handler in all\r\n     * the features in the array.\r\n     * \r\n     * @param {ol.Feature[]} features Array of features on which the handler\r\n     *                                will be unregistered\r\n     */\r\n    \r\n    const unRegisterFeaturePropertyChange = useCallback((features) => {\r\n        features.forEach(feature => {\r\n            feature.un('propertychange', onFeaturePropertyChangeHandler)\r\n        });\r\n    }, [onFeaturePropertyChangeHandler]);\r\n\r\n\r\n    \r\n    /**\r\n     * Event Handler for the event 'add' fired when a feature is\r\n     * added in the layer.\r\n     * This method will:\r\n     * (a) Add a new row in the data grid\r\n     * (b) register in the added feature the event handler 'propertychange'\r\n     * @param {ol.CollectionEvent} evt The event fired by the layer\r\n     */\r\n    const onFeatureAddHandler = useCallback((evt) => {\r\n    //const onFeatureAddHandler = useDynamicCallback((evt) => {\r\n        //retrives the feature and layer on which feature was removed\r\n        const feature = evt.feature;\r\n        //register 'propertychange' in the added feature\r\n        feature.on('propertychange', onFeaturePropertyChangeHandler)\r\n        //replace the row data to rebuild the data to refresh the grid.\r\n        //TODO: to check the asyn method for performance:\r\n        //https://www.ag-grid.com/javascript-grid-data-update-high-frequency/\r\n        // _gridApi.updateRowData({add: data});\r\n        const data = buildRowDataFromFeatures([feature]);\r\n        _gridApi.applyTransaction({add: data});\r\n        //refresh the row model\r\n        _gridApi.refreshClientSideRowModel('filter')\r\n    }, [buildRowDataFromFeatures, _gridApi, onFeaturePropertyChangeHandler]);\r\n    //});\r\n\r\n    /**\r\n     * Event Handler for the event 'remove' fired when a feature is\r\n     * removed from the layer.\r\n     * This method will:\r\n     * (a) remove row in the data grid\r\n     * (b) unregister in the removed feature the event handler 'propertychange'\r\n     * @param {ol.CollectionEvent} evt The event fired by the layer\r\n     */\r\n    const onFeatureRemoveHandler = useCallback((evt) => {\r\n        //retrives the feature and layer on which feature was removed\r\n        const removedFeature = evt.feature;\r\n        //unregister 'propertychange' in the added feature\r\n        removedFeature.un('propertychange', onFeaturePropertyChangeHandler);\r\n        \r\n        //replace the row data to rebuild the data to refresh the grid.\r\n        //TODO: to check the asyn method for better performance:\r\n        //https://www.ag-grid.com/javascript-grid-data-update-high-frequency/\r\n        \r\n        //remove the row from the grid\r\n        const row = _gridApi.getRowNode(keyFunc(removedFeature));\r\n        if(!row) return;\r\n        _gridApi.applyTransaction({remove: [row.data]});\r\n        //update data row: commented by Paulo\r\n        // const newRowData = _rowData.filter((item) => item.key !== keyFunc(removedFeature));\r\n        // setRowData(newRowData);\r\n    }, [_gridApi, keyFunc, onFeaturePropertyChangeHandler]);\r\n\r\n\r\n\r\n    /**\r\n     * Event Handler for the event 'clear' fired when the clear is\r\n     * called from the layer source.\r\n     * This method will:\r\n     * (a) remove row in the data grid\r\n     * (b) unregister in the removed feature the event handler 'propertychange'\r\n     * @param {ol.CollectionEvent} evt The event fired by the layer\r\n     */\r\n    const onFeatureSourceClearHandler = useCallback((evt) => {\r\n\r\n        //replace the row data to rebuild the data to refresh the grid.\r\n        //TODO: to check the asyn method for better performance:\r\n        //https://www.ag-grid.com/javascript-grid-data-update-high-frequency/\r\n        \r\n        //remove the row from the grid\r\n        //_gridApi.applyTransaction({remove: _rowData});\r\n        _gridApi.setRowData([]);\r\n        //clear the row data: commented by paulo\r\n        // setRowData([]);\r\n    }, [_gridApi]);\r\n\r\n    /**\r\n     * Method to register the event handlers 'addfeature'\r\n     * and 'removefeature' to handle the cases on which the \r\n     * feature is added or removed from the layer.\r\n     * @param {ol.layer.Base} layer The layer\r\n     */\r\n    const registerLayerEventHandlers = useCallback((layer) => {\r\n        if(layer) {\r\n            //layer.getSource().on('changefeature', onFeatureChangeHandler);\r\n            layer.getSource().on('addfeature', onFeatureAddHandler);\r\n            layer.getSource().on('removefeature', onFeatureRemoveHandler);\r\n            layer.getSource().on('clear', onFeatureSourceClearHandler)\r\n        }\r\n    }, [onFeatureAddHandler, onFeatureRemoveHandler, onFeatureSourceClearHandler]);\r\n\r\n\r\n    /**\r\n     * Method to unregister the event handlers 'addfeature' \r\n     * and 'removefeature' to handle the cases on which the \r\n     * feature is added or removed from the layer.\r\n     * @param {ol.layer.Base} layer The layer.\r\n     */\r\n    const unRegisterLayerEventHandlers = useCallback((layer) => {\r\n        if(layer) {\r\n            //layer.getSource().un('changefeature', onFeatureChangeHandler);\r\n            layer.getSource().un('addfeature', onFeatureAddHandler);\r\n            layer.getSource().un('removefeature', onFeatureRemoveHandler);\r\n            layer.getSource().un('clear', onFeatureSourceClearHandler)\r\n        }\r\n    }, [onFeatureAddHandler, onFeatureRemoveHandler, onFeatureSourceClearHandler]);\r\n\r\n    \r\n\r\n   \r\n    /**\r\n     * If the attribute \"columnDefs\" is not provided for this component,\r\n     * buid the columnDefs based on the properties of the feature\r\n     * in the vector layer\r\n     */\r\n\r\n    const buildColumnDefs = (columnDefs, vectorLayer) => {\r\n        if((columnDefs.length === 0) && vectorLayer \r\n            && vectorLayer.getSource().getFeatures().length > 0) {\r\n            const features = vectorLayer.getSource().getFeatures();\r\n            if(features && features.length > 0) {\r\n                //retrieve the first feature and its properties\r\n                const feature = features[0];\r\n                const properties = feature.getProperties();\r\n                for (const field in properties) {\r\n                    if(field !== feature.getGeometryName()) {\r\n                        columnDefs.push({\r\n                            field: field,\r\n                            sortable:true,\r\n                            filter:true,\r\n                            resizable:true\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    \r\n    // const buildColumnDefs = useCallback(() => {\r\n    //     if((! _columnDefs || _columnDefs.length === 0) && vectorLayer \r\n    //         && vectorLayer.getSource().getFeatures().length > 0) {\r\n    //         const newColumnDefs = [];\r\n    //         const features = vectorLayer.getSource().getFeatures();\r\n    //         if(features && features.length > 0) {\r\n    //             //retrieve the first feature and its properties\r\n    //             const feature = features[0];\r\n    //             const properties = feature.getProperties();\r\n    //             for (const field in properties) {\r\n    //                 if(field !== feature.getGeometryName()) {\r\n    //                     newColumnDefs.push({\r\n    //                         field: field,\r\n    //                         sortable:true,\r\n    //                         filter:true,\r\n    //                         resizable:true\r\n    //                     });\r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //         setColumnDefs(newColumnDefs);\r\n    //     }\r\n    // }, [_columnDefs, vectorLayer]);\r\n\r\n    /**\r\n     * Event Handler fired when the grid is ready.\r\n     * This handler will initialize the grid api \r\n     * in the state\r\n     */\r\n    const onInternalGridReady = useCallback((params) => {\r\n        setGridApi(params.api);\r\n        setGridColumnApi(params.columnApi);\r\n        onGridReady && onGridReady(params);\r\n    }, [onGridReady]);\r\n   \r\n\r\n    /**\r\n     * Event handler called when the selection has been changed.\r\n     * This handler will highlight in the map the selected \r\n     * feature and un-highlight the unselected ones.\r\n     * \r\n     * @param {*} evt The SelectionChangedEvent\r\n     */\r\n    const onInternalSelectionChanged = useCallback((evt) => {\r\n        //retrieve the selected features\r\n        let newSelectedRows = null;\r\n        if(!_gridApi) {\r\n            newSelectedRows = evt.api.getSelectedRows();\r\n        }\r\n        else {\r\n            newSelectedRows = _gridApi.getSelectedRows();\r\n        }\r\n        const newSelectedFeatures = newSelectedRows.map(row=>row.__feature);\r\n        //unhighlight the previous features\r\n        _selectedFeatures.forEach(feature => {\r\n            if(!newSelectedFeatures.includes(feature)) {\r\n                feature.setStyle(null);\r\n            }\r\n        });\r\n        //highlight the new features\r\n        newSelectedFeatures.forEach(feature => {\r\n            if(!_selectedFeatures.includes(feature)) {\r\n                feature.setStyle(selectedFeatureStyle);\r\n                //feature.set('GEN', feature.get('GEN') + 'A');\r\n                //vectorLayer.getSource().removeFeature(feature);\r\n            }\r\n        });\r\n        //update state\r\n        setSelectedFeatures(newSelectedFeatures);\r\n\r\n        //fire event\r\n        onSelectionChanged && onSelectionChanged(evt);\r\n\r\n    }, [_selectedFeatures, selectedFeatureStyle, _gridApi, onSelectionChanged]);\r\n\r\n\r\n    /**\r\n     * To Zoom to the Layer during the initialization\r\n     */\r\n    useEffect(() => {\r\n        if(zoomToLayer && vectorLayer && vectorLayer.getSource().getFeatures().length > 0) {\r\n            zoomToLyr(map, vectorLayer);\r\n        }\r\n    },[map, zoomToLayer, vectorLayer]);\r\n    \r\n\r\n    /**\r\n     * Set the initial style for the layer\r\n     * (or change to set for the feature ??)\r\n     */\r\n    useEffect(() => {\r\n        if(vectorLayer && featureStyle) {\r\n            vectorLayer.setStyle(featureStyle);\r\n        }\r\n\r\n    }, [featureStyle, vectorLayer]);\r\n\r\n    /**\r\n     * Build the column definitions and the row data based on\r\n     * the features present in the vector layer and its properties\r\n     */\r\n    useEffect(() => {\r\n        buildColumnDefs(columnDefs, vectorLayer);\r\n        const data = buildRowDataFromLayer(vectorLayer);\r\n        setRowData(data);\r\n    }, [columnDefs, buildRowDataFromLayer, vectorLayer]);\r\n\r\n\r\n    /**\r\n     * Register the event handlers for the ol objects:\r\n     * (a) Register 'propertychange' for all the features in the layer\r\n     */\r\n\r\n    useEffect(() => {\r\n        if(vectorLayer) {\r\n            registerFeaturePropertyChange(vectorLayer.getSource().getFeatures());\r\n        }\r\n        return () => {\r\n            if(vectorLayer) {\r\n                unRegisterFeaturePropertyChange(vectorLayer.getSource().getFeatures());\r\n            }\r\n        }\r\n    }, [registerFeaturePropertyChange, unRegisterFeaturePropertyChange, vectorLayer]);\r\n\r\n    /**\r\n     * Register/Unregister the event handlers for the collection of features in the layer:\r\n     * (a) Register 'add', 'remove' and 'clear' event handlers  for the \r\n     * collection of features in the layer\r\n     */\r\n    useEffect(() => {\r\n        if(vectorLayer) {\r\n            registerLayerEventHandlers(vectorLayer);\r\n        }\r\n        return () => {\r\n            if(vectorLayer) {\r\n                unRegisterLayerEventHandlers(vectorLayer);\r\n            }\r\n        }\r\n    }, [registerLayerEventHandlers, unRegisterLayerEventHandlers, vectorLayer]);\r\n\r\n    return(\r\n        //<div className=\"ag-theme-balham\" style={ { height: \"100\", width: \"100%\" } }>\r\n            <AgGridReact\r\n                className={className}\r\n                onGridReady={onInternalGridReady}\r\n                onSelectionChanged={onInternalSelectionChanged}\r\n                onRowClicked={onRowClicked}\r\n                rowSelection={rowSelection}\r\n                enableCellTextSelection\r\n                getRowNodeId={getRowNodeId}\r\n                immutableData={true}\r\n                //columDefs={[{field: 'make'}, {field:'model'}, {field:'price'}]}\r\n                defaultColDef={{\r\n                    sortable: true,\r\n                    resizable: true,\r\n                    filter: true,\r\n                    //headerComponentFramework: SortableHeaderComponent,\r\n                    headerComponentParams: {\r\n                        menuIcon: 'fa-bars'\r\n                    }\r\n                }}\r\n                rowData={_rowData}\r\n                {...otherProps}\r\n            >\r\n                    {columnDefs.map((column, index) => {\r\n                        return(\r\n                            <AgGridColumn \r\n                                key={String(index)}\r\n                                field= {'field' in column ? column.field: null} \r\n                                headerName= {'headerName' in column ? column.headerName: null}\r\n                            />\r\n                        );\r\n                    })}\r\n                {/* <AgGridColumn field=\"USE\" headerName=\"USE\" sortable filter></AgGridColumn>\r\n                <AgGridColumn field=\"RS\" sortable filter></AgGridColumn>\r\n                <AgGridColumn field=\"RS_ALT\" sortable filter></AgGridColumn> */}\r\n            </AgGridReact>\r\n        //</div>\r\n\r\n    );\r\n};\r\n\r\nFeatureGrid.propTypes = {\r\n    /**\r\n     * The OpenLayers map <i>ol/Map</i> where the features will be rendered.\r\n     */\r\n    map: PropTypes.instanceOf(olMap).isRequired,\r\n\r\n    /**\r\n     * The OpenLayers vector layer <i>ol/layer/Vector</i> \r\n     * where the feature will be rendered.\r\n     */\r\n    vectorLayer: PropTypes.instanceOf(olVectorLayer).isRequired,\r\n\r\n    /**\r\n     * The class name to provide different themes.\r\n     * Check the  <a href=\"https://www.ag-grid.com/react-grid/themes-provided/\">available themes.</a>\r\n     * details about available themes.\r\n     */\r\n    className: PropTypes.string,\r\n\r\n     /**\r\n     * <p>Array of <a href=\"https://www.ag-grid.com/react-grid/grid-properties\">Column Definitions.</a></p>\r\n     * <p>\r\n     *  If it is a empty array, all the property names will be shown\r\n     *  in the grid.\r\n     * </p>\r\n     */\r\n    columnDefs: PropTypes.array,\r\n\r\n    /**\r\n     * The openLayers style <i>ol/Style</i> used to render the\r\n     * <u>unselected</u> feature(s) in the row grid.\r\n     */\r\n    featureStyle: PropTypes.instanceOf(OlStyle),\r\n\r\n    /**\r\n     * The openLayers style <i>ol/Style</i> used to render the\r\n     * <u>selected</u> feature(s) in the row grid.\r\n     */\r\n    selectedFeatureStyle: PropTypes.instanceOf(OlStyle),\r\n\r\n    /**\r\n     * If true, the map will we zoomed to the features in the \r\n     * layer <i>vectorLayer</i> during the initialization;\r\n     */\r\n    zoomToLayer: PropTypes.bool,\r\n\r\n    /**\r\n     * Function to provide a unique identifer for the feature in the map.\r\n     * The default function returns your internal unique identifier (uid).\r\n     */\r\n    keyFunc: PropTypes.func,\r\n\r\n    /**\r\n     * Allow a single or multiple row selection in the grid.\r\n     */\r\n    rowSelection: PropTypes.oneOf(['single', 'multiple']),\r\n\r\n    /**\r\n     * Event Handler for the event fired once the grid was\r\n     * initialised.\r\n     */\r\n    onGridReady: PropTypes.func,\r\n\r\n    /**\r\n     * Event Handler for the event fired once the user selects \r\n     * one or more rows in the grid. See example below to check\r\n     * how it works.\r\n     */\r\n    onSelectionChanged: PropTypes.func,\r\n\r\n    /**\r\n     * Event Handler for the event fired once a row in the\r\n     * grid is selected.\r\n     */\r\n    onRowClicked: PropTypes.func,\r\n\r\n\r\n};\r\n\r\n\r\n\r\nFeatureGrid.MenuBar = FeatureGridMenuBar;\r\n\r\n\r\nexport default FeatureGrid;","import { useState, useCallback } from 'react'\r\nimport WFS from 'ol/format/WFS';\r\nimport GeoJSON from 'ol/format/GeoJSON';\r\nimport GML2 from 'ol/format/GML2';\r\nimport GML3 from 'ol/format/GML3';\r\nimport GML32 from 'ol/format/GML32';\r\n\r\nconst useWFSGetFeature = () => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    //const [features, setFeatures] = useState[null]\r\n\r\n    const sendRequest = useCallback((url, map, layer, wfsOptions, fetchOptions = {\r\n        method: 'POST', \r\n        contentType: 'application/xml',\r\n\r\n    }) => {\r\n        //build WFS request\r\n        const featureRequest = new WFS().writeGetFeature(wfsOptions);\r\n        const data = new XMLSerializer().serializeToString(featureRequest);\r\n        //log for testing\r\n        console.log('WFS GetFeature Request: ');\r\n        console.log(data);\r\n        //format fetch options with the content type\r\n        setIsLoading(true);\r\n        setError(null);\r\n        fetchOptions = {\r\n            ...fetchOptions, \r\n            method: 'POST',\r\n            contentType: 'application/xml', \r\n            body: data,\r\n            //dataType: 'json'\r\n        };\r\n        //fetch data\r\n        fetch(url, fetchOptions)\r\n        .then(response => {\r\n            if(!response.ok) {\r\n               throw new Error(response);\r\n            }\r\n            //return response.json();\r\n            return response.text();\r\n        })\r\n        .then(responseData => {\r\n            console.log('WFS GetFeature Response:', responseData);\r\n            let parser = null;\r\n            let outputFormat = wfsOptions.outputFormat;\r\n            if(outputFormat) outputFormat = outputFormat.toUpperCase();\r\n            switch(outputFormat) {\r\n                case 'APPLICATION/JSON':\r\n                    parser = new GeoJSON();\r\n                    break;\r\n                case 'GML2':\r\n                    parser = new GML2();\r\n                    break;\r\n                case 'GML3':\r\n                    parser = new GML3();\r\n                    break;\r\n                case 'GML32':\r\n                    parser = new GML32();\r\n                    break;\r\n                default:\r\n                    parser = new GML3();\r\n            }\r\n            const features = parser.readFeatures(responseData);\r\n            //const xml = (new window.DOMParser()).parseFromString(responseData, \"text/xml\")\r\n            //const features = parser.readFeatures(xml);\r\n            layer.getSource().addFeatures(features);\r\n            setIsLoading(false);\r\n        })\r\n        .catch(error => {\r\n            alert(error.message);\r\n            setError(error.message);\r\n            setIsLoading(false);\r\n        });\r\n\r\n    }, []);\r\n\r\n    const clearRequest = useCallback(() => {\r\n        setIsLoading(false);\r\n        setError(null);\r\n    }, []);\r\n\t\r\n    return {\r\n        sendRequest,\r\n        clearRequest,\r\n        isLoading,\r\n        error\r\n    };\r\n};\r\n\r\nexport default useWFSGetFeature;","import {useEffect, useRef} from 'react';\r\n\r\n/**\r\n * Custom Hook to get the previous props or state\r\n * See: https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\r\n * See: https://medium.com/better-programming/updating-state-from-properties-with-react-hooks-5d48693a4af8\r\n * @param {*} value \r\n */\r\nconst usePrevious = (value) => {\r\n    const ref = useRef();\r\n    useEffect(() => {\r\n      ref.current = value;\r\n    });\r\n    return ref.current;\r\n};\r\n\r\nexport default usePrevious;\r\n","import React, {useCallback, useState} from 'react';\r\nimport { Space, Button, Input, Select, Switch } from 'antd';\r\nimport {equalTo, notEqualTo, like, isNull, greaterThan, greaterThanOrEqualTo, \r\n    lessThan, lessThanOrEqualTo, not, between\r\n} from 'ol/format/filter';\r\n\r\n\r\nimport useWFSGetFeature from '../../../../../hooks/wfs/useWFSGetFeature';\r\nimport usePrevious from '../../../../../hooks/common/usePrevious';\r\n\r\nconst WfsSearchByPropertyMenuBar = ({\r\n    url,\r\n    layer,\r\n    map,\r\n    wfsOptions,\r\n    columnDefs\r\n}) => {\r\n    const [internalColumnDefs, setInternalColumnDefs] = useState(columnDefs);\r\n    const [propertyName, setPropertyName] = useState(\"\");\r\n    const [propertyValue, setPropertyValue] = useState(\"\");\r\n    const [propertyValue2, setPropertyValue2] = useState(\"\");\r\n    const [filterName, setFilterName] = useState(\"equal_to\");\r\n    const [hasNotfilter, setHasNotFilter] = useState(false);\r\n    const [matchCase, setMatchCase] = useState(true);\r\n    const wfsGetFeature = useWFSGetFeature();\r\n\r\n    const previousColumnDef = usePrevious(columnDefs);\r\n    if (columnDefs !== previousColumnDef && columnDefs !== internalColumnDefs) {\r\n        setInternalColumnDefs(columnDefs);\r\n        if(columnDefs.length > 0) {\r\n            setPropertyName(columnDefs[0].field);\r\n        }\r\n    }\r\n\r\n    const onSearchClickHandler = useCallback((event) => {\r\n        if(!layer) return;\r\n        layer.getSource().clear();\r\n        let filter = null;\r\n        switch(filterName) {\r\n            case 'equal_to':\r\n                filter = equalTo(propertyName, propertyValue, matchCase);\r\n                break;\r\n            case 'not_equal_to':\r\n                filter = notEqualTo(propertyName, propertyValue, matchCase);\r\n                break;\r\n            case 'like':\r\n                filter = like(propertyName, propertyValue, '*', '.', '!', matchCase);\r\n                break;\r\n            case 'is_null':\r\n                filter = isNull(propertyName);\r\n                break;\r\n            case 'greater_than':\r\n                filter = greaterThan(propertyName, propertyValue);\r\n                break;\r\n            case 'greater_than_or_equal_to':\r\n                filter = greaterThanOrEqualTo(propertyName, propertyValue);\r\n                break;\r\n            case 'less_than':\r\n                filter = lessThan(propertyName, propertyValue);\r\n                break;\r\n            case 'less_than_or_equal_to':\r\n                filter = lessThanOrEqualTo(propertyName, propertyValue);\r\n                break;\r\n            case 'between':\r\n                filter = between(propertyName, propertyValue, propertyValue2);\r\n                break;\r\n            default:\r\n                filter = null;\r\n        }\r\n        if(hasNotfilter) {\r\n            filter = not(filter);\r\n        }\r\n\r\n        const wfsFilteredOptions = {...wfsOptions, filter};\r\n        wfsGetFeature.sendRequest(url, map, layer, wfsFilteredOptions);\r\n\r\n    }, [wfsGetFeature, layer, url, wfsOptions, filterName, propertyName, propertyValue, matchCase, hasNotfilter, map, propertyValue2]);\r\n\r\n    const onFilterNameChangeHandler = useCallback((value) => {\r\n        setFilterName(value);\r\n    },[]);\r\n\r\n    const onHasNotFilterChangeHandler = useCallback((value) => {\r\n        setHasNotFilter(value);\r\n    },[]);\r\n\r\n    const onMatchCaseChangeHandler = useCallback((value) => {\r\n        setMatchCase(value);\r\n    },[]);\r\n\r\n    const onPropertyNameChangeHandler = useCallback((value) => {\r\n        setPropertyName(value);\r\n    },[]);\r\n\r\n    const onPropertyValueChangeHandler = useCallback((value) => {\r\n        setPropertyValue(value.target.value);\r\n    },[]);\r\n\r\n    const onPropertyValue2ChangeHandler = useCallback((value) => {\r\n        setPropertyValue2(value.target.value);\r\n    },[]);\r\n\r\n    let matchCaseControl = null;\r\n    if((filterName === 'equal_to') \r\n    || (filterName === 'not_equal_to') \r\n    || (filterName === 'like')) {\r\n        matchCaseControl = (\r\n            <Switch checkedChildren=\"Match Case\" unCheckedChildren=\"NO Match Case\" \r\n                    defaultChecked={matchCase} onChange={onMatchCaseChangeHandler} \r\n            />\r\n        );\r\n    }\r\n\r\n    let betweenControl = null;\r\n    if((filterName === 'between')) {\r\n        betweenControl = (\r\n            <Space>\r\n                <b>AND</b>\r\n                <Input placeholder=\"Property Value\" onChange={onPropertyValue2ChangeHandler}\r\n                    onPressEnter={onSearchClickHandler}\r\n                />\r\n                </Space>\r\n        );\r\n    }\r\n\r\n\r\n    return (\r\n        <Space>\r\n            <Button type=\"primary\" loading={wfsGetFeature.isLoading} onClick={onSearchClickHandler}>Search</Button>\r\n            <Select style={{ width: 200 }}  value = {propertyName} onChange={onPropertyNameChangeHandler}>\r\n                {columnDefs.map((column, index) => {\r\n                    return (\r\n                        <Select.Option key={index} value={column.field}>{column.field}</Select.Option>\r\n                    );\r\n                })}\r\n            </Select>\r\n            <Switch checkedChildren=\"Not\" defaultChecked={hasNotfilter} onChange={onHasNotFilterChangeHandler} />\r\n            <Select defaultValue={filterName} style={{ width: 200 }} onChange={onFilterNameChangeHandler}>\r\n                <Select.Option value=\"equal_to\">Equal To</Select.Option>\r\n                <Select.Option value=\"not_equal_to\">Not Equal To</Select.Option>\r\n                <Select.Option value=\"like\">Like</Select.Option>\r\n                <Select.Option value=\"is_null\">Is Null</Select.Option>\r\n                <Select.Option value=\"greater_than\">Greater Than</Select.Option>\r\n                <Select.Option value=\"greater_than_or_equal_to\">Greater Than or Equal To</Select.Option>\r\n                <Select.Option value=\"less_than\">Less Than</Select.Option>\r\n                <Select.Option value=\"less_than_or_equal_to\">Less Than or Equal To</Select.Option>\r\n                <Select.Option value=\"between\">Between</Select.Option>\r\n            </Select>\r\n            <Input placeholder=\"Property Value\" onChange={onPropertyValueChangeHandler}\r\n                   onPressEnter={onSearchClickHandler}\r\n            />\r\n            {betweenControl}\r\n            {matchCaseControl}\r\n        </Space>\r\n\r\n    );\r\n};\r\n\r\nexport default WfsSearchByPropertyMenuBar;","import React, {useCallback, useEffect} from 'react';\r\nimport {Map} from 'ol';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from 'antd';\r\nimport useGetPointGeomInteraction from '../../../../hooks/interactions/useGetPointGeomInteraction';\r\nimport useWFSGetFeature from '../../../../hooks/wfs/useWFSGetFeature';\r\nimport {intersects} from 'ol/format/filter';\r\n\r\n\r\n/**\r\n * <p>\r\n *  Button to allow to retrieve the WFS features based on the Point  \r\n *  provided by the user.\r\n * </p>\r\n * \r\n * <p>Remark: this component is present in the <i>WfsFeatureGrid</i> component.</p>\r\n *\r\n * <p>\r\n *  Check in the <a href=\"https://ant.design/components/button/\">documentation</a> \r\n *  for additional properties for the button.\r\n * </p>\r\n * \r\n * @visibleName WFS Search By Point Button\r\n */\r\nconst WfsSearchByPointButton = ({\r\n    url, \r\n    map, \r\n    vectorLayer, \r\n    wfsOptions,\r\n    fetchOptions,\r\n    msg, \r\n    ...otherProps\r\n}) => {\r\n    const {geometryName, /*srsName*/} = wfsOptions;\r\n    const {start, clear, geometry, isRunning} = useGetPointGeomInteraction(map, msg);\r\n    const wfsGetFeature = useWFSGetFeature();\r\n\r\n    //retrieve the srs from map\r\n    const proj = map.getView().getProjection();\r\n    let srsName =proj.getCode();\r\n    const axisOrientation = proj.getAxisOrientation();\r\n    if(axisOrientation === 'neu') srsName = 'urn:x-ogc:def:crs:' + srsName;\r\n    wfsOptions.srsName = srsName;\r\n\r\n    const onClickHandler = useCallback((event) => {\r\n        start();\r\n    }, [start]);\r\n\r\n    useEffect(() => {\r\n        if(geometry && !isRunning) {\r\n            //clear layer\r\n            vectorLayer.getSource().clear();\r\n            //create filter\r\n            const geom = geometry;\r\n            const filter = intersects(\r\n                geometryName, \r\n                geom,\r\n                srsName\r\n            );\r\n            const wfsFilteredOptions = {...wfsOptions, filter};\r\n            wfsGetFeature.sendRequest(url, map, vectorLayer, wfsFilteredOptions, fetchOptions);\r\n            clear();\r\n        }\r\n    }, [geometry, isRunning, vectorLayer, geometryName, srsName, map, url, wfsGetFeature, wfsOptions, fetchOptions, clear]);\r\n\r\n    return(\r\n        <Button {...otherProps} onClick={onClickHandler} \r\n            disabled={isRunning}\r\n            loading={wfsGetFeature.isLoading}\r\n        >\r\n            {otherProps.children}\r\n        </Button>\r\n    );\r\n};\r\n\r\nWfsSearchByPointButton.propTypes = {\r\n\r\n    /**\r\n     * The url used for the WFS request\r\n     */\r\n    url: PropTypes.string.isRequired,\r\n\r\n    /**\r\n     * The OpenLayers ol/Map where the WFS features will be rendered.\r\n     */\r\n    map: PropTypes.instanceOf(Map).isRequired,\r\n\r\n    /**\r\n     * The <i>ol/layer/Vector</i> layer from where the WFS features will\r\n     * be stored. \r\n     */\r\n    vectorLayer: PropTypes.instanceOf(VectorLayer).isRequired,\r\n\r\n    /**\r\n     * The WFS options for the WFS GetFeature request.\r\n     * This object has the same format as used in the OpenLayers \r\n     * <a href=\"https://openlayers.org/en/latest/apidoc/module-ol_format_WFS-WFS.html\">\r\n     * ol/format/WFS.writeGetFeature</a> method.\r\n     */\r\n    wfsOptions: PropTypes.object.isRequired,\r\n\r\n    /**\r\n     * Additional options to be used for the \r\n     * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\">fetch API</a>.\r\n     */\r\n    fetchOptions: PropTypes.object,\r\n\r\n    /**\r\n     * Message to be shown requesting the user to provide the point.\r\n     * If not provided, a default message will be provided by the application.\r\n     */\r\n    msg: PropTypes.string,\r\n\r\n    /**\r\n     * The child node for the button\r\n     */\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default WfsSearchByPointButton;","import React from 'react';\r\nimport WfsSearchByPointButton from '../../../../button/wfs/WfsSearchByPointButton/WfsSearchByPointButton';\r\n\r\n\r\nconst WfsSearchByPointMenuBar = ({\r\n    url,\r\n    layer,\r\n    map,\r\n    wfsOptions\r\n}) => {\r\n    \r\n    return (\r\n        <WfsSearchByPointButton \r\n            type='primary' \r\n            url={url}\r\n            map={map}\r\n            vectorLayer={layer}\r\n            wfsOptions={wfsOptions}\r\n        >\r\n            Search by Point\r\n        </WfsSearchByPointButton>\r\n    );\r\n};\r\n\r\nexport default WfsSearchByPointMenuBar;","import {useCallback, useState, useEffect} from 'react';\r\nimport {platformModifierKeyOnly} from 'ol/events/condition';\r\nimport OlOverlay from 'ol/Overlay';\r\nimport OlSourceVector from 'ol/source/Vector';\r\nimport DragBox from 'ol/interaction/DragBox';\r\nimport './interactions.css';\r\n\r\n/**\r\n * Hook to retrieve the BBox geometry by allowing the\r\n * user to draw a vector box by clicking and dragging on the map\r\n * @param {*} map \r\n * @param {*} msg \r\n */\r\nconst useGetBBoxGeomInteraction = (\r\n    map, \r\n    msg = 'Ctrl + Pick and drag to draw BBox or &lt;esc&gt; to Cancel'\r\n    \r\n) => {\r\n\r\n    /**\r\n     * The ol.geometry to be shown during the operation and\r\n     * to be returned to caller.\r\n     */\r\n    const [geometry, setGeometry] = useState(null);\r\n\r\n    const boxStartHandler = useCallback((evt) => {\r\n        //console.log('boxstart fired', evt);\r\n    }, []);\r\n\r\n    const boxDragHandler = useCallback((evt) => {\r\n        //console.log('boxdrag fired', evt);\r\n    }, []);\r\n\r\n    const boxCancelHandler = useCallback((evt) => {\r\n        //console.log('boxcancel fired', evt);\r\n    }, []);\r\n\r\n    /**\r\n     * Method to create BBox Interaction.\r\n     * The interaction will start once it is added\r\n     * to the map. Once the interaction is started,\r\n     * a temporary feature will be shown\r\n     * \r\n     * @param {} map \r\n     * @param {*} source \r\n     */\r\n    const createInteraction = useCallback((map, source) => {\r\n        //create drag box interaction\r\n        const dragBox = new DragBox({\r\n            condition: platformModifierKeyOnly\r\n        });\r\n        //register interaction\r\n        dragBox.on('boxstart', boxStartHandler);\r\n        dragBox.on('boxdrag', boxDragHandler);\r\n        //register 'boxend' event\r\n        dragBox.on('boxend', (evt) => {\r\n            setGeometry(dragBox.getGeometry());\r\n            setIsRunning(false);\r\n        });\r\n        dragBox.on('boxcancel', boxCancelHandler);\r\n        //activate interaction\r\n        dragBox.setActive(false);\r\n\r\n        return dragBox;\r\n    },[boxStartHandler, boxDragHandler, boxCancelHandler]);\r\n\r\n    /**\r\n     * Method to create the tooltip.\r\n     * \r\n     */\r\n    const createTooltip = useCallback(() => {\r\n        const tooltipEl = document.createElement('div');\r\n        tooltipEl.className = 'tooltip-hidden';\r\n        //create overlay tooltip\r\n        const tooltip = new OlOverlay({\r\n            element: tooltipEl,\r\n            offset: [15, 0],\r\n            positioning: 'center-left'\r\n        });\r\n        return tooltip;\r\n    }, []);\r\n\r\n    /**\r\n     * Overlay to show the tooltip messages.\r\n     *  @type {ol.Overlay}\r\n     */\r\n    //const [tooltip, setTooltip] = useState(createTooltip(map));\r\n    const tooltip = useState(createTooltip())[0];\r\n    \r\n     /**\r\n     * State to indicate if the interaction is running\r\n     */\r\n    const [isRunning, setIsRunning] = useState(false);\r\n\r\n     /**\r\n     * The DragBox Interaction created initially\r\n     * @type {ol.interaction.DragBox}\r\n     */\r\n    const interaction = useState(createInteraction(map, new OlSourceVector()))[0];\r\n\r\n     /**\r\n     * Handler to handle the event 'mouseout' for the \r\n     * ol.Viewport. This event is fired once the mouse\r\n     * is outside the viewport area.\r\n     * This method will hide the tooltip once the mouse\r\n     * is outside the viewport area.\r\n     */\r\n    const mouseOutHandler = useCallback(() => {\r\n        if(tooltip && tooltip.getElement()) {\r\n           tooltip.getElement().innerHTML = \"\";\r\n           tooltip.getElement().className = 'tooltip-hidden'\r\n       }\r\n   }, [tooltip]);\r\n\r\n\r\n   /**\r\n     * Handler to handle the event 'pointermove' fired\r\n     * by ol.Map.\r\n     * Triggered when a pointer is moved. Note that on touch devices \r\n     * this is triggered when the map is panned, so is not the same as \r\n     * mousemove.\r\n     * This handler will reposition the tooltip in the current mouse\r\n     * position\r\n     */\r\n    const pointerMoveHandler = useCallback((evt) => {\r\n        if (evt.dragging) {\r\n            return;\r\n        }\r\n\r\n        if(tooltip && tooltip.getElement()) {\r\n            tooltip.getElement().innerHTML = msg;\r\n            tooltip.getElement().className = 'tooltip';\r\n        }\r\n        \r\n        if(tooltip) tooltip.setPosition(evt.coordinate);\r\n\r\n    },[tooltip, msg]);\r\n\r\n\r\n    /**\r\n     * Callback to start the interaction\r\n     */\r\n    const start = useCallback(() => {\r\n        setIsRunning(true);\r\n    }, []);\r\n\r\n    /**\r\n     * Callback to stop the interaction\r\n     */\r\n    const stop = useCallback(() => {\r\n        setIsRunning(false);\r\n    }, []);\r\n\r\n    /**\r\n     * Method to clear the retrieved geometry data\r\n     */\r\n    const clear = useCallback(() => {\r\n        setGeometry(null);\r\n    }, []);\r\n\r\n    /**\r\n     * Event handler to cancel the interaction \r\n     * if the user press the <esc> key\r\n     */\r\n    const escKeyHandler = useCallback((evt) => {\r\n        if(evt.keyCode === 27) {\r\n            stop();\r\n        }\r\n    }, [stop]);\r\n\r\n    /**\r\n     * Method to clean-up\r\n     */\r\n    const cleanup = useCallback(() => {\r\n        document.removeEventListener('keydown', escKeyHandler);\r\n        interaction.setActive(false);\r\n        map.removeOverlay(tooltip);\r\n        map.getViewport().removeEventListener('mouseout', mouseOutHandler);\r\n        map.un('pointermove', pointerMoveHandler);\r\n        mouseOutHandler();\r\n    }, [interaction, map, tooltip, escKeyHandler, mouseOutHandler, pointerMoveHandler])\r\n\r\n    /**\r\n     * Effect to start/stop the interaction based\r\n     * on the 'isRunning' state\r\n     */\r\n    useEffect(() => {\r\n        if(isRunning) {\r\n            document.addEventListener('keydown', escKeyHandler);\r\n            interaction.setActive(true);\r\n            map.addOverlay(tooltip);\r\n            map.getViewport().addEventListener('mouseout', mouseOutHandler);\r\n            map.on('pointermove', pointerMoveHandler);\r\n        }\r\n        else {\r\n            cleanup();\r\n        }\r\n        return () => {\r\n            cleanup();\r\n        }\r\n    }, [isRunning, interaction, map, tooltip, cleanup, pointerMoveHandler, mouseOutHandler, escKeyHandler]);\r\n\r\n    /**\r\n     * Effect to add/remove the interaction from the map\r\n     */\r\n    useEffect(() => {\r\n        map.addInteraction(interaction);\r\n        return () => {\r\n            map.removeInteraction(interaction);\r\n        }\r\n    }, [createInteraction, interaction, map]);\r\n\r\n    return {start, stop, clear, geometry, isRunning};\r\n};\r\n\r\nexport default useGetBBoxGeomInteraction;","import React, {useCallback, useEffect} from 'react';\r\nimport {Map} from 'ol';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from 'antd';\r\nimport useGetBBoxGeomInteraction from '../../../../hooks/interactions/useGetBBoxGeomInteraction';\r\nimport useWFSGetFeature from '../../../../hooks/wfs/useWFSGetFeature';\r\nimport {bbox} from 'ol/format/filter';\r\n\r\n/**\r\n * <p>\r\n *  Button to allow to retrieve the WFS features based on the BBOX (boundary box) \r\n *  provided by the user.\r\n * </p>\r\n * \r\n * <p>Remark: this component is present in the <i>WfsFeatureGrid</i> component.</p>\r\n *\r\n  * <p>\r\n *  Check in the <a href=\"https://ant.design/components/button/\">documentation</a> \r\n *  for additional properties for the button.\r\n * </p>\r\n * \r\n * @visibleName WFS Search By BBOX Button\r\n */\r\nconst WfsSearchByBBoxButton = ({\r\n    url, \r\n    map, \r\n    vectorLayer, \r\n    wfsOptions,\r\n    fetchOptions, \r\n    msg, \r\n    ...otherProps\r\n}) => {\r\n    const {geometryName, srsName} = wfsOptions;\r\n    const {start, clear, geometry, isRunning} = useGetBBoxGeomInteraction(map, msg);\r\n    const wfsGetFeature = useWFSGetFeature();\r\n\r\n    const onClickHandler = useCallback((event) => {\r\n        start();\r\n    }, [start]);\r\n\r\n    useEffect(() => {\r\n        if(geometry && !isRunning) {\r\n            //clear layer\r\n            vectorLayer.getSource().clear();\r\n            //create filter\r\n            const geom = geometry;\r\n            const filter = bbox(\r\n                geometryName, \r\n                geom.getExtent(),\r\n                srsName\r\n            );\r\n            const wfsFilteredOptions = {...wfsOptions, filter};\r\n            wfsGetFeature.sendRequest(url, map, vectorLayer, wfsFilteredOptions, fetchOptions);\r\n            clear();\r\n        }\r\n    }, [geometry, isRunning, vectorLayer, geometryName, srsName, map, url, wfsGetFeature, wfsOptions, fetchOptions, clear]);\r\n\r\n    return(\r\n        <Button {...otherProps} onClick={onClickHandler} \r\n            disabled={isRunning}\r\n            loading={wfsGetFeature.isLoading}\r\n        >\r\n            {otherProps.children}\r\n        </Button>\r\n    );\r\n};\r\n\r\nWfsSearchByBBoxButton.propTypes = {\r\n\r\n    /**\r\n     * The url used for the WFS request\r\n     */\r\n    url: PropTypes.string.isRequired,\r\n\r\n    /**\r\n     * The OpenLayers ol/Map where the WFS features will be rendered.\r\n     */\r\n    map: PropTypes.instanceOf(Map).isRequired,\r\n\r\n    /**\r\n     * The <i>ol/layer/Vector</i> layer from where the WFS features will\r\n     * be stored. \r\n     */\r\n    vectorLayer: PropTypes.instanceOf(VectorLayer).isRequired,\r\n\r\n    /**\r\n     * The WFS options for the WFS GetFeature request.\r\n     * This object has the same format as used in the OpenLayers \r\n     * <a href=\"https://openlayers.org/en/latest/apidoc/module-ol_format_WFS-WFS.html\">\r\n     * ol/format/WFS.writeGetFeature</a> method.\r\n     */\r\n    wfsOptions: PropTypes.object.isRequired,\r\n\r\n    /**\r\n     * Additional options to be used for the \r\n     * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\">fetch API</a>.\r\n     */\r\n    fetchOptions: PropTypes.object,\r\n\r\n    /**\r\n     * Message to be shown requesting the user to provide the BBOX.\r\n     * If not provided, a default message will be provided by the application.\r\n     */\r\n    msg: PropTypes.string,\r\n\r\n    /**\r\n     * The child node for the button\r\n     */\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default WfsSearchByBBoxButton;","import React from 'react';\r\nimport WfsSearchByBBoxButton from '../../../../button/wfs/WfsSearchByBBoxButton/WfsSearchByBBoxButton';\r\n\r\nconst WfsSearchByBBoxMenuBar = ({\r\n    url,\r\n    layer,\r\n    map,\r\n    wfsOptions\r\n}) => {\r\n    \r\n    return (\r\n        <WfsSearchByBBoxButton \r\n            type='primary' \r\n            url={url}\r\n            map={map}\r\n            vectorLayer={layer}\r\n            wfsOptions={wfsOptions}\r\n        >\r\n            Search by BBox\r\n        </WfsSearchByBBoxButton>\r\n    );\r\n};\r\n\r\nexport default WfsSearchByBBoxMenuBar;","import {useCallback, useState, useEffect} from 'react';\r\nimport OlOverlay from 'ol/Overlay';\r\nimport OlInteractionDraw from 'ol/interaction/Draw';\r\nimport OlInteractionSnap from 'ol/interaction/Snap';\r\nimport OlStyleStyle from 'ol/style/Style';\r\nimport OlStyleFill from 'ol/style/Fill';\r\nimport OlStyleCircle from 'ol/style/Circle';\r\nimport olStyleStroke from 'ol/style/Stroke';\r\nimport OlSourceVector from 'ol/source/Vector';\r\nimport './interactions.css';\r\n\r\n\r\nconst defaultStyle = new OlStyleStyle({\r\n    fill: new OlStyleFill({\r\n        color: 'rgba(255, 0, 0, 0.4)'\r\n    }),\r\n    stroke: new olStyleStroke({\r\n        color: '#ff0000',\r\n        width: 3\r\n    }),\r\n    image: new OlStyleCircle({\r\n        radius: 7,\r\n        fill: new OlStyleFill({\r\n        color: '#ff0000'\r\n      })\r\n    })\r\n  });\r\n\r\nconst useGetPolygonGeomInteraction = (\r\n    map, \r\n    msg = 'Pick Points to Draw Polygon or &lt;esc&gt; to Cancel',\r\n    style = defaultStyle,\r\n    \r\n) => {\r\n\r\n     /**\r\n     * The ol.geometry to be shown during the operation and\r\n     * to be returned to caller.\r\n     */\r\n    const [geometry, setGeometry] = useState(null);\r\n\r\n    const drawStartHandler = useCallback((evt) => {\r\n        //console.log('drawStartHandler');\r\n    }, []);\r\n\r\n    const drawEndHandler = useCallback((evt) => {\r\n        if(evt.feature && evt.feature.getGeometry() !== geometry) {\r\n            setGeometry(evt.feature.getGeometry());\r\n        }\r\n        setIsRunning(false);\r\n    }, [geometry]);\r\n\r\n    const drawAbortHandler = useCallback(() => {\r\n        //console.log('drawAbortHandler');\r\n    }, []);\r\n\r\n    /**\r\n     * Method to create Drawing Interaction\r\n     * The interaction will start once it is added\r\n     * to the map. Once the interaction is started,\r\n     * a temporary feature will be shown\r\n     * \r\n     * @param {} map \r\n     * @param {*} source \r\n     */\r\n    const createInteraction = useCallback((map, source) => {\r\n\t\tconst newInteraction = new OlInteractionDraw(\r\n\t\t\t{\r\n\t\t\t\tsource: source,\r\n\t\t\t\ttype: 'Polygon',\r\n\t\t\t\tstyle: style\r\n\t\t\t}\r\n        );\r\n        //register handler for 'drawend' event in the interaction\r\n        newInteraction.on('drawend', drawEndHandler);\r\n        //register handler for 'drawstart' handler\r\n        newInteraction.on('drawstart', drawStartHandler);\r\n        //register handler for 'drawabort' handler\r\n        newInteraction.on('drawabort', drawAbortHandler);\r\n\r\n        newInteraction.setActive(false);\r\n        //map.addInteraction(newInteraction);\r\n\r\n        return newInteraction;\r\n    }, [drawEndHandler, drawStartHandler, drawAbortHandler, style]);\r\n\r\n\r\n    const createSnap = useCallback((map, source) => {\r\n        const newSnap = new OlInteractionSnap({source: source})\r\n        newSnap.setActive(false);\r\n\r\n        return newSnap;\r\n    }, []);\r\n\r\n\r\n    /**\r\n     * The Draw Interaction created initially\r\n     * @type {ol.interaction.Draw}\r\n     */\r\n    const interaction = useState(createInteraction(map, new OlSourceVector()))[0];\r\n\r\n    /**\r\n     * The Snap Interaction created initially\r\n     * @type {ol.interaction.Snap}\r\n     */\r\n    const snap = useState(createSnap(map, new OlSourceVector()))[0];\r\n\r\n     /**\r\n     * State to indicate if the interaction is running\r\n     */\r\n    const [isRunning, setIsRunning] = useState(false);\r\n\r\n    /**\r\n     * Method to create the tooltip.\r\n     * \r\n     */\r\n    const createTooltip = useCallback(() => {\r\n        const tooltipEl = document.createElement('div');\r\n        tooltipEl.className = 'tooltip-hidden';\r\n        //create overlay tooltip\r\n        const tooltip = new OlOverlay({\r\n            element: tooltipEl,\r\n            offset: [15, 0],\r\n            positioning: 'center-left'\r\n        });\r\n        return tooltip;\r\n    }, []);\r\n\r\n\r\n    /**\r\n     * Overlay to show the tooltip messages.\r\n     *  @type {ol.Overlay}\r\n     */\r\n    //const [tooltip, setTooltip] = useState(createTooltip(map));\r\n    const tooltip = useState(createTooltip())[0];\r\n\r\n    /**\r\n     * Handler to handle the event 'mouseout' for the \r\n     * ol.Viewport. This event is fired once the mouse\r\n     * is outside the viewport area.\r\n     * This method will hide the tooltip once the mouse\r\n     * is outside the viewport area.\r\n     */\r\n    const mouseOutHandler = useCallback(() => {\r\n        if(tooltip && tooltip.getElement()) {\r\n           tooltip.getElement().innerHTML = \"\";\r\n           tooltip.getElement().className = 'tooltip-hidden'\r\n       }\r\n   }, [tooltip]);\r\n\r\n   /**\r\n    * Handler to handle the event 'pointermove' fired\r\n    * by ol.Map.\r\n    * Triggered when a pointer is moved. Note that on touch devices \r\n    * this is triggered when the map is panned, so is not the same as \r\n    * mousemove.\r\n    * This handler will reposition the tooltip in the current mouse\r\n    * position\r\n    */\r\n   const pointerMoveHandler = useCallback((evt) => {\r\n       if (evt.dragging) {\r\n           return;\r\n       }\r\n\r\n       if(tooltip && tooltip.getElement()) {\r\n           tooltip.getElement().innerHTML = msg;\r\n           tooltip.getElement().className = 'tooltip';\r\n       }\r\n       \r\n       if(tooltip) tooltip.setPosition(evt.coordinate);\r\n\r\n   },[tooltip, msg]);\r\n\r\n\r\n    /**\r\n     * Callback to start the interaction\r\n     */\r\n    const start = useCallback(() => {\r\n        setIsRunning(true);\r\n    }, []);\r\n\r\n    /**\r\n     * Callback to stop the interaction\r\n     */\r\n    const stop = useCallback(() => {\r\n        setIsRunning(false);\r\n    }, []);\r\n\r\n    /**\r\n     * Event handler to cancel the interaction \r\n     * if the user press the <esc> key\r\n     */\r\n    const escKeyHandler = useCallback((evt) => {\r\n        if(evt.keyCode === 27) {\r\n            stop();\r\n        }\r\n    }, [stop]);\r\n\r\n    const clear = useCallback(() => {\r\n        setGeometry(null);\r\n    }, []);\r\n\r\n    const cleanup = useCallback(() => {\r\n        document.removeEventListener('keydown', escKeyHandler);\r\n        interaction.setActive(false);\r\n        snap.setActive(false);\r\n        map.removeOverlay(tooltip);\r\n        map.getViewport().removeEventListener('mouseout', mouseOutHandler);\r\n        map.un('pointermove', pointerMoveHandler);\r\n        mouseOutHandler();\r\n    }, [interaction, map, tooltip, snap, pointerMoveHandler, mouseOutHandler, escKeyHandler])\r\n  \r\n    /**\r\n     * Effect to start/stop the interaction based\r\n     * on the 'isRunning' state\r\n     */\r\n    useEffect(() => {\r\n        if(isRunning) {\r\n            document.addEventListener('keydown', escKeyHandler);\r\n            interaction.setActive(true);\r\n            snap.setActive(true);\r\n            map.addOverlay(tooltip);\r\n            map.getViewport().addEventListener('mouseout', mouseOutHandler);\r\n            map.on('pointermove', pointerMoveHandler);\r\n        }\r\n        else {\r\n            cleanup();\r\n        }\r\n        return () => {\r\n            cleanup();\r\n        }\r\n    }, [isRunning, interaction, map, tooltip, snap, cleanup, pointerMoveHandler, mouseOutHandler, escKeyHandler]);\r\n \r\n    /**\r\n     * Effect to add/remove the interaction from the map\r\n     */\r\n    useEffect(() => {\r\n        map.addInteraction(interaction);\r\n        map.addInteraction(snap);\r\n        return () => {\r\n            map.removeInteraction(interaction);\r\n            map.removeInteraction(snap);\r\n        }\r\n    }, [createInteraction, interaction, snap, map]);\r\n\r\n    return {start, stop, clear, geometry, isRunning};\r\n\r\n\r\n};\r\n\r\nexport default useGetPolygonGeomInteraction;\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Map} from 'ol';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport { Button } from 'antd';\r\nimport useGetPolygonGeomInteraction from '../../../../hooks/interactions/useGetPolygonGeomInteraction';\r\nimport useWFSGetFeature from '../../../../hooks/wfs/useWFSGetFeature';\r\nimport {intersects} from 'ol/format/filter';\r\n\r\n\r\n/**\r\n * <p>\r\n *  Button to allow to retrieve the WFS features based on the Polygon \r\n *  provided by the user.\r\n * </p>\r\n * \r\n * <p>Remark: this component also is present in the <i>WfsFeatureGrid</i> component.</p>\r\n *\r\n  * <p>\r\n *  Check in the <a href=\"https://ant.design/components/button/\">documentation</a> \r\n *  for additional properties for the button.\r\n * </p>\r\n * \r\n * @visibleName WFS Search By Polygon Button\r\n */\r\nconst WfsSearchByPolygonButton = ({\r\n    url, \r\n    map, \r\n    vectorLayer, \r\n    wfsOptions, \r\n    fetchOptions,\r\n    msg, \r\n    ...otherProps\r\n}) => {\r\n    const {geometryName, /*srsName*/} = wfsOptions;\r\n    const {start, clear, geometry, isRunning} = useGetPolygonGeomInteraction(map, msg);\r\n    const wfsGetFeature = useWFSGetFeature();\r\n\r\n    //retrieve the srs from map\r\n    const proj = map.getView().getProjection();\r\n    let srsName =proj.getCode();\r\n    const axisOrientation = proj.getAxisOrientation();\r\n    if(axisOrientation === 'neu') srsName = 'urn:x-ogc:def:crs:' + srsName;\r\n    wfsOptions.srsName = srsName;\r\n    \r\n\r\n    const onClickHandler = useCallback((event) => {\r\n        start();\r\n    }, [start]);\r\n\r\n    useEffect(() => {\r\n        if(geometry && !isRunning) {\r\n            //clear layer\r\n            vectorLayer.getSource().clear();\r\n            //create filter\r\n            const geom = geometry;\r\n            const filter = intersects(\r\n                geometryName, \r\n                geom,\r\n                srsName\r\n            );\r\n            const wfsFilteredOptions = {...wfsOptions, filter};\r\n            wfsGetFeature.sendRequest(url, map, vectorLayer, wfsFilteredOptions, fetchOptions);\r\n            clear();\r\n        }\r\n    }, [geometry, isRunning, vectorLayer, geometryName, srsName, map, url, wfsGetFeature, wfsOptions, fetchOptions, clear]);\r\n\r\n    return(\r\n        <Button {...otherProps} onClick={onClickHandler} \r\n            disabled={isRunning}\r\n            loading={wfsGetFeature.isLoading}\r\n        >\r\n            {otherProps.children}\r\n        </Button>\r\n    );\r\n};\r\n\r\nWfsSearchByPolygonButton.propTypes = {\r\n\r\n    /**\r\n     * The url used for the WFS request\r\n     */\r\n    url: PropTypes.string.isRequired,\r\n\r\n    /**\r\n     * The OpenLayers ol/Map where the WFS features will be rendered.\r\n     */\r\n    map: PropTypes.instanceOf(Map).isRequired,\r\n\r\n    /**\r\n     * The <i>ol/layer/Vector</i> layer from where the WFS features will\r\n     * be stored. \r\n     */\r\n    vectorLayer: PropTypes.instanceOf(VectorLayer).isRequired,\r\n\r\n    /**\r\n     * The WFS options for the WFS GetFeature request.\r\n     * This object has the same format as used in the OpenLayers \r\n     * <a href=\"https://openlayers.org/en/latest/apidoc/module-ol_format_WFS-WFS.html\">\r\n     * ol/format/WFS.writeGetFeature</a> method.\r\n     */\r\n    wfsOptions: PropTypes.object.isRequired,\r\n\r\n    /**\r\n     * Additional options to be used for the \r\n     * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\">fetch API</a>.\r\n     */\r\n    fetchOptions: PropTypes.object,\r\n\r\n    /**\r\n     * Message to be shown requesting the user to provide the Polygon.\r\n     * If not provided, a default message will be provided by the application.\r\n     */\r\n    msg: PropTypes.string,\r\n\r\n    /**\r\n     * The child node for the button\r\n     */\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default WfsSearchByPolygonButton;","import React from 'react';\r\nimport WfsSearchByPolygonButton from '../../../../button/wfs/WfsSearchByPolygonButton/WfsSearchByPolygonButton';\r\n\r\nconst WfsSearchByPolygonMenuBar = ({\r\n    url,\r\n    layer,\r\n    map,\r\n    wfsOptions\r\n}) => {\r\n    \r\n    return (\r\n        <WfsSearchByPolygonButton \r\n            type='primary' \r\n            url={url}\r\n            map={map}\r\n            vectorLayer={layer}\r\n            wfsOptions={wfsOptions}\r\n        >\r\n            Search by Polygon\r\n        </WfsSearchByPolygonButton>\r\n    );\r\n};\r\n\r\nexport default WfsSearchByPolygonMenuBar;","import React, {useCallback, useState} from 'react';\r\nimport {Button, Space, Input} from 'antd';\r\nimport useWFSGetFeature from '../../../../../hooks/wfs/useWFSGetFeature';\r\n\r\nconst WfsSearchByCQLFilterMenuBar = ({\r\n    url,\r\n    layer,\r\n    map,\r\n    wfsOptions\r\n}) => {\r\n\r\n    const [filterValue, setFilterValue] = useState(\"\");\r\n    const wfsGetFeature = useWFSGetFeature();\r\n\r\n    const onFilterValueHandler = useCallback((value) => {\r\n        setFilterValue(value.target.value);\r\n    },[]);\r\n\r\n    const onSearchClickHandler = useCallback((event) => {\r\n        if(!layer) return;\r\n        layer.getSource().clear();\r\n        \r\n        const wfsFilteredOptions = {...wfsOptions, cql_filter:filterValue};\r\n        wfsGetFeature.sendRequest(url, map, layer, wfsFilteredOptions);\r\n\r\n    }, [layer, filterValue, wfsOptions, wfsGetFeature, map, url]);\r\n\r\n    return (\r\n        <Space>\r\n            <Button type=\"primary\" \r\n                    loading={wfsGetFeature.isLoading} \r\n                    onClick={onSearchClickHandler}\r\n            >\r\n                Search by CQL\r\n            </Button>\r\n            <Input placeholder=\"CQL Filter\" onChange={onFilterValueHandler}\r\n                   onPressEnter={onSearchClickHandler} style={{width: 800}}\r\n            />\r\n        </Space>\r\n    );\r\n};\r\n\r\nexport default WfsSearchByCQLFilterMenuBar;","import React, {useState} from 'react';\r\nimport { Space, Dropdown, Button, Radio, Divider, Menu } from 'antd';\r\nimport WfsSearchByPropertyMenuBar from '../WfsSearchByPropertyMenuBar/WfsSearchByPropertyMenuBar';\r\nimport WfsSearchByPointMenuBar from '../WfsSearchByPointMenuBar/WfsSearchByPointMenuBar';\r\nimport WfsSearchByBBoxMenuBar from '../WfsSearchByBBoxMenuBar/WfsSearchByBBoxMenuBar';\r\nimport WfsSearchByPolygonMenuBar from '../WfsSearchByPolygonMenuBar/WfsSearchByPolygonMenuBar';\r\nimport WfsSearchByCQLFilterMenuBar from '../WfsSearchByCQLFilterMenuBar/WfsSearchByCQLFilterMenuBar';\r\n\r\nconst WfsSearchMenuBar = ({\r\n    map,\r\n    layer,\r\n    url,\r\n    wfsOptions,\r\n    columnDefs\r\n}) => {\r\n\r\n    const [searchType, setSearchType] = useState(1);\r\n   \r\n\r\n    const onChangeSearchType = (e) => {\r\n        setSearchType(e.target.value);\r\n    };\r\n\r\n    const radioStyle = {\r\n        display: 'block',\r\n        height: '30px',\r\n        lineHeight: '50px',\r\n    };\r\n\r\n    let childSearchPanel = null;\r\n        switch(searchType) {\r\n            case 1:\r\n                childSearchPanel = (\r\n                    <WfsSearchByPropertyMenuBar url={url} map={map} layer={layer} \r\n                                              wfsOptions={wfsOptions} columnDefs={columnDefs}\r\n                    />\r\n                );\r\n                break;\r\n            case 2:\r\n                childSearchPanel = (\r\n                    <WfsSearchByPointMenuBar url={url} map={map} layer={layer} \r\n                                           wfsOptions={wfsOptions}\r\n                    />\r\n                );\r\n                break;\r\n            case 3:\r\n                childSearchPanel = (\r\n                    <WfsSearchByBBoxMenuBar url={url} map={map} layer={layer} \r\n                                          wfsOptions={wfsOptions}\r\n                    />\r\n                );\r\n                break;\r\n            case 4:\r\n                childSearchPanel = (\r\n                    <WfsSearchByPolygonMenuBar url={url} map={map} layer={layer} \r\n                                           wfsOptions={wfsOptions}\r\n                    />\r\n                );\r\n                break;\r\n            case 5:\r\n                childSearchPanel = (\r\n                    <WfsSearchByCQLFilterMenuBar url={url} map={map} layer={layer} \r\n                                           wfsOptions={wfsOptions}\r\n                    />\r\n                );\r\n                break;\r\n            case 6:\r\n                childSearchPanel = null;\r\n                break;\r\n            default:\r\n                childSearchPanel = null;\r\n        }\r\n\r\n    const searchMenu = (\r\n        <Menu>\r\n            <Menu.Item>\r\n                <Radio.Group onChange={onChangeSearchType} value={searchType}>\r\n                    <Radio style={radioStyle} value={1}>\r\n                        By Property\r\n                    </Radio>\r\n                    <Radio style={radioStyle} value={2}>\r\n                        By Point\r\n                    </Radio>\r\n                    <Radio style={radioStyle} value={3}>\r\n                        By BBox\r\n                    </Radio>\r\n                    <Radio style={radioStyle} value={4}>\r\n                        By Polygon\r\n                    </Radio>\r\n                    <Radio style={radioStyle} value={5} disabled>\r\n                        By CQL\r\n                    </Radio>\r\n                </Radio.Group>\r\n            </Menu.Item>\r\n        </Menu>\r\n    );\r\n\r\n\r\n    return(\r\n        <Space>\r\n            <Dropdown overlay={searchMenu} placement=\"bottomLeft\">\r\n                <Button>Search Type</Button>\r\n            </Dropdown>\r\n            <Divider type=\"vertical\" />\r\n            {childSearchPanel}\r\n            {/* <WfsSearchByPropertyMenuBar url={url} map={map} layer={layer} wfsOptions={wfsOptions} columnDefs={columnDefs}/> */}\r\n        </Space>\r\n    );\r\n\r\n};\r\n\r\nexport default WfsSearchMenuBar;","import { useState, useCallback } from 'react'\r\n\r\n\r\nconst useWFSDescribeFeatureType = () => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [data, setData] = useState(null);\r\n\r\n    const sendRequest = useCallback( async (url, featureType,\r\n        wfsOpts = {\r\n            version: '1.1.0',\r\n            exceptions: 'application/vnd.ogc.se_xml',\r\n            outputFormat: 'application/json'\r\n\r\n        }, \r\n        fetchOptions = {\r\n            method: 'GET'\r\n        }\r\n    ) => {\r\n        //build WFS request\r\n        const typeName =  (wfsOpts.version === '1.1.0' || wfsOpts.version === '1.0.0' ? 'typeName': 'typeNames');\r\n        url = url + '?service=wfs&request=DescribeFeatureType' +\r\n            '&version=' + wfsOpts.version +\r\n            '&' + typeName + '=' + featureType +\r\n            '&outputFormat=' + wfsOpts.outputFormat +\r\n            '&exceptions=' + wfsOpts.exceptions;\r\n        //format fetch options with the content type\r\n        setIsLoading(true);\r\n        setError(null);\r\n        setData(null);\r\n        //fetch data\r\n        fetch(url, fetchOptions)\r\n        .then(response => {\r\n            if(!response.ok) {\r\n               throw new Error(response);\r\n            }\r\n            return response.json();\r\n        })\r\n        .then(responseData => {\r\n            //parse the features and add them to the layer source\r\n            setIsLoading(false);\r\n            setData(responseData);\r\n        })\r\n        .catch(error => {\r\n            setError(error.message);\r\n            setIsLoading(false);\r\n        });\r\n\r\n    }, []);\r\n\r\n    const clearRequest = useCallback(() => {\r\n        setIsLoading(false);\r\n        setError(null);\r\n        setData(null);\r\n    }, []);\r\n\t\r\n    return {\r\n        sendRequest,\r\n        clearRequest,\r\n        isLoading,\r\n        data,\r\n        error\r\n    };\r\n};\r\n\r\nexport default useWFSDescribeFeatureType;","import React, {useState, useCallback, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Space, Divider} from 'antd';\r\nimport olMap from 'ol/Map';\r\nimport OlStyle from 'ol/style/Style';\r\nimport olVectorLayer from 'ol/layer/Vector';\r\nimport FeatureGrid from '../FeatureGrid/FeatureGrid';\r\nimport WfsSearchMenuBar from '../../../menuBar/wfs/search/WfsSearchMenuBar/WfsSearchMenuBar';\r\nimport useWFSDescribeFeatureType from '../../../../hooks/wfs/useWFSDescribeFeatureType';\r\n\r\n\r\nconst defaultKeyFunction = (feature) => feature.ol_uid;\r\nconst defaultColumnDefs = [];\r\n\r\n/**\r\n * <p>\r\n *  Grid Component to allow to send a WFS Request and load all the features\r\n *  Retrieved in the response.\r\n * </p>\r\n * <p>The following functionalities are present:</p>\r\n * <ol>\r\n *  <li>\r\n *      The <i>Search Type</i> button will allow to select the type of search (by\r\n *      properties, by point, by BBox, etc...)\r\n *  </li>\r\n *  <li>\r\n *      Each selected \"Search Type\" will load the needed input controls for the\r\n *      search. A button will be present to send the WFS Request after the \r\n *      needed input values were provided on these input controls.\r\n *  </li>\r\n *  <li>All the features returned in the WFS response  will be loaded in the grid.</li>\r\n *  <li>\r\n *      The <i>Clear Button</i> will offer the options to remove all loaded features in the grid or\r\n *      to remove only the feature(s) selected in the grid.\r\n *  </li>\r\n *  <li>\r\n *      The <i>Zoom Button</i> will offer the options to zoom to all features loaded in the grid or\r\n *      to zoom only to the feature(s) selected in the grid.\r\n *  </li>\r\n *  <li>\r\n *      The unselected feature(s) in the row grid will be rendered\r\n *      using the style defined in <i>featureStyle</i>.\r\n *  </li>\r\n *  <li>\r\n *      The selected feature(s) in the row grid will be rendered\r\n *      using the style defined in <i>selectedFeatureStyle</i>.\r\n *  </li>\r\n *  <li>\r\n *      Addional properties not listed below can be passed. See\r\n *      <a href=\"https://www.ag-grid.com/react-grid/grid-properties/\">documentation</a> \r\n *      for more details.\r\n *  </li>\r\n * </ol>\r\n * \r\n * @visibleName WFS Feature Grid\r\n */\r\n\r\nconst WfsFeatureGrid = (\r\n{\r\n    url,\r\n    wfsOptions,\r\n    fetchOptions,\r\n    map,\r\n    vectorLayer,\r\n    zoomToLayer = true,\r\n    columnDefs = defaultColumnDefs,\r\n    rowSelection= 'multiple',\r\n    featureStyle,\r\n    selectedFeatureStyle,\r\n    className='ag-theme-balham',\r\n    keyFunc= defaultKeyFunction,\r\n    onSelectionChanged,\r\n    onGridReady,\r\n    onRowClicked,\r\n    ...otherProps\r\n\r\n}) => {\r\n    \r\n    const {isLoading, data, error, sendRequest, } = useWFSDescribeFeatureType();\r\n\r\n    const [gridApi, setGridApi] = useState(null);\r\n    const [internalColumnDefs, setInternalColumnDefs] = useState(columnDefs);\r\n\r\n    // const previousColumnDef = usePrevious(columnDefs);\r\n    // if (columnDefs !== previousColumnDef && columnDefs !== internalColumnDefs) {\r\n    //     setInternalColumnDefs(columnDefs);\r\n    // }\r\n\r\n    /**\r\n     * Method to build the column definitios from the feature types\r\n     * retrieved from the WFS Service DescribeFeatureType\r\n     * @param {Object} jsonFeatTypes A json object retrieved from \r\n     *                               the WFS Service DescribeFeatureType\r\n     */\r\n    const buildColumnDefsFromWfsDescribeFeatureTypes = (jsonFeatTypes) => {\r\n        const newColumnDefs = [];\r\n        if(jsonFeatTypes && ('featureTypes' in jsonFeatTypes)) {\r\n            //retrieve the first feature type\r\n            const featureTypes = jsonFeatTypes.featureTypes[0].properties;\r\n            featureTypes.forEach((featType) => {\r\n                //filter out of geometry gml types\r\n                if(!featType.type.includes('gml')) {\r\n                    newColumnDefs.push({\r\n                        field: featType.name,\r\n                        sortable:true,\r\n                        filter:true,\r\n                        resizable:true\r\n                    });\r\n                }\r\n            });\r\n        }\r\n\r\n        return newColumnDefs;\r\n    };\r\n\r\n\r\n     /**\r\n     * Event Handler fired when the grid is ready.\r\n     * This handler will initialize the grid api \r\n     * in the state\r\n     */\r\n    const onInternalGridReady = useCallback((params) => {\r\n        setGridApi(params.api);\r\n        onGridReady && onGridReady(params);\r\n    }, [onGridReady]);\r\n\r\n\r\n    /**\r\n     * Send a call to WFS DescribeFeatureType to be used later\r\n     * to build the column definitions\r\n    */\r\n    useEffect(() => {\r\n            //const featureType = 'LoM:WFS_MUN';\r\n            let featureType = wfsOptions.featureTypes[0];\r\n            if ('featurePrefix' in wfsOptions) {\r\n                featureType = wfsOptions.featurePrefix + ':' + featureType;\r\n            }\r\n            sendRequest(url, featureType);\r\n\r\n    }, [sendRequest, url, wfsOptions]);\r\n\r\n\r\n    /**\r\n     * Build the Grid Column definitions from the data retrieved from\r\n     * the WFS service DescribeFeatureType\r\n     */\r\n    useEffect(() => {\r\n        if((! internalColumnDefs || internalColumnDefs.length === 0) \r\n            && data && !isLoading && !error) {\r\n                const newColumnDefs = buildColumnDefsFromWfsDescribeFeatureTypes(data);\r\n                setInternalColumnDefs(newColumnDefs);\r\n            }\r\n    }, [internalColumnDefs, vectorLayer, data, isLoading, error]);\r\n\r\n    return(\r\n        // <VBoxLayout>\r\n            <div style={ { height: \"100%\", width: \"100%\" } }>\r\n                <Space wrap /*style={{ margin: \"2px\" }}*/ >\r\n                    <FeatureGrid.MenuBar map={map} layer={vectorLayer} gridApi={gridApi} />\r\n                    <Divider type=\"vertical\" />\r\n                    <WfsFeatureGrid.SearchMenuBar map={map} layer={vectorLayer} url={url} \r\n                        wfsOptions={wfsOptions} fetchOptions={fetchOptions} columnDefs={internalColumnDefs}\r\n                    />\r\n                </Space>\r\n                <FeatureGrid\r\n                    map={map}\r\n                    vectorLayer={vectorLayer}\r\n                    zoomToLayer={zoomToLayer}\r\n                    columnDefs={internalColumnDefs}\r\n                    rowSelection={rowSelection}\r\n                    featureStyle={featureStyle}\r\n                    selectedFeatureStyle={selectedFeatureStyle}\r\n                    keyFunc={keyFunc}\r\n                    onGridReady={onInternalGridReady}\r\n                    onSelectionChanged={onSelectionChanged}\r\n                    onRowClicked={onRowClicked}\r\n                    className={className}\r\n                    {...otherProps}\r\n                />\r\n            </div>\r\n        // </VBoxLayout> \r\n    );\r\n};\r\n\r\nWfsFeatureGrid.propTypes = {\r\n\r\n    /**\r\n     * The url used for the WFS request\r\n     */\r\n    url: PropTypes.string.isRequired,\r\n\r\n    /**\r\n     * The WFS options for the WFS GetFeature request.\r\n     * This object has the same format as used in the OpenLayers \r\n     * <a href=\"https://openlayers.org/en/latest/apidoc/module-ol_format_WFS-WFS.html\">\r\n     * ol/format/WFS.writeGetFeature</a> method.\r\n     */\r\n    wfsOptions: PropTypes.object.isRequired,\r\n\r\n    /**\r\n     * Additional options to be used for the \r\n     * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\">fetch API</a>.\r\n     */\r\n    fetchOptions: PropTypes.object,\r\n\r\n    /**\r\n     * The OpenLayers map <i>ol/Map</i> where the features will be rendered.\r\n     */\r\n    map: PropTypes.instanceOf(olMap).isRequired,\r\n\r\n    /**\r\n     * The OpenLayers vector layer <i>ol/layer/Vector</i> \r\n     * where the feature will be rendered.\r\n     */\r\n    vectorLayer: PropTypes.instanceOf(olVectorLayer).isRequired,\r\n\r\n    /**\r\n     * If true, the map will we zoomed to the features in the \r\n     * layer <i>vectorLayer</i> during the initialization;\r\n     */\r\n    zoomToLayer: PropTypes.bool,\r\n\r\n    /**\r\n     * <p>Array of <a href=\"https://www.ag-grid.com/react-grid/grid-properties\">Column Definitions.</a></p>\r\n     * <p>\r\n     *  If it is a empty array, all the property names will be shown\r\n     *  in the grid.\r\n     * </p>\r\n     */\r\n    columnDefs: PropTypes.array,\r\n\r\n    /**\r\n     * Allow a single or multiple row selection in the grid.\r\n     */\r\n    rowSelection: PropTypes.oneOf(['single', 'multiple']),\r\n\r\n     /**\r\n     * The openLayers style <i>ol/Style</i> used to render the\r\n     * <u>unselected</u> feature(s) in the row grid.\r\n     * If not provided, a default style will be provided\r\n     * by the <i>FeatureGrid</i> component.\r\n     */\r\n    featureStyle: PropTypes.instanceOf(OlStyle),\r\n\r\n     /**\r\n     * The openLayers style <i>ol/Style</i> used to render the\r\n     * <u>selected</u> feature(s) in the row grid.\r\n     * If not provided, a default style will be provided\r\n     * by the <i>FeatureGrid</i> component\r\n     */\r\n    selectedFeatureStyle: PropTypes.instanceOf(OlStyle),\r\n\r\n    /**\r\n     * Function to provide a unique identifer for the feature in the map.\r\n     * The default function returns your internal unique identifier (uid).\r\n     */\r\n    keyFunc: PropTypes.func,\r\n\r\n    /**\r\n     * Event Handler for the event fired once the user selects \r\n     * one or more rows in the grid. See example below to check\r\n     * how it works.\r\n     */\r\n    onSelectionChanged: PropTypes.func,\r\n\r\n    /**\r\n     * Event Handler for the event fired once the grid was\r\n     * initialised.\r\n     */\r\n    onGridReady: PropTypes.func,\r\n\r\n    /**\r\n     * Event Handler for the event fired once a row in the\r\n     * grid is selected.\r\n     */\r\n    onRowClicked: PropTypes.func,\r\n\r\n    /**\r\n     * The class name to provide different themes.\r\n     * Check the  <a href=\"https://www.ag-grid.com/react-grid/themes-provided/\">available themes.</a>\r\n     * details about available themes.\r\n     */\r\n    className: PropTypes.string,\r\n\r\n}\r\n\r\n\r\n\r\nWfsFeatureGrid.SearchMenuBar = WfsSearchMenuBar;\r\n\r\nexport default WfsFeatureGrid;","import {useState, useCallback} from 'react';\r\nimport Window from '../../../window/base/Window/Window.js'\r\nimport {Space, Select, Input, InputNumber, Button} from 'antd';\r\nimport {get as getProjection} from 'ol/proj/projections';\r\nimport {transform} from 'ol/proj';\r\nimport {getCoordinateLabel, coordinateToString, stringToCoordinate, zoomCenter} from '../../../../util/map';\r\n\r\n\r\nconst ZoomCenterWnd = ({\r\n    title=\"Zoom Center\",\r\n    visible=true,\r\n    onClose,\r\n    map,\r\n    defaultScale = 500,\r\n    projs=[map.getView().getProjection()],\r\n    style,\r\n}) => {\r\n\r\n    const [curProjCode, setCurProjCode] = useState(map.getView().getProjection().getCode());\r\n    const [curStrCoordinate, setCurStrCoordinate] = useState(undefined);\r\n    const [curScale, setCurScale] = useState(defaultScale);\r\n\r\n    /**\r\n     * Handler called once the projection is changed in the combo box\r\n     */\r\n    const onProjChangeHandler = useCallback((value) => {\r\n        //parse x and y values from input\r\n        const oldCoordinate = stringToCoordinate(curStrCoordinate, curProjCode);\r\n        if(oldCoordinate)\r\n            setCurStrCoordinate(coordinateToString(oldCoordinate, curProjCode, value))\r\n        else\r\n            setCurStrCoordinate(undefined);\r\n        setCurProjCode(value);\r\n    }, [curProjCode, curStrCoordinate]);\r\n\r\n    const onCoordinateChangeHandler = (value) => {\r\n        setCurStrCoordinate(value.target.value);\r\n    };\r\n\r\n    const onScaleChangeHandler = (value) => {\r\n        setCurScale(value);\r\n    };\r\n\r\n    const onZoomHandler = useCallback(() => {\r\n        let coordinate = stringToCoordinate(curStrCoordinate, curProjCode);\r\n        const mapProjCode = map.getView().getProjection().getCode();\r\n        if(coordinate) {\r\n            if(curProjCode !== mapProjCode) {\r\n                coordinate = transform(coordinate, curProjCode, mapProjCode);\r\n            }\r\n            zoomCenter(map, curScale, coordinate[0], coordinate[1]);\r\n        }\r\n\r\n    }, [map, curProjCode, curStrCoordinate, curScale]);\r\n\r\n\r\n    return (\r\n        <Window\r\n            title={title}\r\n            collapsible\r\n            onClose={onClose}\r\n            visible={visible}\r\n            style={style}\r\n        >\r\n            <Space direction=\"vertical\">\r\n            <Select \r\n                    defaultValue={curProjCode}\r\n                    onChange={onProjChangeHandler}\r\n                >\r\n                    {projs.map((proj) => {\r\n                        return (\r\n                            <Select.Option key={proj.getCode()} value={proj.getCode()}>\r\n                                {proj.getCode()}\r\n                            </Select.Option>\r\n                        );\r\n                    })}\r\n                </Select>\r\n                <Input\r\n                    addonBefore={getCoordinateLabel(curProjCode)}\r\n                    placeholder={\r\n                        getProjection(curProjCode).getAxisOrientation() !== 'neu'? 'X, Y': 'Y, X'\r\n                    }\r\n                    style={{width:400}}\r\n                    value={curStrCoordinate}\r\n                    onChange={onCoordinateChangeHandler}\r\n                />\r\n                <InputNumber\r\n                    //addonBefore=\"1/:\"\r\n                    defaultValue={defaultScale}\r\n                    value={curScale}\r\n                    step={100}\r\n                    min={10}\r\n                    formatter={(value) => { \r\n                        return `1/${value}`;\r\n                    }}\r\n                    parser={(value) => { \r\n                        if(value &&  value.split('/').length === 2) {\r\n                            return value.split('/')[1].trim();\r\n                        }\r\n                        return undefined;\r\n                    }}\r\n                    placeholder=\"1/Scale\"\r\n                    onChange={onScaleChangeHandler}\r\n                    style={{width:400}}\r\n                />\r\n                <Button type=\"primary\" onClick={onZoomHandler}>Zoom</Button>\r\n            </Space>\r\n        </Window>\r\n\r\n    );\r\n};\r\n\r\nexport default ZoomCenterWnd;","import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Map} from 'ol';\r\nimport {Projection} from 'ol/proj';\r\nimport {Button} from 'antd';\r\nimport ZoomCenterWnd from '../../../window/zoom/ZoomCenterWnd/ZoomCenterWnd';\r\n\r\n/**\r\n * Button to Zoom the map having the center and scale provided by the user\r\n * in thw window.\r\n * \r\n * @visibleName Zoom Center Button\r\n */\r\nconst ZoomCenterButton = (\r\n    {\r\n        map,\r\n        projs,\r\n        wndStyle, \r\n        children,\r\n        ...otherProps\r\n    }) => {\r\n\r\n        const [visibleWnd, setVisibleWnd] = useState(false);\r\n        \r\n\r\n        const onClickHandler = (event) => {\r\n            setVisibleWnd(true);\r\n        };\r\n\r\n        const onClose = () => {\r\n            setVisibleWnd(false);\r\n        };\r\n    \r\n        return(\r\n            <React.Fragment>\r\n                <Button {...otherProps} onClick={onClickHandler} \r\n                    disabled={visibleWnd}\r\n                >\r\n                    {children}\r\n                </Button>\r\n                {\r\n                    visibleWnd &&\r\n                    <ZoomCenterWnd \r\n                        title={children}\r\n                        onClose={onClose} \r\n                        visible={visibleWnd}\r\n                        map={map}\r\n                        projs={projs}\r\n                        style={wndStyle}\r\n                    />\r\n                }\r\n            </React.Fragment>\r\n        );\r\n};\r\n\r\nZoomCenterButton.propTypes = {\r\n    /**\r\n     * The OpenLayers ol/Map to zoom\r\n     */\r\n    map: PropTypes.instanceOf(Map).isRequired,\r\n\r\n    /**\r\n     * Array of ol/Projection to be available\r\n     * in a combo box in the window. So, the user will be able\r\n     * to enter a coordinate in a selected \r\n     * projection, other than the map projection.\r\n     */\r\n    projs: PropTypes.arrayOf(PropTypes.instanceOf(Projection)),\r\n\r\n    /**\r\n     * A CSS Style to render the style for the Window\r\n     */\r\n    wndStyle:PropTypes.object,\r\n\r\n    /**\r\n     * The child node for the Button and Window Title:\r\n     */\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default ZoomCenterButton;","import Window from '../../base/Window/Window';\r\nimport './AboutWnd.css';\r\n\r\nconst AboutWnd = ({\r\n    title=\"About\",\r\n    visible=false,\r\n    onOk,\r\n    ...otherProps\r\n}) => {\r\n    return (\r\n        <Window\r\n            title={title}\r\n            collapsible\r\n            onOk={onOk}\r\n            visible={visible}\r\n            {...otherProps}\r\n            //style={{width: 500, height: 500}}\r\n        >\r\n            <div className=\"rolext-about-wnd\">\r\n                <h1>React-OlExt 0.1 Beta</h1>\r\n                <h2>Components for Building Web Map Applications</h2>\r\n            </div>\r\n      </Window>\r\n    );\r\n};\r\n\r\nexport default AboutWnd;\r\n\r\n","import React, {useCallback, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Button} from 'antd';\r\nimport AboutWnd from '../../../window/common/AboutWnd/AboutWnd';\r\n\r\n/**\r\n * <p>\r\n *  About Button to show the \"About\" window.\r\n *  This window will provide information about\r\n *  the <i>React-OlExt library</i>\r\n * </p>\r\n * <p>Please, use it in your application to let the people to know about React-OlExt</p>\r\n * <p>\r\n *  Check in the <a href=\"https://ant.design/components/button/\">documentation</a> \r\n *  for additional properties for the button.\r\n * </p>\r\n * @visibleName About Button\r\n */\r\nconst AboutButton = ({\r\n    wndStyle, \r\n    children = 'About',\r\n    ...otherProps\r\n}) => {\r\n\r\n    const [visibleWnd, setVisibleWnd] = useState(false);\r\n\r\n    /**\r\n     * Handler to close the \"About\" Window once the OK button\r\n     * on this window is clicked\r\n     */\r\n    const onCloseWindow = useCallback(() => {\r\n        setVisibleWnd(false);\r\n    }, []);\r\n\r\n    /**\r\n     * Handler to show the About Window once the button is Clicked\r\n     */\r\n    const onShowWindow = useCallback(() => {\r\n        setVisibleWnd(true);\r\n    }, []);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Button onClick={onShowWindow} {...otherProps}>{children}</Button>\r\n            {visibleWnd && <AboutWnd onClose={onCloseWindow} style={wndStyle} visible={visibleWnd}/>}\r\n        </React.Fragment>\r\n    );\r\n    \r\n};\r\n\r\nAboutButton.propTypes = {\r\n\r\n     /**\r\n     * A CSS Style to render the style for the About Window\r\n     */\r\n    wndStyle:PropTypes.object,\r\n\r\n     /**\r\n     * The child node for the About Button\r\n     */\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default AboutButton;\r\n\r\n","import React from 'react';\nimport SimpleHeader from './components/header/SimpleHeader/SimpleHeader';\nimport MapWidget from './components/widget/map/MapWidget/MapWidget';\nimport MapOverviewWidget from './components/widget/map/MapOverviewWidget/MapOverviewWidget';\nimport BorderLayout from './components/layout/BorderLayout';\nimport {createDefaultOverviewMap} from './util/map';\nimport {createDefaultMap} from './util/map';\nimport LayerTree from './components/tree/layer/LayerTree/LayerTree';\nimport WmsGetFeatureInfoButton from './components/button/wms/WmsGetFeatureInfoButton/WmsGetFeatureInfoButton';\nimport GetCoordinateButton from './components/button/coordinate/GetCoordinateButton/GetCoordinateButton';\nimport WfsFeatureGrid from './components/grid/feature/WfsFeatureGrid/WfsFeatureGrid';\nimport OlSourceVector from 'ol/source/Vector';\nimport OlLayerVector from 'ol/layer/Vector';\nimport ImageLayer from 'ol/layer/Image';\nimport ImageWMSSource from 'ol/source/ImageWMS';\nimport LayerGroup from 'ol/layer/Group';\nimport {Space, Menu} from 'antd';\nimport {InfoOutlined } from '@ant-design/icons';\nimport {get as getProjection} from 'ol/proj';\nimport ZoomCenterButton from './components/button/zoom/ZoomCenterButton/ZoomCenterButton';\nimport AboutButton from './components/button/common/AboutButton/AboutButton';\nimport NewWImageMSLayerButton from './components/button/layer/new/NewImageWMSLayerButton/NewImageWMSLayerButton';\nimport NewGroupLayerButton from './components/button/layer/new/NewGroupLayerButton/NewGroupLayerButton';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport 'ol/ol.css';\n\n\n\n//Init Vector Layer to render wfs queries\nconst createWfsLayer = (map) => {\n  const layer = new OlLayerVector({\n    name: 'WFS Flemish Addresses',\n    source: new OlSourceVector()\n  });\n  map.addLayer(layer);\n  return layer;\n};\n\n//wfs options to be used by WFS GetFeature query\nconst getWfsOptions = () => {\n  const wfsOptions = {\n      srsName: 'EPSG:31370',\n      featureNS: 'informatievlaanderen.be/Adressen',\n      featurePrefix: 'Adressen',\n      featureTypes: ['Adrespos'],\n      geometryName: 'adrespositie',\n      outputFormat: 'application/json',\n       maxFeatures: 200\n  };\n  return wfsOptions;\n};\n\n//create wms layers\nconst createWmsLayers = (map) => {\n  //create parcel wms layer\n  const wmsParcelLayer = new ImageLayer({\n    name: 'GRB Parcels',\n    visible: false,\n    source: new ImageWMSSource({\n      url: 'https://geoservices.informatievlaanderen.be/raadpleegdiensten/Adpf/wms',\n      params: {\n        STYLES: '',\n        LAYERS: 'Adpf',\n        INFO_FORMAT: 'application/vnd.esri.wms_featureinfo_xml'\n      }\n    })\n  });\n  //create building wms layer\n  const wmsbuildingLayer = new ImageLayer({\n    name: 'GRB Realized Buildings',\n    source: new ImageWMSSource({\n      url: 'https://geoservices.informatievlaanderen.be/raadpleegdiensten/Gebouwenregister/wms',\n      params: {\n        STYLES: '',\n        LAYERS: 'G_GEREALISEERD',\n        INFO_FORMAT: 'application/vnd.esri.wms_featureinfo_xml'\n      }\n    })\n  });\n  //create address wms layer\n  const wmsaddressLayer = new ImageLayer({\n    name: 'GRB Addresses',\n    visible: false,\n    source: new ImageWMSSource({\n      url: 'https://geoservices.informatievlaanderen.be/raadpleegdiensten/Adressen/wms',\n      params: {\n        STYLES: '',\n        LAYERS: 'Adrespos',\n        INFO_FORMAT: 'application/vnd.esri.wms_featureinfo_xml'\n      }\n    })\n  });\n  //create group layers\n  const wmsGroupLayer = new LayerGroup({\n    name: 'WMS Flemish Layers',\n    layers: [wmsParcelLayer, wmsbuildingLayer, wmsaddressLayer],\n  });\n  //add layers to map\n  map.addLayer(wmsGroupLayer);\n  \n  return wmsGroupLayer;\n\n};\n\n//handler to resize the overview map if the border is resized\nconst dragHandler = () => {\n  map.updateSize();\n  overviewMap.updateSize();\n  overviewMap.getView().setCenter(map.getView().getCenter());\n  overviewMap.getView().set('resolution', magnification * map.getView().getResolution());\n};\n\n\n//initialize map\nconst url = 'https://geoservices.informatievlaanderen.be/overdrachtdiensten/Adressen/wfs';\nconst viewOpts= {\n  projection: 'EPSG:31370',\n  center: [157257, 172012],\n  zoom: 18\n};\nconst map = createDefaultMap(viewOpts);\nconst wmsLayers = createWmsLayers(map);\nconst wfsLayer = createWfsLayer(map);\nconst wfsOptions = getWfsOptions();\n\n\n//create overview map\nconst overviewMap = createDefaultOverviewMap(map);\n//projections to be used in the application\nconst projs= [map.getView().getProjection(), getProjection('EPSG:4326')];\nconst magnification = 5;\n\nconst App = () => {\n  return (\n    // <MapProvider map={map}>\n    <BorderLayout split=\"horizontal\" minSize={0} maxSize={150} defaultSize={150} onDragFinished={dragHandler} >\n      <Space direction='vertical' style={{width:\"100%\", minWidth:'100%', maxWidth:'100%'}}>\n        <SimpleHeader map={map}/>   \n        <Menu mode=\"horizontal\">\n          <Menu.Item key=\"2\"><GetCoordinateButton type=\"primary\" map={map} projs={[map.getView().getProjection(), getProjection('EPSG:4326')]}>Get Coordinate</GetCoordinateButton></Menu.Item>\n          <Menu.Item key=\"3\"><ZoomCenterButton type=\"primary\" map={map} projs={projs}>Zoom Center</ZoomCenterButton></Menu.Item>\n          <Menu.Item key=\"5\"><NewWImageMSLayerButton type=\"primary\" map={map} wndStyle={{visibility: 'visible', width: 700, maxHeight: 500}}>New WMS Layer</NewWImageMSLayerButton></Menu.Item>\n          <Menu.Item key=\"6\"><NewGroupLayerButton type=\"primary\" map={map} wndStyle={{visibility: 'visible', width: 700, maxHeight: 500}}>New Group Layer</NewGroupLayerButton></Menu.Item>\n          <Menu.Item key=\"4\"><AboutButton type=\"primary\"/></Menu.Item>\n          <Menu.Item key=\"1\"><WmsGetFeatureInfoButton icon= {<InfoOutlined style={{fontSize:20}}/>}  shape=\"circle\" type='primary' style={{backgroundColor:'red'}} map={map} layers={wmsLayers.getLayers().getArray()} wndStyle={{width:600}}/></Menu.Item>\n        </Menu>\n      </Space>\n      <BorderLayout split=\"horizontal\" defaultSize={250} primary=\"second\" onDragFinished={dragHandler}>\n        <BorderLayout split=\"vertical\" defaultSize={250} onDragFinished={dragHandler}>\n          {/* <VBoxLayout> */}\n            <div style={{width:\"100%\"}}>\n              <LayerTree map={map}/>\n            </div>\n          {/* </VBoxLayout> */}\n          <BorderLayout split=\"vertical\" primary=\"second\" defaultSize={350} maxSize={400} minSize={0} onDragFinished={dragHandler}>\n              <MapWidget map={map}/>\n              <MapOverviewWidget parentMap={map} map={overviewMap} magnification={magnification}/>\n          </BorderLayout>\n        </BorderLayout>\n        <WfsFeatureGrid url={url} wfsOptions={wfsOptions} map={map} vectorLayer={wfsLayer}/>\n      </BorderLayout>\n    </BorderLayout>\n    // </MapProvider>\n  );\n};\n\nexport default App;\n\n\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <MapProvider> */}\n      <App />\n    {/* </MapProvider> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n/* ReactDOM.render(\n    <App />,\n  document.getElementById('root')\n); */\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}